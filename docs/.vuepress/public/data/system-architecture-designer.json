{
  "nodes": [
    { "name": "系统架构", "category": "架构", "description": "系统架构（System Architecture）是系统的一种整体的高层次的结构表示，是系统的骨架和根基，支撑和链接各个部分，包括组件、连接件、约束规范以及指导这些内容设计与演化的原理，它是刻画系统整体抽象的一种手段。系统架构设计的目的是对需要开发的系统进行一系列相关的抽象，用于指导系统各个方面的设计与实现，架构设计在系统开发过程中起着关键性作用，架构设计的优劣决定了系统的健壮性和生命周期的长短。我们通常把架构设计作为系统开发过程中需求分析阶段后的一个关键步骤，也是系统设计前的不可或缺工作要点之一，架构设计的作用主要包括以下几点：\n1. 解决相对复杂的需求分析问题；\n2. 解决非功能属性在系统占据重要位置的设计问题；\n3. 解决生命周期长、扩展性需求高的系统整体结构问题；\n4. 解决系统基于组件需要的集成问题；\n5. 解决业务流程再造难的问题。\n系统架构设计是成熟系统开发过程中的一个重要环节，它不仅是连接用户需求和系统进一步设计与实现的桥梁，也是系统早期阶段质量保证的关键步骤。\n软件架构（也可成为体系结构）是用来刻画软件系统整体抽象结构的一种手段，软件架构设计也是软件系统开发过程中的一个重要环节。随着研究的深入和应用的推广，软件架构逐渐成为软件工程学科的重要分支方向，在基础理论和技术方向等各工程实践领域形成了自己的独特理念和完整体系。" },
    { "name": "IEEE 1741-2000", "category": "标准", "description": "IEEE 1741-2000：“IEEE's Recommand Practice for Architecture Description of Software-Intensive Systems”（软件密集型系统架构描述的推荐实践）" },
    { "name": "系统架构设计师", "category": "架构", "description": "系统架构设计师（System Architecture Designer）是负责系统架构的人、团队或组织。架构设计师是系统或产品线的设计责任人，是一个负责理解和管理并最终确认和评估非功能性系统需求（如软件的可维护性、性能、复用性、可靠性、有效性和可测试性等），给出开发规范，搭建系统实现的核心构架，对整个软件架构、关键构件和接口进行总体设计并澄清关键技术细节的高级技术人员。", "link": "/posts/system-architecture-designer/architecture-designer" },
    { "name": "模块化", "category": "架构", "description": "模块化开发方法是指把一个待开发的软件分解成若干个小的而且简单的部分，采用对复杂事物分而治之的经典原则。模块化开发方法涉及的主要问题是模块设计的规则，即系统如何分解成模块。而每一模块都可独立开发与测试，最后再组装成一个完整软件。对一个规约进行分解，以得到模块系统结构的方法有数据结构设计方法、功能分解法、数据流设计和面向对象的设计等。将系统分解成模块时，应遵循以下原则：\n1. 最高模块内聚。也就是在一个模块内部的元素最大限度地关联，只实现一种功能的模块是高内聚的，具有三种以上功能的模块是高内聚的。\n2. 最低耦合。也就是不同模块之间的关系尽可能弱，以利于软件的升级和扩展。\n3. 模块大小适度。颗粒过大会造成模块内部维护困难，而颗粒过小又会导致模块间的耦合增加。\n4. 模块调用链的深度（嵌套层次）不可过多。\n5. 接口简单、精炼（扇入扇出数不宜太大），具有信息隐蔽能力。\n6. 尽可能地复用已有模块。" },
    { "name": "服务导向架构", "category": "架构", "description": "面向对象服务架构（Service-Oriented Architecture，SOA）基于模块化思想提出，提供一组基于标准的方法和技术，通过有效整合和重用现有的应用系统和各种资源实现服务组件化，并基于服务组件实现各种新业务应用的快速组装，帮助企业更好地应对业务的灵活性要求。这样，通过有效平衡业务的灵活性和IT的复杂度，为开发者提供了新的视角，有效拉近了IT和业务的距离。" },
    { "name": "管理信息系统", "description": "管理信息系统（Management Information System，MIS）。传统MIS系统软件架构：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/mis.jpg\" />" },
    { "name": "组件化", "category": "架构", "description": "IEEE 1741-2000标准发布阶段最重要的成果之一是软件组件化技术，通过沿用20世纪的工业组件概念，提升了软件重用能力和质量。\n通常，组件具有可组装性和可插拔性。每个组件的运行仅依赖于平台或者容器，组件与组件之间不存在直接的耦合关系。同时，组件与组件之间又并非绝对独立。组件经过组装后可以与其他组件进行业务上的交互。" },
    { "name": "应用集成", "description": "应用集成是将一些基于不同平台或不同方案的应用软件有机地集成到一个无缝的、并列的、易于访问的单一系统中，以建立一个统一的综合应用。" },
    { "name": "架构描述与表示", "category": "架构" },
    { "name": "架构描述语言", "category": "架构", "description": "架构描述语言（Architecture Description Language，ADL）" },
    { "name": "C2SADL", "category": "架构", "description": "基于组件和消息的软件架构描述语言" },
    { "name": "Wright", "category": "架构", "description": "分布、并发类型的架构描述语言" },
    { "name": "ACME", "category": "架构", "description": "架构互换语言" },
    { "name": "UniCon", "category": "架构", "description": "基于组件和连接的架构描述语言" },
    { "name": "Rapide", "category": "架构", "description": "基于事件的架构描述语言" },
    { "name": "Darwin", "category": "架构" },
    { "name": "MetaH", "category": "架构" },
    { "name": "Aesop", "category": "架构" },
    { "name": "Weaves", "category": "架构" },
    { "name": "SADL", "category": "架构" },
    { "name": "xADL", "category": "架构" },
    { "name": "架构分析", "category": "架构", "description": "架构分析的内容可为结构分析、功能分析和非功能分析。分析的目的是系统被实际构造之前预测其质量属性" },
    { "name": "架构分析方法", "category": "架构" },
    { "name": "SAAM", "category": "架构", "description": "软件架构分析方法" },
    { "name": "ATAM", "category": "架构", "description": "架构权衡分析法" },
    { "name": "CBAM", "category": "架构", "description": "成本效益分析法" },
    { "name": "SBAR", "category": "架构", "description": "基于场景的架构再工程" },
    { "name": "ALPSM", "category": "架构", "description": "架构层次的软件可维护性预测" },
    { "name": "SAEM", "category": "架构", "description": "软件架构评估模型" },
    { "name": "架构设计", "category": "架构", "description": "架构设计是指生成一个满足用户需求的软件架构过程。" },
    { "name": "架构设计方法", "category": "架构" },
    { "name": "工作驱动", "category": "架构", "description": "从工作描述中提取架构描述的工作驱动（artifact-driven）方法" },
    { "name": "用例驱动", "category": "架构", "description": "从用例导出架构抽象的用例驱动（use-case-driven）方法" },
    { "name": "模式驱动", "category": "架构", "description": "从模式导出架构抽象的模式驱动（pattern-driven）方法" },
    { "name": "域驱动", "category": "架构", "description": "从领域模型导出架构抽象的域驱动（domain-driven）方法" },
    { "name": "属性驱动设计", "category": "架构", "description": "从设计过程中获得架构质量属性需求的属性驱动设计（attribute-driven design）方法" },
    { "name": "架构测试", "category": "架构", "description": "架构测试着重于仿真系统模型、解决架构层的主要问题。" },
    { "name": "架构测试策略", "category": "架构" },
    { "name": "单元测试", "category": "架构" },
    { "name": "子系统测试", "category": "架构" },
    { "name": "集成测试", "category": "架构" },
    { "name": "验收测试", "category": "架构" },
    { "name": "架构测试方法", "category": "架构" },
    { "name": "架构测试覆盖方法", "category": "架构" },
    { "name": "组件设计正确性验证方法", "category": "架构" },
    { "name": "基于CHAM的架构动态语义验证方法", "category": "架构" },
    { "name": "架构发现", "category": "架构", "description": "软件架构发现解决如何从已经存在的系统中提取软件架构的问题，属于逆向工程。Waters等人提出了一种迭代式架构发现过程。" },
    { "name": "迭代架构发现过程", "category": "架构" },
    { "name": "架构演化", "category": "架构", "description": "软件架构演化即由于系统需求、技术、环境和分布等因素的变化而最终导致软件架构的变动。软件系统在运行时刻的架构变化成为架构动态性，而将架构的静态修改称为架构扩展。架构扩展和动态性都是架构适应性和演化的研究范畴。" },
    { "name": "架构适应性", "category": "架构", "description": "软件系统在运行时刻的架构变化成为架构动态性。" },
    { "name": "架构扩展", "category": "架构", "description": "架构的静态修改称为架构扩展。" },
    { "name": "架构复用", "category": "架构", "description": "软件架构复用属于设计重用，比代码重用更抽象。" },
    { "name": "架构模式", "category": "架构", "description": "架构模式是架构复用的一种成果。" },
    { "name": "开发模型", "category": "架构", "description": "软件开发模型是跨越整个软件生存周期的系统开发、运行和维护所实施的全部工作和任务的结构框架，给出了软件开发活动各个阶段之间的关系。" },
    { "name": "瀑布模型", "category": "架构", "description": "以软件需求完全确认为前提的瀑布模型。" },
    { "name": "渐进式开发模型", "category": "架构", "description": "在软件开发初期只能提供基本需求为前提的渐进式开发模型（如螺旋模型等）。" },
    { "name": "变换模型", "category": "架构", "description": "以形式化开发方法为基础的变换模型。" },
    { "name": "架构风格", "category": "架构", "description": "架构风格（架构模式）是针对给定场景中经常出现的问题提供的一般性可重用解决方案，它反映了领域中众多系统所共有的结构和语义特征，并指导如何将各个模块和子系统有效地组成一个完整的系统。通常，将软件架构风格分成主要五类（David Garland和Mary Shaw划分方式）：数据流风格、调用/返回风格、独立组件风格、虚拟机风格和仓库风格。" },
    { "name": "数据流风格", "category": "架构" },
    { "name": "调用/返回风格", "category": "架构" },
    { "name": "独立组件风格", "category": "架构" },
    { "name": "虚拟机风格", "category": "架构" },
    { "name": "仓库风格", "category": "架构" },
    { "name": "Open Group", "category": "组织" },
    { "name": "ADML", "description": "ADML是一种基于XML的架构描述语言。" },
    { "name": "XML" },
    { "name": "软件生命周期" },
    { "name": "架构模型", "category": "架构" },
    { "name": "分层架构", "category": "架构", "description": "分层架构（Layered Architecture）是最常见的软件架构，也是事实上的标准架构。这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口进行通信。分层架构通常明确约定软件一定要分成多少层，但是，最常见的是四层结构：\n1. 表现层（Presentation Layer）：用户界面，负责视觉和用户互动；\n2. 业务层（Business Layer）：实现业务逻辑；\n3. 持久层（Persistence Layer）：提供数据，SQL语句就放在这一层；\n4. 数据库（Database Layer）：保存数据。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/layered-architecture.jpg\" />\n有的项目在逻辑层和持久层之间加了一个<b>服务层</b>（Service Layer），提供不同业务逻辑需要的一些通用接口。用户的请求将依次通过这四层的处理，不能跳过其中任何一层。" },
    { "name": "事件驱动架构", "category": "架构", "description": "事件（Event）是状态发生变化时软件发出的通知。事件驱动架构（Event-driven Architecture）是通过事件进行通信的软件架构，它分成四个部分：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/event-driven-architecture.jpg\" />\n1. 事件队列（Event Queue）：接收事件的入口；\n2. 分发器（Event Mediator）：将不同的事件分发到不同的业务逻辑单元；\n3. 事件通道（Event Channel）：分发器与处理器之间的联系渠道；\n4. 事件处理器（Event Processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作。\n对于简单的项目，事件队列、分发器和事件通道可以合为一体，整个软件就分成事件代理和事件处理器两部分。\n这是一种流行的分布式异步架构模式，适用于松散耦合系统。" },
    { "name": "微核架构", "category": "架构", "description": "微核架构（Microkernel Architecture）又称为插件架构（Plug-in Architecture），是指软件的内核相对较小，主要功能和业务逻辑都通过插件实现。\n内核（Core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/microkernel-architecture.jpg\" />\n1. 核心系统（内核）：负责和具体业务功能无关的通用功能（系统运行的最小功能），例如模块加载、模块间通信等；\n2. 插件模块：负责实现具体的业务逻辑，插件是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。" },
    { "name": "微服务架构", "category": "架构", "description": "微服务架构（Microservices Architecture）是服务导向架构（Service-Oriented Architecture，SOA）的升级。每一个服务就是一个独立的部署单元（Separately Deployed Unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/microservices-architecture.jpg\" />\n微服务架构分成三种实现模式：\n1. RESTful API模式：服务通过API提供，云服务就属于这一类；\n2. RESTful应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部；\n3. 集中消息模式：采用消息代理（Message Broker）可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群。" },
    { "name": "云架构", "category": "架构", "description": "云架构（Cloud Architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。\n它的高扩展性体现在将数据都复制到内存中，变成可复制的内存数据单元，然后将业务处理能力封装成一个个处理单元（Processing Unit）。若访问量增加，就新建处理单元；若访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，需要进行数据持久化。\n云架构主要分成两部分：处理单元（Processing Unit）和虚拟中间件（Virtualized Middleware）。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/cloud-architecture.jpg\" />\n1. 处理单元：实现业务逻辑；\n2. 虚拟中间件：负责通信、保持会话控制（sessions）、数据复制、分布式处理和处理单元的部署。\n虚拟中间件又包含四个组件：\n(1) 消息中间件（Messaging Grid）：管理用户请求和会话控制（sessions），当一个请求进来以后，它决定分配给哪一个处理单元。\n(2) 数据处理中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步，保证每个处理单元都得到同样的数据。\n(3) 处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元。\n(4) 部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动负载单元，负载减少，就关闭处理单元。" },
    { "name": "架构建模方法", "category": "架构", "description": "系统架构的常用建模方法，根据建模的侧重点的不同，可以分成四种：结构模型、框架模型、动态模型和过程模型。\n这四种模型并不是完全独立的，通过有机的结合才可形成一个完整的模型来刻画系统架构，也将能更加准确、全面地反映软件架构。" },
    { "name": "结构模型", "category": "架构", "description": "结构模型是最直观、最普遍的建模方法。此方法以架构的构件、连接件和其他概念来刻画结构，并力图通过结构来反映系统的重要语义内容，包括系统的配置、约束、隐含的假设条件、风格和性质。研究结构模型的核心是架构描述语言。" },
    { "name": "框架模型", "category": "架构", "description": "框架模型与结构模型类似，但它不太侧重描述结构的细节，而更侧重整体的架构。架构模型主要以一些特殊的问题为目标建立只针对和适应问题的结构。" },
    { "name": "动态模型", "category": "架构", "description": "动态模型是对结构或框架模型的补充，主要研究系统的“大颗粒”行为的性质。例如，描述系统的重新配置或演化。这里的动态可以是指系统总体结构的配置、建立或拆除通信或计算的过程，这类系统模型常是激励型的。" },
    { "name": "过程模型", "category": "架构", "description": "过程模型是研究构造系统的步骤和过程，其结构是遵循某些过程脚本的结果。" },
    { "name": "Philippe Kruchten", "category": "人物" },
    { "name": "“4+1”架构视图模型", "category": "架构", "description": "Philippe Kruchten在1995年提出了一个“4+1”架构视图模型，从5个不同视图包括逻辑（Logical）视图、过程（Process）视图、物理（Physical）视图、开发（Development）视图和场景（Scenarios）视图来描述软件架构。每一个视图只关心系统的一个侧面，5个视图结合在一起才能够反映系统的软件架构的全部内容。" },
    { "name": "架构应用场景", "category": "架构", "description": "对于现代大型软件，很少使用单一的架构风格进行设计与开发，而是混合多种风格，从不同视角描述大型软件系统的能力，并可保证软件系统的可靠性、可扩展性、可维护性等非功能属性的正确描述。" },
    { "name": "管道-过滤器风格", "category": "架构", "description": "用于将系统分成若干独立的步骤" },
    { "name": "主程序/子系统和面向对象的架构风格", "category": "架构", "description": "用于对组件内部进行设计" },
    { "name": "虚拟机风格", "category": "架构", "description": "用于构造解释器或专家系统" },
    { "name": "C/S和B/S风格", "category": "架构", "description": "适合于数据和处理分布在一定范围，通过网络连接构成系统" },
    { "name": "平台/插件风格", "category": "架构", "description": "用于具有插件扩展功能的应用程序" },
    { "name": "MVC风格", "category": "架构", "description": "用于用户交互程序的设计" },
    { "name": "SOA风格", "category": "架构", "description": "用在企业集成等方面" },
    { "name": "C2风格", "category": "架构", "description": "用于GUI软件开发，用以构件灵活和可扩展的应用系统等" },
    { "name": "项目经理" },
    { "name": "计算机系统", "category": "计算机", "description": "计算机系统（Computer System）是指用于数据管理的计算机硬件、软件及网络组成的系统。它是按人的要求接收和存储信息，自动进行数据处理和计算，并输出结构信息的机器系统。\n计算机系统可划分为硬件（子系统）和软件（子系统）两部分。硬件由机械、电子元器件、磁介质和光介质等物理实体构成，例如处理器（含运算单元和控制单元）、存储器、输入设备和输出设备等。软件是一系列按照特定顺序组织的数据和指令，并控制硬件完成指定的功能。可将计算机软件进一步分为系统软件和应用软件，系统软件是指支持应用软件的运行，为用户开发应用软件提供平台支撑的软件，而应用软件是指计算机用户利用计算机的软、硬件资源为某一专门的应用目的而开发的软件。典型的计算机系统如下：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/composition-of-the-computer-system.jpg\" />" },
    { "name": "计算机硬件", "category": "计算机" },
    { "name": "计算机组成结构", "category": "计算机", "description": "计算机组成结构（Computer Architecture）" },
    { "name": "冯·诺依曼结构计算机", "category": "计算机", "description": "冯·诺依曼结构计算机（Von Neumann machine）" },
    { "name": "处理器", "category": "计算机", "description": "处理器（Central Processing Unit，CPU）\n典型的处理器系统结构如下：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/typical-cpu-architecture.jpg\" />\n指令部件通过MMU-Cache的存储结构，从内存等不存储设备中取得相应的软件代码指令并完成译码和控制操作，控制存取部件从存储设备中取得新的数据，控制寄存器组为运算器准备有关寄存器数据，并准备好结果寄存器，控制整型、浮点、向量等运算部件开展运算。运算部件、寄存器单元、存取部件将执行结果通知完成部件，并在完成部件中完成结果的排队，由完成部件向指令部件反馈执行结果，控制指令的顺序执行、跳转等时序。" },
    { "name": "指令集", "category": "计算机", "description": "处理器的指令集按照复杂程度可分为复杂指令集与精简指令集" },
    { "name": "CISC", "category": "计算机", "description": "复杂指令集（Complex Instruction Set Computers，CISC）" },
    { "name": "x86CPU" },
    { "name": "Intel" },
    { "name": "AMD" },
    { "name": "RISC", "category": "计算机", "description": "精简指令集（Reduced Instruction Set Computers，RISC）" },
    { "name": "ARM" },
    { "name": "Power" },
    { "name": "图形处理器", "category": "计算机", "description": "图形处理器（Graphics Processing Unit，GPU）是一种特殊类型的处理器，具有数百或数千个内核，经过优化可并行运行大量计算，因此近些年在深度学习和机器学习领域得到了广泛应用。" },
    { "name": "深度学习" },
    { "name": "机器学习" },
    { "name": "信号处理器", "category": "计算机", "description": "信号处理器（Digital Signal Processor，DSP）专用于实时的数字信号处理，通过采用饱和算法处理溢出问题，通过乘积累加运算提高矩阵运算的效率，以及为傅里叶变换设计专用指令等方法，在各类高速信号采集的设备中得到广泛应用。" },
    { "name": "现场可编程逻辑门阵列", "category": "计算机", "description": "现场可编程逻辑门阵列（Field Programmable Gate Array，FPGA）" },
    { "name": "存储器", "category": "计算机", "description": "存储器是计算机系统中的记忆设备，用来存放程序和数据。存储器利用半导体、磁、光等介质制成用于存储数据的电子设备。" },
    { "name": "存储器硬件结构", "category": "计算机", "description": "根据存储器的硬件结构可以分为SRAM、DRAM、NVRAM、Flash、EPROM、Disk等。" },
    { "name": "SRAM", "category": "计算机", "description": "静态随机存取存储器（Static Random Access Memory）" },
    { "name": "DRAM", "category": "计算机", "description": "动态随机存取存储器（Dynamic Random Access Memory）" },
    { "name": "NVRAM", "category": "计算机", "description": "非易失性随机访问存储器（Non-Volatile Random Access Memory）" },
    { "name": "Flash", "category": "计算机", "description": "闪存" },
    { "name": "EPROM", "category": "计算机", "description": "可擦编程只读存储器（Erasable Programmable Read Only Memory）" },
    { "name": "Disk", "category": "计算机", "description": "磁盘" },
    { "name": "存储器分层结构", "category": "计算机", "description": "计算机系统中的存储器通常采用分层的体系结构（Merory Hierarchy），按照与处理器的物理距离可分为四个层次：片上缓存、片外缓存、主存（内存）和外存。" },
    { "name": "片上缓存", "category": "计算机", "description": "在处理器核心中直接集成的缓存，一般为SRAM结构，实现数据的快速读取。它容量小，一般为16KB~512KB，按照不同的设计可能划分为一级或二级。" },
    { "name": "片外缓存", "category": "计算机", "description": "在处理器核心外的缓存，需要经过交换互联开关访问，一般由SRAM构成，容量较片上缓存略大，可以为256KB~4MB。按照层级被称为L2Cache或L3Cache，或者称为平台Cache（PlatformCache）。" },
    { "name": "主存", "category": "计算机", "description": "也叫内存，通常采用DRAM结构，以独立的部件/芯片存在，通过总线与处理器连接。DRAM依赖不断充电维持其中的数据，容量在数百MB至数十GB之间。" },
    { "name": "外存", "category": "计算机", "description": "可以是磁带、磁盘、光盘和各类Flash等介质器件，这类设备访问速度慢，但容量大，且在掉电后能够保持其数据。不同的介质类型容量有所不同，如Nor Flash容量一般在MB级别，磁盘容量则在GB和TB级别。外存能够在掉电后保持数居，但并非所有介质都能够永久性保存数据，每种介质都有一定的年限，如Flash外存的维持数据的年限在10年左右，光盘年限在数年至数十年，磁盘年限在10年以上，磁带年限为30年以上。" },
    { "name": "总线", "category": "计算机", "description": "总线（Bus）是指计算机部件间遵循某一特定协议实现数据交换的形式，即以一种特定格式按照规定的控制逻辑实现部件间的数据传输。\n按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。其中内总线用于各类芯片内部互连，也可称为片上总线（On-Chip Bus）或片内总线。系统总线是指计算机中CPU、主存、I/O接口的总线，计算机发展为多总线结构后，系统总线的含义有所变化，狭义的系统总线仍为CPU与主存、通信桥连接的总线；广义上，还应包含计算机系统内，经由系统总线再次级联的总线，常被成为局部总线（Local Bus）。外部总线是计算机板和外部设备之间，或者计算机系统之间互联的总线，又称为通信总线。总线之间通过桥（Bridge）实现连接，它是一种特殊的外设，主要实现总线协议间的转换。总线的性能指标常见的有总线带宽、总线服务质量QoS、总线时延和总线抖动等。\n计算机总线存在许多种类，常见的有并行总线和串行总线。并行总线主要包括PCI、PCIe和ATA（IDE）等。串行总线主要包括USB、SATA、CAN、RS-232、RS-485、RapidIO和以太网等。在一些专业领域中还定义了多种类型的总线，比如航空领域的ARINC429、ARINC659、ARINC664和MIL-STD-1553B等；工业控制领域的CAN、IEEE1394、PCI、PCIe和VME等。" },
    { "name": "内总线", "category": "计算机", "description": "内总线用于各类芯片内部互连，也可称为片上总线（On-Chip Bus）或片内总线。" },
    { "name": "系统总线", "category": "计算机", "description": "系统总线是指计算机中CPU、主存、I/O接口的总线，计算机发展为多总线结构后，系统总线的含义有所变化，狭义的系统总线仍为CPU与主存、通信桥连接的总线；广义上，还应包含计算机系统内，经由系统总线再次级联的总线，常被成为局部总线（Local Bus）。" },
    { "name": "外部总线", "category": "计算机", "description": "外部总线是计算机板和外部设备之间，或者计算机系统之间互联的总线，又称为通信总线。" },
    { "name": "总线桥", "category": "计算机", "description": "总线之间通过桥（Bridge）实现连接，它是一种特殊的外设，主要实现总线协议间的转换。" },
    { "name": "总线性能指标", "category": "计算机", "description": "总线的性能指标常见的有总线带宽、总线服务质量QoS、总线时延和总线抖动等。" },
    { "name": "总线带宽", "category": "计算机" },
    { "name": "总线服务质量QoS", "category": "计算机" },
    { "name": "总线时延", "category": "计算机" },
    { "name": "总线抖动", "category": "计算机" },
    { "name": "并行总线", "category": "计算机" },
    { "name": "PCI", "category": "计算机" },
    { "name": "PCIe", "category": "计算机" },
    { "name": "ATA", "category": "计算机", "description": "ATA（IDE）" },
    { "name": "串行总线", "category": "计算机" },
    { "name": "USB", "category": "计算机" },
    { "name": "SATA", "category": "计算机" },
    { "name": "CAN", "category": "计算机" },
    { "name": "RS-232", "category": "计算机" },
    { "name": "RS-485", "category": "计算机" },
    { "name": "RapidIO", "category": "计算机" },
    { "name": "以太网" },
    { "name": "接口", "category": "计算机", "description": "接口是指同一计算机不同功能层之间的通信规则。计算机接口有多种，常见的包括显示类接口（HDMI、DVI等），音频输入输出类接口（TRS、RCA、XLR等），网络类接口（RJ45、FC等），PS/2接口，USB接口，SATA接口，LPT打印接口和RS-232接口等。此外，像离散量接口与A/D转换接口等这类接口一般属于非标准接口，而是随需求而设计。" },
    { "name": "显示类接口", "category": "计算机" },
    { "name": "HDMI", "category": "计算机" },
    { "name": "DVI", "category": "计算机" },
    { "name": "音频输入输出类接口", "category": "计算机" },
    { "name": "TRS", "category": "计算机" },
    { "name": "RCA", "category": "计算机" },
    { "name": "XLR", "category": "计算机" },
    { "name": "网络类接口", "category": "计算机" },
    { "name": "RJ45", "category": "计算机" },
    { "name": "FC", "category": "计算机" },
    { "name": "PS/2接口", "category": "计算机" },
    { "name": "USB接口", "category": "计算机" },
    { "name": "SATA接口", "category": "计算机" },
    { "name": "LPT打印接口", "category": "计算机" },
    { "name": "RS-232接口", "category": "计算机" },
    { "name": "外部设备", "category": "计算机", "description": "外部设备也称为外围设备，是计算机的非必要设备（但各类计算机必然会有一些）。现代计算机的外部设备种类日益丰富，包括所有的输入输出设备以及部分存储设备（即外存）。常见的外部设备包括键盘、鼠标、显示器、扫描仪、摄像头、麦克风、打印机、光驱、各型网卡和各型存储卡/盘等。在移动和穿戴设备中，常见的包括加速计、GPS、陀螺仪、感光设备和指纹识别设备等。在工业控制、航空航天和医疗等领域，还存在更多种类的外部设备，例如测温仪、测速仪、轨迹球、各型操作面板、红外/NIFC等感应设备、各种场强测量设备、功率驱动装置、各型机械臂、各型液压装置、油门杆和驾驶杆，等等。" },
    { "name": "鼠标" },
    { "name": "键盘" },
    { "name": "显示器" },
    { "name": "扫描仪" },
    { "name": "摄像头" },
    { "name": "麦克风" },
    { "name": "打印机" },
    { "name": "光驱" },
    { "name": "计算机软件", "category": "计算机", "description": "计算机软件是指在计算机系统中的程序及其文档，是计算任务的处理对象和处理规则的描述。任何以计算机为处理工具的任务都是计算任务，处理对象是数据（如数字、文字、图形、图像和声音等，他们只是表示，而无含义）或信息（数据及有关的含义）。处理规则一般指处理的动作和步骤，文档是为了便于了解程序所需的阐述性资料。" },
    { "name": "计算机程序", "category": "计算机", "description": "计算机程序（Computer Program）" },
    { "name": "系统软件", "category": "计算机", "description": "系统软件是为整个计算机系统配置的不依赖特定应用领域的通用软件。这些软件对计算机系统和硬件和软件资源进行控制和管理，并为用户使用和其他应用软件的运行提供服务。也就是说，只有在系统软件的作用下，计算机硬件才能协调工作，应用软件才能运行。根据系统软件功能的不同，可将其划分为：操作系统、程序设计语言翻译系统、数据库系统和网络软件等。" },
    { "name": "应用软件", "category": "计算机", "description": "应用软件是指为某类应用需要或解决某个特定问题而设计的软件，如图像处理软件、财务软件、游戏软件和各种软件包等。在企事业单位或机构中，应用软件发挥着巨大的作用，承担了许多计算任务，如人事管理、财务管理和图书管理等。按照应用软件使用面的不同，可进一步把应用软件分为专用的应用软件和通用的应用软件两类。" },
    { "name": "操作系统", "category": "计算机", "description": "操作系统是计算机系统的资源管理者，它包含对系统软、硬件资源实施管理的一组程序，其首要作用就是通过CPU管理、存储管理、设备管理和文件管理对各种资源进行合理地分配，改善资源的共享和利用程度，最大限度地发挥计算机系统的工作效率，提高计算机系统在单位时间内处理工作的能力。操作系统是配置在计算机硬件上的第1层软件，它向下管理裸机及其中的文件，向上为其他的系统软件（汇编程序、编译程序、数据库管理系统等）和大量应用软件提供支持，以及为用户提供方便使用系统的接口。" },
    { "name": "操作系统组成", "category": "计算机", "description": "操作系统是一种大型、复杂的软件产品，它们通常由操作系统内核（Kernel）和其他许多附加的配套软件所组成，包括图形用户界面程序、常用的应用程序（如日历、计算器、资源管理器和网络浏览器等）、实用程序（任务管理器、磁盘清理程序序、杀毒软件和防火墙等）以及为支持应用软件开发和运行的各种软件构件（如应用框架、编译器和程序库等）。" },
    { "name": "操作系统内核", "category": "计算机", "description": "操作系统内核（Kernel）指的是能提供进程管理（任务管理）、存储管理、文件管理和设备管理等功能的那些软件模块，它们是操作系统中最基本的部分，用于为众多应用程序访问计算机硬件提供服务。由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口（称为系统调用接口或应用程序接口API）。内核通常都驻留在内存中，它以CPU的最高优先级运行，能执行指令系统中的特权指令，具有直接访问各种外设和全部主存空间的特权，负责对系统资源进行管理和分配。" },
    { "name": "系统调用接口", "category": "计算机" },
    { "name": "图形用户界面程序", "category": "计算机" },
    { "name": "操作系统作用", "category": "计算机", "description": "操作系统主要有以下3个方面的重要作用。\n1. 管理计算机中运行的程序和分配各种软硬件资源。计算机中一般总有多个程序在运行，这些程序在运行时都可能要求使用系统中的资源（如访问硬盘，在屏幕上显示信息等），此时操作系统就承担着资源的调度和分配任务，以避免冲突，保证程序正常有序地运行。操作系统的资源管理功能主要包括处理器管理、存储管理、文件管理、I/O设备管理等几个方面。\n2. 为用户提供友善的人机界面。人机界面的任务是实现用户与计算机之间的通信（对话)。几乎所有操作系统都向用户提供图形用户界面（GUI），它通过多个窗口分别显示正在运行的各个程序的状态，采用图标（Icon）来形象地表示系统中的文文件、程序和设备等对象，用户借助单击“菜单”的方法来选择要求系统执行的命令或输入某个参数，利用鼠标器或触摸屏控制屏幕光标的移动，并通过单击操作以启动某个操作命令的行，甚至还可以采用拖放方式执行所需要的操作。这些措施使用户能够比较直观、灵活、有效地使用计算机。\n3. 为应用程序的开发和运行提供一个高效率的平台。安装了操作系统之后，实际上呈现在应用程序和用户面前的是一台“虚拟计算机”。操作系统屏蔽了几乎所有物理设备的技术细节，它以规范、高效的方式（例如系统调用、库函数等）向应用程序提供了有力的支持，从而为开发和运行其他系统软件及各种应用软件提供了一个平台。\n除了上述3个方面的作用之外，操作系统还具有辅导用户操作（帮助功能）、处理软硬件错误、监控系统性能、保护系统安全等许多作用。总之，有了操作系统，计算机才能成为一个高效、可靠、通用的数据处理系统。" },
    { "name": "操作系统特征", "category": "计算机", "description": "1. 并发性：在多道程序环境下，并发性是指在一段时间内，宏观上有多个程序同时进行，但实际上在单CPU的运行环境，每一个时刻只有一个程序在执行。因此，从微观上来说，各个程序是交替、轮流执行的，如果计算机系统中有多个CPU，则可将多个程序分配到不同CPU上实现并行运行。\n2. 共享性：共享是指操作系统中的资源（包括硬件资源和信息资源）可以皮多个并发执行的进程（线程）共同使用，而不是被一个进程所独占。出于经济上的考虑，一次性向每个用户程序分别提供它所需的全部资源不但是浪费的，有时也是不可能的。现实的方法是让操作系统和多个用户程序共用一套计算机系统的所有资源，因此必然会产生共享资源原的需要。共享资源的方式可以分为同时共享和互斥共享。\n3. 虚拟性：虚拟性是指操作系统中的一种管理技术，它是把物理上的一个实体变成逻辑上的多个对应物，或把物理上的多个实体变成逻辑上的一个对应物的技术。前者是实际存在的，而后者是虚构假想的，是用户感觉上的东西。采用虚拟技术的目的是为用户提供易于使用且方便高效的操作环境。\n4. 不确定性：在多道程序环境中，允许多个进程并发执行，但由于资源有限，在多数情况下进程的执行不是一贯到底的，而是“走走停停”。例如一个进程，在CPU上运行一段时间后，由于等待资源或某事件发生，它被暂停执行，将CPU转让给另一个进程执行。系统中的进程何时执行，何时暂停，以什么样的速度向前推进，进程总共要花多少时间执行才能完成，这些都是不可预知的。或者说该进程是以不确定的方式运行的，其导致的直接后果是程序执行结果可能不唯一。" },
    { "name": "操作系统分类", "category": "计算机", "description": "通常，操作系统可分为批处理操作系统、分时操作系统、实时操作系统、网络操作系统分布式操作系统、微型计算机操作系统和嵌入式操作系统等类型。" },
    { "name": "批处理操作系统", "category": "计算机", "description": "批处理操作系统分为单道批处理和多道批处理。\n单道批处理操作系统是一种早期的操作系统，用户可以向系统提交多个作业，“单道”的含义是指一次只有一个作业装入内存执行。作业由用户程序、数据和作业说明书（作业控制语言）3个部分组成。当一个作业运行结束后，随即自动调入同批的下一个作业，从而节省了作业之间的人工干预时间，提高了资源的利用率。\n多道批处理操作系统允许多个作业装入内存执行，在任意一个时刻，作业都处于开始点和终止点之间。每当运行中的一个作业由于输入/输出操作需要调用外部设备时，就把CPU交给另一个等待运行的作业，从而将主机与外部设备的工作由串行改变为并行，进一步避免了因主机等待外设完成任务而浪费宝贵的CPU时间。多道批处理系统主要有3个特点：多道、宏观上并行运行和微观上串行运行。" },
    { "name": "分时操作系统", "category": "计算机", "description": "在分时操作系统中，一个计算机系统与多个终端设备连接。分时操作系统是将CPU的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。例如，一个带20个终端的分时系统，若每个用户每次分配一个50ms的时间片，则每隔1s即可为所有的用户服务一遍。因此，尽管各个终端上的作业是断续运行的，但由于操作系统每次对用用户程序都能做出及时响应，因此用户感觉整个系统均归其一人占用。\n分时系统主要有4个特点：多路性、独立性、交互性和及时性。" },
    { "name": "实时操作系统", "category": "计算机", "description": "实时是指计算机对于外来信息能够以足够快的速度进行处理，并在被控对象允许的时间范围内做出快速反应。实时系统对交互能力要求不高，但要求可靠性有保障。\n实时系统分为实时控制系统和实时信息处理系统。实时控制系统主要用于生产过程的自动控制，例如数据自动采集、武器控制、火炮自动控制、飞机自动力驾驶和导弹的制导系统等。实时信息处理系统主要用于实时信息处理，例如飞机订票系统、情报检索系统等。" },
    { "name": "网络操作系统", "category": "计算机", "description": "网络操作系统是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。因此，网络操作系统的功能主要包括高效、可靠的网络通信；对网络中共享资源（在LAN中有硬盘、打印机等）的有效管理；提供电子那件、文件传输、共享硬盘和打印机等服务；网络安全管理；提供互操作能力。\n一个典型的网络操作系统的特征包括硬件独立性和多用户支持等。其中，硬件独立性是指网络操作系统可以运行在不同的网络硬件上，可以通过网桥或路由器与其他网络连接；多用户支持，应能同时支持多个用户对网络的访问，应对信息资源提供完全的安全和保护功能；支持网络实用程序及其管理功能，如系统备份、安全管理、容错和性能控制；多种客户端支持；提供目录服务，以单一逻辑的方式让用户访问位于世界范围内的所有网络服务和资源的技术；支持多种增值服务，如文件服务、打印服务、通信服务和数据库服务等。" },
    { "name": "分布式操作系统", "category": "计算机", "description": "分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主、次之分，任意两台计算机可以通过通信交换信息。通常，为分布式计算机系统配置的操作系统称为分布式操作系统。\n分布式操作系统能直接对系统中的各类资源进行动态分配和调度、任务划分、信息传输协调工作，并为用户提供一个统一的界面与标准的接口，用户通过这一界面实现所需要的操作和使用系统资源，使系统中若干台计算机相互协作完成共同的任务，有效地控制和协调诸任务的并行执行。\n分布式操作系统是网络操作系统的更高级形式，它保持网络系统所拥有的全部功能，同时又有透明性、可靠性和高性能等特性。" },
    { "name": "微型计算机操作系统", "category": "计算机", "description": "微型计算机操作系统简称微机操作系统，常用的有Windows、Mac OS、Linux。" },
    { "name": "嵌入式操作系统", "category": "计算机", "description": "嵌入式操作系统运行在嵌入式智能设备环境中，对整个智能硬件以及它所操作、控制的各种部件装置等资源进行统一协调、处理、指挥和控制，其主要特点如下。\n1. 微型化：从性能和成本角度考虑，希望占用的资源和系统代码量少，如内存少、字长短、运行速度有限、能源少（用微小型电池）。\n2. 可定制：从减少成本和缩短研发周期考虑，要求嵌入式操作系统能运行在不同的微处理器平台上，能针对硬件变化进行结构与功能上的配置，以满足不同应用需要。\n3. 实时性：嵌入式操作系统主要应用于过程控制、数据采集、传输通信、多媒体信息及关键要害领域需要迅速响应的场合，所以对实时性要求较高。\n4. 可靠性：系统构件、模块和体系结构必须达到应有的可靠性，对关键要害应用还要提供容错和防故障措施。\n5. 易移植性：为了提高系统的易移植性，通常采用硬件抽象层（Hardware Abstraction Level，HAL）和板级支撑包（Board SupportPackage，BSP）的底层设计技术。\n常见的嵌入式实时操作系统有VxWorks、μClinux、PalmOS、WindowsCE、μC/OS-II和eCos等。" },
    { "name": "数据库", "category": "数据库", "description": "数据库（DataBase，DB）是指长期存储在计算机内、有组织的、统一管理的相关数据的集合。它不仅描述事物的数据本身，而且还包括相关事物之间的联系。数据库可以直观地理解为存放数据的仓库，只不过这个仓库是在计算机的存储设备上，而且数据是按一定格式存放的，具有较小的冗余度、较高的数据独立性和易扩展性，可为多个用户共享。" },
    { "name": "数据库分类", "category": "数据库", "description": "早期数据库种类有3种，分别是层次式数据库、网络式数据库和关系型数据库。目前最常见的数据库种类是关系型数据库和非关系型数据库。根据数据库存储体系分类，还可分为关系型数据库、键值(Kev-Value)数据库、列存储数据库、文档数据库和搜索引擎数据库等类型。" },
    { "name": "关系数据库", "category": "数据库", "description": "这种类型的数据库是最传统的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的二元关系，在数据库中，对数据的操作几乎全部建立在一个或多个关系表格上。在大型系统中通常有多个表，且表之间有各种关系。实际使用就是通过对这些关联的表格进行分类、合并、连接或选取等运算来实现数据库的管理。" },
    { "name": "数据模型", "category": "数据库", "description": "数据模型是数据特征的抽象，它是对数据库组织方式的一种模型化表示，是数据库系统的核心与基础。它具有数据结构、数据操作和完整性约束条件三要素。" },
    { "name": "关系模型", "category": "数据库", "description": "关系可以理解为二维表。一个关系模型就是指用若干关系表示实体及其联系，用二维表的形式存储数据。例如，对某高校学生的选课（不同年级甚至同一年级学生所选课程可以不同）进行管理，可以用二维表表示。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relational-model-example.jpg\" />\n用关系表示如下，其中带下画线的属性为主码，主码能唯一确定某个实体，如学号能唯一确定某个学生。\n学生（学号，姓名，年龄，系别）\n课程（课程号，课程名，学分）\n选课（学号，课程号，分数）" },
    { "name": "关系数据库设计", "category": "数据库", "description": "数据库设计是指对于一个给定的应用环境构造最优的数据库，建立数据库及其应用系统，使之能有效地存储数据，满足各种用户的需求。数据库设计包括结构特性和行为特性的设计两方面的内容。" },
    { "name": "关系数据库设计特点", "category": "数据库", "description": "数据库设计的很多阶段都可以和软件工程的各阶段对应起来，数据车设计的特点有：从数据结构即数据模型开始，并以数据模型为核心展开，这是数据库设计的一个主要特点；静态结构设计与动态行为设计分离；试探性；反复性和多步性。" },
    { "name": "关系数据库设计方法", "category": "数据库", "description": "目前已有的数据库设计方法可分为4类，即直观设计法、规范设计法、计算机辅助设计法和自动化设计法。常用的有基于3NF的设计方法、基于实体联系(E-R)模型的数据库设计方法、基于视图概念的数据库设计方法、面向对象的关系数据库设计方法、计算机辅助数据库设计方法、敏捷数据库设计方法等。" },
    { "name": "关系数据库设计基本步骤", "category": "数据库", "description": "数据库设计分为需求分析、概念结构设计、逻辑结构设计、物理结构设计、应用程序设计和运行维护6个阶段。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relational-databse-design-steps.jpg\" />" },
    { "name": "数据库需求分析", "category": "数据库", "description": "需求分析阶段的任务是对现实世界要处理的对象（组织、部门和企业等）进行详细调查，在了解现行系统的概况和确定新系统功能的过程中，收集支持系统目标的基础数据及其处理方法。需求分析是在用户调查的基础上，通过分析逐步明确用户对系统的需求，包括数据需求和围绕这些数据的业务处理需求。" },
    { "name": "数据库概念结构设计", "category": "数据库", "description": "数据库概念结构设计是在需求分析的基础上，依照需求分析中的信息需求，对用户信息加以分类、聚集和概括，建立信息模型，并依照选定的数据库管理系统软件，把它们转换为数据的逻辑结构，再依照软硬件环境，最终实现数据的合理存储。这一过程也称为数据建模。" },
    { "name": "E-R方法", "category": "数据库", "description": "设计数据库概念模型的最著名、最常用的方法是E-R方法。采用E-R方法的数据库概念结构设计可分为三步：设计局部E-R模型、设计全局E-R模型以及全局E-R模型的优化。" },
    { "name": "数据库逻辑结构设计", "category": "数据库", "description": "逻辑结构设计是在概念结构设计基础上进行的数据模型设计，可以是层次、网状模型和关系模型。逻辑结构设计阶段的主要任务是确定数据模型，将E-R图转换为指定的数据模型，确定完整性约束，确定用户视图。" },
    { "name": "数据库物理结构设计", "category": "数据库", "description": "数据库在物理设备上的存储结构与存取方法称为数据库的物理结构。数据库的物理结构设计是对已确定的数据库逻辑结构，利用DBMS所提供的方法、技术，以较优的存储结构和数据存取路径、合理的数据存放位置以及存储分配，设计出一个高效的、可实现的数据库物理结构。" },
    { "name": "数据库应用程序设计", "category": "数据库", "description": "数据库应用系统开发是DBMS的二次开发，一方面是对用户信息的存储；另一方面就是对用户处理要求的实现。\n数据库应用程序设计要做的工作有选择设计方法、制订开发计划、选择系统架构和设计安全性策略。在应用程序设计阶段，设计方法有结构化设计方法和面向对象设计方法两种。安全性策略主要是指硬件平台、操作系统、数据库系统、网络及应用系统的安全。" },
    { "name": "数据库运行维护", "category": "数据库", "description": "数据库的正常运行和优化也是数据库设计的内容之一。在数据库运行维护阶段要做的工作主要有数据库的转储和恢复，数据库的安全性和完整性控制，数据库性能的监督、分析和改造，数据库的重组和重构等。" },
    { "name": "键值数据库", "category": "数据库", "description": "键值数据库是一种非关系型数据库，它使用简单的键值方法来存储数据。键值数据库将数据存储为键值对集合，其中键作为唯一标识符。" },
    { "name": "列存储数据库", "category": "数据库", "description": "列式存储（Column-Based）是相对于传统关系型数据库的行式存储（Row-Basedstorage）来说的。简单来说两者的区别就是对表中数据的存储形式的差异。" },
    { "name": "文档数据库", "category": "数据库", "description": "此类数据库可存放并获取文档，可以是XML、JSON、BSON等格式，这些文档具备可述性（Self-Describing），呈现分层的树状结构（Hierarchical Tree Data Structure），可以包含映射表、集合和纯量值。数据库中的文档彼此相似，但不必完全相同。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。文档数据库可视为其值可查的键值数据库。" },
    { "name": "搜索引擎数据库", "category": "数据库", "description": "搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。" },
    { "name": "分布式数据库", "category": "数据库", "description": "分布式数据库系统（Distributed DataBase System，DDBS）是针对地理上分散，而管理上又需要不同程度集中管理的需求而提出的一种数据管理信息系统。满足分布性、逻辑相关性、场地透明性和场地自治性的数据库系统被称为完全分布式数据库系统。\n分布式数据库系统的特点是数据的集中控制性、数据独立性、数据冗余可控性、场地自治性和存取的有效性。" },
    { "name": "分布式数据库体系结构", "category": "数据库", "description": "我国在多年研究与开发分布式数据库及制定《分布式数据库系统标准》中，提出了把分布式数据库抽象为4层的结构模式。这种结构模式到了国内外一定程度的支持和认同。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/distributed-database-system-architecture.jpg\" />\n4层模式划分为全局外层、全局概念层、局部概念层和局部内层，在各层间还有相应的层间映射。这种4层模式适用于同构型分布式数据库系统，也适用于异构型分布式数据库系统。" },
    { "name": "分布式数据库应用", "category": "数据库", "description": "分布式数据库的应用领域有分布式计算、Intemet应用、数据仓库、数据复制以及全球联网查询等，Sybase公司的Replication Server即是一种典型的分布式数据库系统。" },
    { "name": "数据库管理系统", "category": "数据库" },
    { "name": "Oracle关系数据库", "category": "产品", "description": "Oracle是一种适用于大型、中型和微型计算机的关系数据库管理系统。Oracle的结构包括数据库的内部结构、外存储结构、内存储结构和进程结构。在Oracle中，数据库不仅指物理上的数据，还包括处理这些数据的程序，即DBMS本身。Oracle使用PL/SQL（Procedural Language/SQL）语言执行各种操作。Oracle除了以关系格式存储数据外，Oracle8以上的版本还支持面向对象的结构（如抽象数据类型）。\nOracle产品主要包括数据库服务器、开发工具和连接产品三类。Oracle还提供了一系列的工具产品，如逻辑备份工具Export、Import等。" },
    { "name": "Oracle", "category": "组织" },
    { "name": "DB2", "category": "产品", "description": "DB2是IBM的一种分布式数据库解决方案。简单地说，DB2就是IBM开发的一种大型关系型数据库平台，它支持多用户或应用程序在同一条SQL语句中查询不同Database甚至不同DBMS中的数据。\nDB2核心数据库的特色有支持面向对象编程，支持多媒体应用用程序，支持备份和恢复功能，支持存储过程和触发器，支持SQL查询，支持异构分布式数据库访问，支持数据复制。\nDB2采用多进程多线索体系结构，可运行于多种操作系统之上。IBM还提供了Visualizer、Visualage、Visualgen等开发工具。" },
    { "name": "IBM", "category": "组织" },
    { "name": "Sybase数据库", "category": "产品", "description": "Sybase是美国SYBASE公司在20世纪80年代中期推出的客户机/服务器（Client/Server，C/S）结构的关系数据库系统，也是世界上第一个真正的基于客户机/服务器结构的RDBMS产品。\nSybase数据库主要由三部分组成：进行数据库管理和维护的联机关系数据库管理系统Sybase SQLServer，支持数据库应用系统建立与开发的一组前端工具Sybase SQLToolset，可把异构环境下其他厂商的应用软件和任何类型的数据连接在一起的接口Sybase OpenClient/OpenServer。\nSybase提供了Sybase Adaptive Server Enterprise高性能企业智能型关系数据库管理系统、EAServer电子商务解决方案应用服务器、系统分析设计工具PowerDesigner和应用开发工具PowerBuilder。" },
    { "name": "Sybase", "category": "组织" },
    { "name": "SQL Server", "category": "产品", "description": "Microsoft SQL Server是一种典型的关系型数据库管理系统，可运行于多个操作系统上，它使用Transact-SQL语言完成数据操作。\nSQL Server的基本服务器组件包括Open Data Services、MS SQL Server、SQL Server Agent和MSDTC（Microsoft Distributed Transaction Coordinator）。\nSQL Server数据平台包括以下工具：关系型数据库、复制服务、通知服务、集成服务、分析服务、报表服务、管理工具和开发工具。" },
    { "name": "Microsoft", "category": "组织" },
    { "name": "大型数据库管理系统特点", "category": "数据库", "description": "大型数据库管理系统主要有如下7个特点。\n1. 基于网络环境的数据库管理系统。可以用于C/S结构的数据库应用系统，也可以用于B/S结构的数据库应用系统。\n2. 支持大规模的应用。可支持数千个并发用户、多达上百万的事务处理和超过数百GB的数据容量。\n3. 提供的自动锁功能使得并发用户可以安全而高效地访问数据。\n4. 可以保证系统的高度安全性。\n5. 提供方便而灵活的数据备份和恢复方法及设备镜像功能，还可以利用操作系统提供容错功能，确保设计良好的应用中的数据在发生意外的情况下可以最大限度地被恢复。\n6. 提供多种维护数据完整性的手段。\n7. 提供了方便易用的分布式处理功能。" },
    { "name": "文件", "category": "计算机", "description": "文件（File）是具有符号名的、在逻辑上具有完整意义的一组相关信息项的集合，例如，一个源程序、一个目标程序、编译程序、一批待加工的数据和各种文档等都可以各自组成一个文件。文件是一种抽象机制，它隐藏了硬件和实现细节，提供了将信息保存在外存上而且便于以后读取的手段，使用户不必了解信息存储的方法、位置以及存储记设备实际操作方式便可存取信息。一个文件包括文件体和文件说明。文件体是文件真实的内容；文件说明是操作系统为了管理文件所用到的信息，包括文件名、文件内部标识、文件类型、文文件存储地址、文件长度、访问权限、建立时间和访问时间等。" },
    { "name": "文件系统", "category": "计算机", "description": "文件系统是操作系统中实现文件统一管理的一组软件和相关数据的集合，是专门负责管理和存取文件信息的软件机构。文件系统的功能包括按名存取，即用户可以“按名存取”，而不是“按地址存取”；统一的用户接口，在不同设备上提供同样的接口，方便用户操作和编程；并发访问和控制，在多道程序系统中支持对文件的并发访问和控制；安全性控制，在多用户系统中的不同用户对同一文件可有不同的访问权限；优化性能，采用相关技术提高系统对文件的存储效率、检索和读/写性能；差错恢复，能够验证文件的正确性，并具有一定的差错恢复能力。" },
    { "name": "文件类型", "category": "计算机", "description": "1. 按文件的性质和用途分类可将文件分为系统文件、库文件和用户文件。\n2. 按信息保存期限分类可将文件分为临时文件、档案文件和永久文件。\n3. 按文件的保护方式分类可将文件分为只读文件、读/写文件、可执行文件和不保护文件。\n4. UNIX系统将文件分为普通文件、目录文件和设备文件（特待殊文件）。\n目前常用的文件系统类型有FAT、VFAT、NTFS、Ext2和HPFS等。\n文件分类的目的是对不同文件进行管理，提高系统效率，提高用户界面友好性。当然，根据文件的存取方法和物理结构的不同，还可以将文件分为不同的类型。" },
    { "name": "文件结构", "category": "计算机", "description": "文件的结构是指文件的组织形式。从用户角度看到的文件组织形式称为文件的逻辑结构，文件系统的用户只要知道所需文件的文件名就可以存取文件中的的信息，而无须知道这些文件究竟存放在什么地方。从实现的角度看，文件在文件存储器上的存放方式称为文件的物理结构。" },
    { "name": "文件逻辑结构", "category": "计算机", "description": "文件的逻辑结构可分为两大类：一是有结构的记录式文件，它是由一个以上的记录构成的文件；二是无结构的流式文件，它是由一串顺序字符流构成的文件。" },
    { "name": "记录式文件", "category": "计算机", "description": "在记录式文件中，所有的记录通常都是描述一个实体集的，有着相同或不同数目的数据项，记录的长度可分为定长（指文件中所有记录的长度相同）和不定长（指文件中各记录的长度不相同）两类。" },
    { "name": "流式文件", "category": "计算机", "description": "无结构的流式文件的文件体为字节流，不划分记录。无结构的流式文件通常采用顺序访问方式，并且每次读/写访问可以指定任意数据长度，其长度以字节为单位。对于流式文件的访问，是利用读/写指针指出下一个要访问的字符。可以把流式文牛看作是记录式文件的一个特例。" },
    { "name": "文件物理结构", "category": "计算机", "description": "文件的物理结构是指文件的内部组织形式，即文件在物理存储设备上的存放方法。由于文件的物理结构决定了文件在存储设备上的存放位置，所以文件的逻辑块号到物理块号的转换也是由文件的物理结构决定的。根据用户和系统管理上的需要，可采用多种方法来组织文件。" },
    { "name": "连续结构", "category": "计算机", "description": "连续结构也称顺序结构，它将逻辑上连续的文件信息（如记录）依次存放在连续编号的物理块上。只要知道文件的起始物理块号和文件的长度，就可以很方便地进行文件的的存取。" },
    { "name": "链接结构", "category": "计算机", "description": "链接结构也称串联结构，它是将逻辑上连续的文件信息（如记录）存放在不连续的物理块上，每个物理块有一个指针指向下一个物理块。因此，只要知道文件的第1个物理块号，就可以按链指针查找整个文件。" },
    { "name": "索引结构", "category": "计算机", "description": "在采用索引结构时，将逻辑上连续的文件信息（如记录）存放在不连续的物理块中，系统为每个文件建立一张索引表。索引表记录了文件信息所在的逻辑块号对应的物理块号，并将索引表的起始地址放在与文件对应的文件目录项中。" },
    { "name": "多个物理块的索引表", "category": "计算机", "description": "索引表是在文件创建时由系统自动建立的，并与文件一起存放在同一文件卷上。根据一个文件大小的不同，其索引表占用物理块的个数不等，一般占一个或几个物理块。多个物理块的索引表可以有两种组织方式：链接文件和多重索引方式。" },
    { "name": "文件存取方法", "category": "计算机", "description": "文件的存取方法是指读/写文件存储器上的一个物理块的方法。通常有顺序存取和随机存取两种方法。" },
    { "name": "顺序存取方法", "category": "计算机", "description": "顺序存取方法是指对文件中的信息按顺序依次进行读/写。" },
    { "name": "随机存取方法", "category": "计算机", "description": "随机存取方法是指对文件中的信息可以按任意的次序随机地读/写。" },
    { "name": "文件存储空间管理", "category": "计算机", "description": "要将文件保存到外部存储器（简称外存或辅存）上，首先必须知道存储空间的使用情况，即哪些物理块是被“占用”的，哪些是“空闲”的。特别是对大容量的磁盘存储空间被多用户共享时，用户执行程序经常要在磁盘上存储文件和删除文件，因此，文件系统必须对磁盘空间进行管理。外存空闲空间管理的数据结构通常称为磁盘分配表（Disk Allocation Table）。常用的空闲空间管理方法有空闲区表、位示图和空闲块链3种。" },
    { "name": "外存空闲空间管理", "category": "计算机" },
    { "name": "磁盘分配表", "category": "计算机", "description": "磁盘分配表（Disk Allocation Table）" },
    { "name": "空闲区表", "category": "计算机", "description": "将外存空间上的一个连续的未分配区域称为“空闲区”。操作系统为磁盘外存上的所有空闲区建立一张空闲表，每个表项对应一个空闲区区，空闲表中包含序号、空闲区的第1块号、空闲块的块数和状态等信息。它适用于连续文件结构。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/available-space-table.jpg\" />" },
    { "name": "位示图", "category": "计算机", "description": "这种方法是在外存上建立一张位示图（Bitmap）,记录文件存储器的使用情况。每一位对应文件存储器上的一个物理块，取值0和1分别表示空闲和占用。例如，某文件存储器上位示图的大小为n，物理块依次编号为0，1，2，…。假如计算机系统中字长为32位，那么在位示图中的第0个字（逻辑编号）对应文件存储器上的0，1，2，…，31号物理块；第1个字对应文件存储器上的32，33，34，…，63号物理块，依此类推。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/bitmap.jpg\" />\n这种方法的主要特点是位示图的大小由磁盘空间的大小（物理块总数）决定，位示图的描述能力强，适合各种物理结构。" },
    { "name": "空闲块链", "category": "计算机", "description": "每个空闲物理块中有指向下一个空闲物理块的指针，所有空闲物理块构成一个链表，链表的头指针放在文件存储器的特定位置上（如管理块中），不需要磁盘分配表，节省空间。每次申请空闲物理块只需根据链表的头指针取出第1个空闲物理块，根据第一个空闲物理块的指针可找到第2个空闲物理块，依此类推。" },
    { "name": "成组链接法", "category": "计算机", "description": "UNIX系统采用该方法。例如，在实现时系统将空闲块分成若干组，每100个空闲块为一组，每组的第1个空闲块登记了下一组空困块的物理盘块号和空闲块总数。假如某个组的第1个空闲块号等于0，意味着该组是最后一组，无下一组空闲块。" },
    { "name": "文件共享", "category": "计算机", "description": "文件共享是指不同用户进程使用同一文件，它不仅是不同用户完成同一任务所必须的功能，还可以节省大量的主存空间，减少由于文件复制而增加的访问外存次数。文件共享有多种形式，采用文件名和文件说明分离的目录结构有利于实现文件共享。常见的文件链接有硬链接和符号链接两种。" },
    { "name": "硬链接", "category": "计算机", "description": "文件的硬链接是指两个文件目录表目指向同一个索引结点的链接，该链接也称基于索引结点的链接。换句话说，硬链接是指不同文件名与同一个文件实体的链接。文件硬链接不利于文件主删除它拥有的文件，因为文件主要删除它拥有的共享文件，必须首先删除（关闭）所有的硬链接，否则就会造成共享该文件的用户的目录表目指针悬空。" },
    { "name": "符号链接", "category": "计算机", "description": "符号链接建立新的文件或目录，并与原来文件或目录的的路径名进行映射，当访问一个符号链接时，系统通过该映射找到原文件的路径，并对其进行访问。采用符号链接可以跨越文件系统，甚至可以通过计算机网络连接到世界上任何地方的机器中的文件，此时只须提供该文件所在的地址以及在该机器中的文件路径。" },
    { "name": "文件保护", "category": "计算机", "description": "文件系统对文件的保护常采用存取控制的方式进行。所谓存取控制，就是规定不同的用户对文件的访问有不同的权限，以防止文件被未经文件主同意的用户访问。" },
    { "name": "存取控制矩阵", "category": "计算机", "description": "理论上，存取控制的方法可用存取控制矩阵实现，它是一个二维矩阵，一维列出计算机的全部用户，另一维列出系统中的全部文件，矩阵中的每个元素A(i,j)表示第i个用户对第j个文件的存取权限。通常，存取权限有可读R、可写W、可执行X以及它们的组合。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/access-control-matrix.jpg\" />" },
    { "name": "存取控制表", "category": "计算机", "description": "存取控制矩阵由于太大往往无法实现。一个改进的办法是按用户对文件的访问权力的差别对用户进行分类，由于某一文件往往只与少数几个用户有关，所以这种分类方法可使存取控制表简化。UNIX系统就是使用了这种存取控制表方法，它把用户分成三类：文件主、同组用户和其他用户，每类用户的存取权限为可读、可写、可执行以及它们的组合。" },
    { "name": "用户权限表", "category": "计算机", "description": "改进存取控制矩阵的另一种方法是以用户或用户组为单位将用户可存取的文件集中起来存入表中，这称为用户权限表。表中的每个表目表示该用户对应文件的存取权限，这相当于存取控制矩阵一行的简化。" },
    { "name": "密码", "category": "计算机", "description": "在创建文件时，由用户提供一个密码，在文件存入磁盘时用该密码对文件的内容加密。在进行读取操作时，要对文件进行解密，只有知道密码的用户才能读取文件。" },
    { "name": "网络协议", "category": "网络", "description": "在计算机网络中要实现资源共享以及信息交换，必须实现不同系统中实体的通信。两个实体要想成功通信，它们必须具有相同的语言，在计算机网络中称为协议（或规程）。所谓协议，指的是网络中的计算机与计算机进行通信时，为了能够实现数据的正常发送与接收必须要遵循的一些事先约定好的规则（标准或约定），在这些规程中明确规定了通信时的数据格式、数据传送时序以及相应的控制信息和应答信号等内容。" },
    { "name": "局域网协议", "category": "网络", "description": "局域网协议（LAN）" },
    { "name": "广域网协议", "category": "网络", "description": "广域网协议（WAN）" },
    { "name": "无线网协议", "category": "网络" },
    { "name": "移动网协议", "category": "网络" },
    { "name": "中间件", "category": "计算机", "description": "由于应用软件是在系统软件基础上开发和运行的，而系统软件又有多种，如果每种应用软件都要提供能在不同系统上运行的版本，开发成本将大大增加。因而出现了一类称为“中间件”（Middleware）的软件，它们作为应用软件与各种操作系统之间使用的标准化编程接口和协议，可以起承上启下的作用，使应用软件的开发相对独立于计算机硬件和操作系统，并能在不同的系统上运行，实现相同的应用功能。中间件是基础软件的一大类,属于可复用软件的范畴。顾名思义，中间件处在操作系统、网络和数据库之上，应用软件的下层。也有人认为中间件应该属于操作系统中的一部分。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/middleware.jpg\" />" },
    
    { "name": "层次化存储结构", "category": "计算机", "description": "计算机中全部信息包括输入的原始数据、计算机程序、中间运行结果和最终运行结果都保存在存储器中。存储器包括：主存、辅存、通用寄存器、Cache四类。" },
    { "name": "Cache", "category": "计算机", "description": "Cache是为了解决高速运行的CPU与主存储器之间速度不匹配的问题。Cache中存放的是主存的部分拷贝（副本）。它是按照程序的局部性原理选取出来的最常使用或不久将来仍将使用的内容。" },
    { "name": "局部性原理", "category": "计算机", "description": "时间局部性：程序中的某条指令一旦执行，不久以后该指令可能再次执行。\n空间局部性：一旦程序访问了某个存储单元，不久以后，其附近的存储单元也被访问，即程序在一段时间内所访问的地址可能集中在一定的范围内。" },
    { "name": "Cache命中率", "category": "计算机", "description": "CPU在访问内存时，首先判断所要访问的内容是否在Cache中，如果在，就称为“命中”，此时CPU直接从Cache中调用该内容；否则，就称为“不命中”，CPU只好去内存中调用所需的子程序或指令了。CPU不但可以直接从Cache中读出内容，也可以直接往其中写入内容。由于Cache的存取速率相当快，使得CPU的利用率大大提高，进而使整个系统的性能得以提升。" },
    { "name": "Cache平均访问时间", "category": "计算机", "description": "如果以h为代表对Cache的访问命中率，t1为Cache的存取时间，t2为主存的访问时间，则Cache的平均访问时间ta为：\nta=h*t1+(1-h)*t2" },
    { "name": "计算机网络", "category": "网络" },
    { "name": "OSI参考模型", "category": "网络", "description": "OSI（Open System Interconnect，开放式系统互联）参考模型是ISO组织在1985年研究的网络互连模型。\n该体系结构标准定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层）。" },
    { "name": "传输层", "category": "网络" },
    { "name": "TCP协议", "category": "网络" },
    { "name": "UDP协议", "category": "网络" },
    { "name": "IP协议", "category": "网络" },
    { "name": "FTP协议", "category": "网络" },
    { "name": "SMTP协议", "category": "网络", "description": "发邮件，端口25" },
    { "name": "POP3协议", "category": "网络", "description": "收邮件，端口110" },
    { "name": "HTTP协议", "category": "网络" },
    { "name": "HTTP方法", "category": "网络" },
    { "name": "ROS", "category": "嵌入式", "description": "ROS（Robot Operating System，机器人操作系统）" },
    { "name": "ROS1", "category": "嵌入式" },
    { "name": "ROS2", "category": "嵌入式" },
    { "name": "Elasticsearch分词器", "category": "数据库", "description": "Elasticsearch 分词器" },
    { "name": "Standard分词器", "category": "数据库" },
    { "name": "Simple分词器", "category": "数据库" },
    { "name": "Whitespace分词器", "category": "数据库" },
    { "name": "Keyword分词器", "category": "数据库" },
    { "name": "RESTful" },
    { "name": "质量属性效用树" },
    { "name": "MTTR" },
    { "name": "可靠性" },
    { "name": "安全性" },
    { "name": "可移植性" },
    { "name": "可扩展性" },
    { "name": "可用性" },
    { "name": "可维护性" }
  ],
  "edges": [
    { "source": "IEEE 1741-2000", "predicate": "定义", "target": "系统架构", "description": "IEEE 1741-2000标准对架构定义如下：\n<b>架构</b>是体现在<b>组件</b>中的一个系统的基本组织、它们彼此的<b>关系</b>与<b>环境</b>的关系及指导它的设计和发展的<b>原则</b>。\n<b>系统</b>是组织起来完成某一特定功能或一组功能的组件集。系统这个术语包括了单独的应用程序、传统意义上的系统、子系统、系统之系统、产品线、整个企业及感兴趣的其他集合。系统用于完成其环境中的一个或多个任务。\n<b>环境</b>或者上下文决定了对这个系统的开发、运作、政策以及会对系统造成其他影响的环境和设置。\n<b>任务</b>是由一个或者多个利益相关者通过系统达到一些目标的系统的一个用途或操作。" },
    { "source": "IEEE 1741-2000", "predicate": "定义", "target": "系统架构设计师" },
    { "source": "系统架构设计师", "predicate": "创建", "target": "系统架构", "description": "系统架构设计师是担任系统架构设计的核心角色。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "模块化", "target": "系统架构", "description": "模块化的思想推动软件架构的快速发展。" },
    { "source": "模块化", "target": "服务导向架构", "description": "服务导向架构是基于模块化思想。" },
    { "source": "IEEE 1741-2000", "target": "组件化", "description": "组件化技术是IEEE 1741-2000标准提出阶段最重要的成果之一。" },
    { "source": "组件化", "predicate": "相比于", "target": "模块化", "description": "组件化开发并不等同于模块化开发。模块化开发只是在逻辑上做了切分，物理上（代码）通常没有真正意义上的隔离。组件化比模块化更独立。" },
    { "source": "组件化", "predicate": "相比于", "target": "应用集成", "description": "组件化不等同于应用集成。组件化比应用集成更紧密。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构描述与表示" },
    { "source": "架构描述与表示", "target": "架构描述语言" },
    { "source": "架构描述语言", "predicate": "包括", "target": "C2SADL" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Wright" },
    { "source": "架构描述语言", "predicate": "包括", "target": "ACME" },
    { "source": "架构描述语言", "predicate": "包括", "target": "UniCon" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Rapide" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Darwin" },
    { "source": "架构描述语言", "predicate": "包括", "target": "MetaH" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Aesop" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Weaves" },
    { "source": "架构描述语言", "predicate": "包括", "target": "SADL" },
    { "source": "架构描述语言", "predicate": "包括", "target": "xADL" },
    { "source": "系统架构", "predicate": "包括", "target": "架构分析" },
    { "source": "架构分析", "predicate": "包括", "target": "架构分析方法" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SAAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "ATAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "CBAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SBAR" },
    { "source": "架构分析方法", "predicate": "包括", "target": "ALPSM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SAEM" },
    { "source": "系统架构设计师", "predicate": "执行", "target": "架构设计", "description": "<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "架构设计", "predicate": "生成", "target": "系统架构", "description": "<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "架构设计", "predicate": "包括", "target": "架构设计方法" },
    { "source": "架构设计方法", "predicate": "包括", "target": "工作驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "用例驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "模式驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "域驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "属性驱动设计" },
    { "source": "系统架构", "predicate": "包括", "target": "架构测试" },
    { "source": "架构测试", "predicate": "包括", "target": "架构测试策略" },
    { "source": "架构测试策略", "predicate": "包括", "target": "单元测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "子系统测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "集成测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "验收测试" },
    { "source": "架构测试", "predicate": "包括", "target": "架构测试方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "架构测试覆盖方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "组件设计正确性验证方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "基于CHAM的架构动态语义验证方法" },
    { "source": "系统架构", "predicate": "包括", "target": "架构发现" },
    { "source": "架构发现", "predicate": "包括", "target": "迭代架构发现过程" },
    { "source": "系统架构", "predicate": "包括", "target": "架构演化" },
    { "source": "架构演化", "predicate": "包括", "target": "架构适应性" },
    { "source": "架构演化", "predicate": "包括", "target": "架构扩展" },
    { "source": "系统架构", "predicate": "包括", "target": "架构复用" },
    { "source": "架构复用", "target": "架构模式", "description": "架构模式是架构复用的一种成果。" },
    { "source": "系统架构", "predicate": "包括", "target": "开发模型" },
    { "source": "开发模型", "predicate": "包括", "target": "瀑布模型" },
    { "source": "开发模型", "predicate": "包括", "target": "渐进式开发模型" },
    { "source": "开发模型", "predicate": "包括", "target": "变换模型" },
    { "source": "系统架构", "predicate": "包括", "target": "架构风格" },
    { "source": "架构风格", "predicate": "包括", "target": "数据流风格" },
    { "source": "架构风格", "predicate": "包括", "target": "调用/返回风格" },
    { "source": "架构风格", "predicate": "包括", "target": "独立组件风格" },
    { "source": "架构风格", "predicate": "包括", "target": "虚拟机风格" },
    { "source": "架构风格", "predicate": "包括", "target": "仓库风格" },
    { "source": "Open Group", "predicate": "提出", "target": "ADML" },
    { "source": "XML", "target": "ADML", "description": "ADML是基于XML。" },
    { "source": "系统架构", "target": "软件生命周期", "description": "软件架构是软件生命周期中的重要产物，它影响软件开发的各个阶段。\n1. 需求阶段：把软件架构有的概念引入需求分析阶段，有助于保证需求规约和系统设计之间的可追踪性和一致性。\n2. 设计阶段：设计阶段是软件架构研究关注最早、最多的阶段，这一阶段的软件架构主要包括软件架构的描述、软件架构模型的设计与分析以及对软件架构设计经验的总结与复用等。\n3. 实现阶段：将设计阶段设计的算法及数据类型用程序设计语言进行表示，满足设计、架构和需求分析的要求，从而得到满足设计需求的目标系统。\n4. 维护阶段：为了保证软件具有良好的维护性，在软件架构中针对维护性目标进行分析时，需要对一些有关维护性的属性（如可扩展性、可替换性）进行规定，当架构经过一定的开发过程实现和形成软件系统时，这些属性也相应地反映了软件的维护性。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构模型" },
    { "source": "架构模型", "predicate": "包括", "target": "分层架构" },
    { "source": "架构模型", "predicate": "包括", "target": "事件驱动架构" },
    { "source": "架构模型", "predicate": "包括", "target": "微核架构" },
    { "source": "架构模型", "predicate": "包括", "target": "微服务架构" },
    { "source": "服务导向架构", "target": "微服务架构", "description": "微服务架构是服务导向架构（Service-Oriented Architecture，SOA）的升级" },
    { "source": "架构模型", "predicate": "包括", "target": "云架构" },
    { "source": "系统架构", "predicate": "包括", "target": "架构建模方法" },
    { "source": "架构建模方法", "predicate": "包括", "target": "结构模型" },
    { "source": "结构模型", "predicate": "核心是", "target": "架构描述语言" },
    { "source": "架构建模方法", "predicate": "包括", "target": "框架模型" },
    { "source": "架构建模方法", "predicate": "包括", "target": "动态模型" },
    { "source": "架构建模方法", "predicate": "包括", "target": "过程模型" },
    { "source": "Philippe Kruchten", "predicate": "提出", "target": "“4+1”架构视图模型" },
    { "source": "“4+1”架构视图模型", "target": "架构建模方法", "description": "四种模型并不是完全独立的，通过有机的结合才可形成一个完整的模型来刻画系统架构，也将能更加准确、全面地反映软件架构。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构应用场景" },
    { "source": "架构风格", "predicate": "包括", "target": "管道-过滤器风格" },
    { "source": "架构应用场景", "target": "管道-过滤器风格", "description": "用于将系统分成若干独立的步骤" },
    { "source": "架构风格", "predicate": "包括", "target": "主程序/子系统和面向对象的架构风格" },
    { "source": "架构应用场景", "target": "主程序/子系统和面向对象的架构风格", "description": "用于对组件内部进行设计" },
    { "source": "架构风格", "predicate": "包括", "target": "虚拟机风格" },
    { "source": "架构应用场景", "target": "虚拟机风格", "description": "用于构造解释器或专家系统" },
    { "source": "架构风格", "predicate": "包括", "target": "C/S和B/S风格" },
    { "source": "架构应用场景", "target": "C/S和B/S风格", "description": "适合于数据和处理分布在一定范围，通过网络连接构成系统" },
    { "source": "架构风格", "predicate": "包括", "target": "平台/插件风格" },
    { "source": "架构应用场景", "target": "平台/插件风格", "description": "用于具有插件扩展功能的应用程序" },
    { "source": "架构风格", "predicate": "包括", "target": "MVC风格" },
    { "source": "架构应用场景", "target": "MVC风格", "description": "用于用户交互程序的设计" },
    { "source": "架构风格", "predicate": "包括", "target": "SOA风格" },
    { "source": "架构应用场景", "target": "SOA风格", "Description": "用在企业集成等方面" },
    { "source": "架构风格", "predicate": "包括", "target": "C2风格" },
    { "source": "架构应用场景", "target": "C2风格", "description": "用于GUI软件开发，用以构件灵活和可扩展的应用系统等" },
    { "source": "系统架构设计师", "predicate": "相比于", "target": "项目经理", "description": "在组织中的职位方面，架构设计师是项目中的技术领导，应该拥有进行技术决策的权威。项目经理更关注管理资源、进度和成本方面的项目计划，架构设计师和项目经理代表了这个项目的公共角色。" },
    { "source": "计算机系统", "predicate": "包括", "target": "计算机硬件" },
    { "source": "计算机系统", "predicate": "包括", "target": "计算机软件" },
    { "source": "计算机硬件", "predicate": "相比于", "target": "计算机软件", "description": "从存在形式上看，计算机硬件是有形的，而软件是无形的；从计算机功能来看，硬件与软件的界限正在逐渐模糊。在不同的应用场合，基于设计考虑，某些功能可能由硬件实现，也可能由软件实现。比如，较典型的可编程逻辑，它在设计阶段可作为软件对待，但运行中则是以逻辑门的物理形态而存在。随着科技的发展，计算机系统的组成越来越复杂，多功能设备越来越多。" },
    { "source": "计算机硬件", "target": "计算机组成结构" },
    { "source": "冯·诺依曼结构计算机", "target": "计算机组成结构", "Description": "计算机组成结构是源于冯·诺依曼结构计算机。" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "处理器" },
    { "source": "处理器", "target": "指令集" },
    { "source": "指令集", "predicate": "包括", "target": "CISC" },
    { "source": "CISC", "predicate": "包括", "target": "x86CPU" },
    { "source": "Intel", "target": "x86CPU" },
    { "source": "AMD", "target": "x86CPU" },
    { "source": "指令集", "predicate": "包括", "target": "RISC" },
    { "source": "RISC", "predicate": "包括", "target": "ARM" },
    { "source": "RISC", "predicate": "包括", "target": "Power" },
    { "source": "CISC", "predicate": "相比于", "target": "RISC", "description": "随着研究的深入，除了由于历史原因而仍然存在的CISC结构外，RISC已经成为计算机指令集发展的趋势，几乎所有后期出现的指令集均为RISC架构。", "link": "/posts/system-architecture-designer/cisc-vs-risc" },
    { "source": "处理器", "predicate": "包括", "target": "图形处理器" },
    { "source": "图形处理器", "target": "深度学习" },
    { "source": "图形处理器", "target": "机器学习" },
    { "source": "处理器", "predicate": "包括", "target": "信号处理器" },
    { "source": "处理器", "predicate": "包括", "target": "现场可编程逻辑门阵列" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "存储器" },
    { "source": "处理器", "target": "存储器" },
    { "source": "存储器", "target": "存储器硬件结构" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "SRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "DRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "NVRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "Flash" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "EPROM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "Disk" },
    { "source": "存储器", "target": "存储器分层结构" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "片上缓存" },
    { "source": "SRAM", "target": "片上缓存" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "片外缓存" },
    { "source": "SRAM", "target": "片外缓存" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "主存" },
    { "source": "DRAM", "target": "主存" },
    { "source": "主存", "target": "处理器", "description": "通过总线与处理器连接。" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "外存" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "总线" },
    { "source": "总线", "predicate": "包括", "target": "内总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "predicate": "包括", "target": "系统总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "predicate": "包括", "target": "外部总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "target": "总线桥", "description": "总线之间通过桥（Bridge）实现连接。" },
    { "source": "总线", "target": "总线性能指标" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线带宽" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线服务质量QoS" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线时延" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线抖动" },
    { "source": "总线", "predicate": "包括", "target": "并行总线", "description": "计算机总线存在许多种类，常见的有并行总线和串行总线。" },
    { "source": "并行总线", "predicate": "包括", "target": "PCI" },
    { "source": "并行总线", "predicate": "包括", "target": "PCIe" },
    { "source": "并行总线", "predicate": "包括", "target": "ATA" },
    { "source": "总线", "predicate": "包括", "target": "串行总线", "description": "计算机总线存在许多种类，常见的有并行总线和串行总线。" },
    { "source": "并行总线", "predicate": "相对于", "target": "串行总线" },
    { "source": "串行总线", "predicate": "包括", "target": "USB" },
    { "source": "串行总线", "predicate": "包括", "target": "SATA" },
    { "source": "串行总线", "predicate": "包括", "target": "CAN" },
    { "source": "串行总线", "predicate": "包括", "target": "RS-232" },
    { "source": "串行总线", "predicate": "包括", "target": "RS-485" },
    { "source": "串行总线", "predicate": "包括", "target": "RapidIO" },
    { "source": "串行总线", "predicate": "包括", "target": "以太网" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "接口" },
    { "source": "接口", "predicate": "包括", "target": "显示类接口" },
    { "source": "显示类接口", "predicate": "包括", "target": "HDMI" },
    { "source": "显示类接口", "predicate": "包括", "target": "DVI" },
    { "source": "接口", "predicate": "包括", "target": "音频输入输出类接口" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "TRS" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "RCA" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "XLR" },
    { "source": "接口", "predicate": "包括", "target": "网络类接口" },
    { "source": "网络类接口", "predicate": "包括", "target": "RJ45" },
    { "source": "网络类接口", "predicate": "包括", "target": "FC" },
    { "source": "接口", "predicate": "包括", "target": "PS/2接口" },
    { "source": "接口", "predicate": "包括", "target": "USB接口" },
    { "source": "接口", "predicate": "包括", "target": "SATA接口" },
    { "source": "接口", "predicate": "包括", "target": "LPT打印接口" },
    { "source": "接口", "predicate": "包括", "target": "RS-232接口" },
    { "source": "总线", "target": "接口", "description": "一种总线可能存在多种接口" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "外部设备" },
    { "source": "外部设备", "predicate": "包括", "target": "外存" },
    { "source": "外部设备", "predicate": "包括", "target": "鼠标" },
    { "source": "外部设备", "predicate": "包括", "target": "键盘" },
    { "source": "外部设备", "predicate": "包括", "target": "显示器" },
    { "source": "外部设备", "predicate": "包括", "target": "扫描仪" },
    { "source": "外部设备", "predicate": "包括", "target": "摄像头" },
    { "source": "外部设备", "predicate": "包括", "target": "麦克风" },
    { "source": "外部设备", "predicate": "包括", "target": "打印机" },
    { "source": "外部设备", "predicate": "包括", "target": "光驱" },
    { "source": "计算机程序", "predicate": "相比于", "target": "计算机软件", "description": "早期的计算机软件和计算机程序的概念几乎不加区别，后来计算机软件的概念在计算机程序的基础上得到了延伸。计算机软件是指计算机系统中的程序及其文档，是计算任务的处理对象和处理规则的描述。" },
    { "source": "计算机软件", "predicate": "包括", "target": "系统软件", "description": "按照软件所起的作用和需要的运行环境的不同，通常将计算机软件分为系统软件和应用软件两大类。" },
    { "source": "计算机软件", "predicate": "包括", "target": "应用软件", "description": "按照软件所起的作用和需要的运行环境的不同，通常将计算机软件分为系统软件和应用软件两大类。" },
    { "source": "系统软件", "predicate": "包括", "target": "操作系统" },
    { "source": "操作系统", "target": "计算机硬件", "description": "操作系统是配置在计算机硬件上的第1层软件。" },
    { "source": "应用软件", "target": "操作系统", "description": "操作系统向上为引用软件提供支持。" },
    { "source": "操作系统", "target": "操作系统组成" },
    { "source": "操作系统组成", "predicate": "包括", "target": "操作系统内核" },
    { "source": "操作系统内核", "predicate": "包括", "target": "系统调用接口" },
    { "source": "应用软件", "target": "系统调用接口", "description": "由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口（称为系统调用接口或或应用程序接口API）。" },
    { "source": "系统调用接口", "target": "计算机硬件", "description": "系统调用接口是对硬件设备的抽象和调用。" },
    { "source": "操作系统内核", "target": "主存", "description": "内核通常都驻留在内存中。" },
    { "source": "操作系统组成", "predicate": "包括", "target": "图形用户界面程序" },
    { "source": "操作系统", "target": "操作系统作用" },
    { "source": "操作系统", "target": "操作系统特征" },
    { "source": "操作系统", "target": "操作系统分类" },
    { "source": "操作系统分类", "predicate": "包括", "target": "批处理操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "分时操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "实时操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "网络操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "分布式操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "微型计算机操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "嵌入式操作系统" },
    { "source": "数据库", "target": "数据库分类" },
    { "source": "数据库分类", "predicate": "包括", "target": "关系数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "键值数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "列存储数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "文档数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "搜索引擎数据库" },
    { "source": "数据模型", "target": "关系数据库", "description": "数据模型是对数据库组织方式的一种模型化表示，是数据库系统的核心与基础。" },
    { "source": "关系模型", "target": "数据模型" },
    { "source": "关系数据库", "target": "关系数据库设计" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计特点" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计方法" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计基本步骤" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库需求分析" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库概念结构设计" },
    { "source": "数据库需求分析", "target": "数据库概念结构设计" },
    { "source": "数据库概念结构设计", "target": "E-R方法" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库逻辑结构设计" },
    { "source": "数据库概念结构设计", "target": "数据库逻辑结构设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库物理结构设计" },
    { "source": "数据库逻辑结构设计", "target": "数据库物理结构设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库应用程序设计" },
    { "source": "数据库物理结构设计", "target": "数据库应用程序设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库运行维护" },
    { "source": "数据库应用程序设计", "target": "数据库运行维护" },
    { "source": "数据库分类", "predicate": "包括", "target": "分布式数据库" },
    { "source": "分布式数据库", "predicate": "包括", "target": "分布式数据库体系结构" },
    { "source": "分布式数据库", "predicate": "包括", "target": "分布式数据库应用" },
    { "source": "数据库", "target": "数据库管理系统" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "Oracle关系数据库" },
    { "source": "Oracle", "target": "Oracle关系数据库" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "DB2" },
    { "source": "IBM", "target": "DB2" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "Sybase数据库" },
    { "source": "Sybase", "target": "Sybase数据库" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "SQL Server" },
    { "source": "Microsoft", "target": "SQL Server" },
    { "source": "数据库管理系统", "target": "大型数据库管理系统特点" },
    { "source": "外存", "target": "文件" },
    { "source": "文件系统", "target": "文件" },
    { "source": "文件", "target": "文件类型" },
    { "source": "文件", "target": "文件结构" },
    { "source": "文件结构", "predicate": "包括", "target": "文件逻辑结构" },
    { "source": "文件逻辑结构", "predicate": "包括", "target": "记录式文件" },
    { "source": "文件逻辑结构", "predicate": "包括", "target": "流式文件" },
    { "source": "文件结构", "predicate": "包括", "target": "文件物理结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "连续结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "链接结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "索引结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "多个物理块的索引表" },
    { "source": "文件系统", "target": "文件存取方法" },
    { "source": "文件存取方法", "predicate": "包括", "target": "顺序存取方法" },
    { "source": "文件存取方法", "predicate": "包括", "target": "随机存取方法" },
    { "source": "文件系统", "target": "文件存储空间管理" },
    { "source": "文件存储空间管理", "target": "外存空闲空间管理" },
    { "source": "外存", "target": "外存空闲空间管理" },
    { "source": "外存空闲空间管理", "target": "磁盘分配表", "description": "外存空闲空间管理的数据结构通常称为磁盘分配表。" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "空闲区表" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "位示图" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "空闲块链" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "成组链接法" },
    { "source": "文件系统", "target": "文件共享" },
    { "source": "文件共享", "predicate": "包括", "target": "硬链接" },
    { "source": "文件共享", "predicate": "包括", "target": "符号链接" },
    { "source": "文件系统", "target": "文件保护" },
    { "source": "文件保护", "predicate": "包括", "target": "存取控制矩阵" },
    { "source": "文件保护", "predicate": "包括", "target": "存取控制表" },
    { "source": "文件保护", "predicate": "包括", "target": "用户权限表" },
    { "source": "文件保护", "predicate": "包括", "target": "密码" },
    { "source": "网络协议", "predicate": "包括", "target": "局域网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "广域网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "无线网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "移动网协议" },
    
    { "source": "层次化存储结构", "target": "存储器" },
    { "source": "Cache", "target": "层次化存储结构" },
    { "source": "Cache", "target": "SRAM" },
    { "source": "局部性原理", "target": "Cache" },
    { "source": "计算机网络", "target": "计算机系统", "description": "并输出结果信息的机器系统。人们在谈及计算机系统时，一般指由硬件子系统和软件子系统组成的系统，简称为计算机。而将连接多个计算机以实现计算机间数据交换能力的网络设备，则称之为计算机网络，简称网络。" },
    { "source": "传输层", "target": "OSI参考模型" },
    { "source": "TCP协议", "target": "传输层" },
    { "source": "UDP协议", "target": "传输层" },
    { "source": "SMTP协议", "target": "POP3协议" },
    { "source": "ROS1", "target": "ROS" },
    { "source": "ROS2", "target": "ROS" },
    { "source": "Standard分词器", "target": "Elasticsearch分词器" },
    { "source": "Simple分词器", "target": "Elasticsearch分词器" },
    { "source": "Whitespace分词器", "target": "Elasticsearch分词器" },
    { "source": "Keyword分词器", "target": "Elasticsearch分词器" },
    { "source": "RESTful", "target": "HTTP方法" },
    { "source": "HTTP方法", "target": "HTTP协议" }
  ]
}
