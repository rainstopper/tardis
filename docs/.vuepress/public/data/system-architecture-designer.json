{
  "nodes": [
    { "name": "系统架构", "category": "架构", "description": "系统架构（System Architecture）是系统的一种整体的高层次的结构表示，是系统的骨架和根基，支撑和链接各个部分，包括组件、连接件、约束规范以及指导这些内容设计与演化的原理，它是刻画系统整体抽象的一种手段。系统架构设计的目的是对需要开发的系统进行一系列相关的抽象，用于指导系统各个方面的设计与实现，架构设计在系统开发过程中起着关键性作用，架构设计的优劣决定了系统的健壮性和生命周期的长短。我们通常把架构设计作为系统开发过程中需求分析阶段后的一个关键步骤，也是系统设计前的不可或缺工作要点之一，架构设计的作用主要包括以下几点：\n一、解决相对复杂的需求分析问题；\n二、解决非功能属性在系统占据重要位置的设计问题；\n三、解决生命周期长、扩展性需求高的系统整体结构问题；\n四、解决系统基于组件需要的集成问题；\n五、解决业务流程再造难的问题。\n系统架构设计是成熟系统开发过程中的一个重要环节，它不仅是连接用户需求和系统进一步设计与实现的桥梁，也是系统早期阶段质量保证的关键步骤。\n软件架构（也可成为体系结构）是用来刻画软件系统整体抽象结构的一种手段，软件架构设计也是软件系统开发过程中的一个重要环节。随着研究的深入和应用的推广，软件架构逐渐成为软件工程学科的重要分支方向，在基础理论和技术方向等各工程实践领域形成了自己的独特理念和完整体系。" },
    { "name": "IEEE 1741-2000", "category": "标准", "description": "IEEE 1741-2000：“IEEE's Recommand Practice for Architecture Description of Software-Intensive Systems”（软件密集型系统架构描述的推荐实践）" },
    { "name": "系统架构设计师", "category": "架构", "description": "系统架构设计师（System Architecture Designer）是负责系统架构的人、团队或组织。架构设计师是系统或产品线的设计责任人，是一个负责理解和管理并最终确认和评估非功能性系统需求（如软件的可维护性、性能、复用性、可靠性、有效性和可测试性等），给出开发规范，搭建系统实现的核心构架，对整个软件架构、关键构件和接口进行总体设计并澄清关键技术细节的高级技术人员。", "link": "/posts/system-architecture-designer/architecture-designer" },
    { "name": "模块化", "category": "架构", "description": "模块化开发方法是指把一个待开发的软件分解成若干个小的而且简单的部分，采用对复杂事物分而治之的经典原则。模块化开发方法涉及的主要问题是模块设计的规则，即系统如何分解成模块。而每一模块都可独立开发与测试，最后再组装成一个完整软件。对一个规约进行分解，以得到模块系统结构的方法有数据结构设计方法、功能分解法、数据流设计和面向对象的设计等。将系统分解成模块时，应遵循以下原则：\n一、最高模块内聚。也就是在一个模块内部的元素最大限度地关联，只实现一种功能的模块是高内聚的，具有三种以上功能的模块是高内聚的。\n二、最低耦合。也就是不同模块之间的关系尽可能弱，以利于软件的升级和扩展。\n三、模块大小适度。颗粒过大会造成模块内部维护困难，而颗粒过小又会导致模块间的耦合增加。\n四、模块调用链的深度（嵌套层次）不可过多。\n五、接口简单、精炼（扇入扇出数不宜太大），具有信息隐蔽能力。\n六、尽可能地复用已有模块。" },
    { "name": "服务导向架构", "category": "架构", "description": "面向对象服务架构（Service-Oriented Architecture，SOA）基于模块化思想提出，提供一组基于标准的方法和技术，通过有效整合和重用现有的应用系统和各种资源实现服务组件化，并基于服务组件实现各种新业务应用的快速组装，帮助企业更好地应对业务的灵活性要求。这样，通过有效平衡业务的灵活性和IT的复杂度，为开发者提供了新的视角，有效拉近了IT和业务的距离。" },
    { "name": "管理信息系统", "description": "管理信息系统（Management Information System，MIS）。传统MIS系统软件架构：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/mis.jpg\" />" },
    { "name": "组件化", "category": "架构", "description": "IEEE 1741-2000标准发布阶段最重要的成果之一是软件组件化技术，通过沿用20世纪的工业组件概念，提升了软件重用能力和质量。\n通常，组件具有可组装性和可插拔性。每个组件的运行仅依赖于平台或者容器，组件与组件之间不存在直接的耦合关系。同时，组件与组件之间又并非绝对独立。组件经过组装后可以与其他组件进行业务上的交互。" },
    { "name": "应用集成", "description": "应用集成是将一些基于不同平台或不同方案的应用软件有机地集成到一个无缝的、并列的、易于访问的单一系统中，以建立一个统一的综合应用。" },
    { "name": "架构描述与表示", "category": "架构" },
    { "name": "架构描述语言", "category": "架构", "description": "架构描述语言（Architecture Description Language，ADL）" },
    { "name": "C2SADL", "category": "架构", "description": "基于组件和消息的软件架构描述语言" },
    { "name": "Wright", "category": "架构", "description": "分布、并发类型的架构描述语言" },
    { "name": "ACME", "category": "架构", "description": "架构互换语言" },
    { "name": "UniCon", "category": "架构", "description": "基于组件和连接的架构描述语言" },
    { "name": "Rapide", "category": "架构", "description": "基于事件的架构描述语言" },
    { "name": "Darwin", "category": "架构" },
    { "name": "MetaH", "category": "架构" },
    { "name": "Aesop", "category": "架构" },
    { "name": "Weaves", "category": "架构" },
    { "name": "SADL", "category": "架构" },
    { "name": "xADL", "category": "架构" },
    { "name": "架构分析", "category": "架构", "description": "架构分析的内容可为结构分析、功能分析和非功能分析。分析的目的是系统被实际构造之前预测其质量属性" },
    { "name": "架构分析方法", "category": "架构" },
    { "name": "SAAM", "category": "架构", "description": "软件架构分析方法" },
    { "name": "ATAM", "category": "架构", "description": "架构权衡分析法" },
    { "name": "CBAM", "category": "架构", "description": "成本效益分析法" },
    { "name": "SBAR", "category": "架构", "description": "基于场景的架构再工程" },
    { "name": "ALPSM", "category": "架构", "description": "架构层次的软件可维护性预测" },
    { "name": "SAEM", "category": "架构", "description": "软件架构评估模型" },
    { "name": "架构设计", "category": "架构", "description": "架构设计是指生成一个满足用户需求的软件架构过程。" },
    { "name": "架构设计方法", "category": "架构" },
    { "name": "工作驱动", "category": "架构", "description": "从工作描述中提取架构描述的工作驱动（artifact-driven）方法" },
    { "name": "用例驱动", "category": "架构", "description": "从用例导出架构抽象的用例驱动（use-case-driven）方法" },
    { "name": "模式驱动", "category": "架构", "description": "从模式导出架构抽象的模式驱动（pattern-driven）方法" },
    { "name": "域驱动", "category": "架构", "description": "从领域模型导出架构抽象的域驱动（domain-driven）方法" },
    { "name": "属性驱动设计", "category": "架构", "description": "从设计过程中获得架构质量属性需求的属性驱动设计（attribute-driven design）方法" },
    { "name": "架构测试", "category": "架构", "description": "架构测试着重于仿真系统模型、解决架构层的主要问题。" },
    { "name": "架构测试策略", "category": "架构" },
    { "name": "单元测试", "category": "架构" },
    { "name": "子系统测试", "category": "架构" },
    { "name": "集成测试", "category": "架构" },
    { "name": "验收测试", "category": "架构" },
    { "name": "架构测试方法", "category": "架构" },
    { "name": "架构测试覆盖方法", "category": "架构" },
    { "name": "组件设计正确性验证方法", "category": "架构" },
    { "name": "基于CHAM的架构动态语义验证方法", "category": "架构" },
    { "name": "架构发现", "category": "架构", "description": "软件架构发现解决如何从已经存在的系统中提取软件架构的问题，属于逆向工程。Waters等人提出了一种迭代式架构发现过程。" },
    { "name": "迭代架构发现过程", "category": "架构" },
    { "name": "架构演化", "category": "架构", "description": "软件架构演化即由于系统需求、技术、环境和分布等因素的变化而最终导致软件架构的变动。软件系统在运行时刻的架构变化成为架构动态性，而将架构的静态修改称为架构扩展。架构扩展和动态性都是架构适应性和演化的研究范畴。" },
    { "name": "架构适应性", "category": "架构", "description": "软件系统在运行时刻的架构变化成为架构动态性。" },
    { "name": "架构扩展", "category": "架构", "description": "架构的静态修改称为架构扩展。" },
    { "name": "架构复用", "category": "架构", "description": "软件架构复用属于设计重用，比代码重用更抽象。" },
    { "name": "架构模式", "category": "架构", "description": "架构模式是架构复用的一种成果。" },
    { "name": "开发模型", "category": "架构", "description": "软件开发模型是跨越整个软件生存周期的系统开发、运行和维护所实施的全部工作和任务的结构框架，给出了软件开发活动各个阶段之间的关系。" },
    { "name": "瀑布模型", "category": "架构", "description": "以软件需求完全确认为前提的瀑布模型。" },
    { "name": "渐进式开发模型", "category": "架构", "description": "在软件开发初期只能提供基本需求为前提的渐进式开发模型（如螺旋模型等）。" },
    { "name": "变换模型", "category": "架构", "description": "以形式化开发方法为基础的变换模型。" },
    { "name": "架构风格", "category": "架构", "description": "架构风格（架构模式）是针对给定场景中经常出现的问题提供的一般性可重用解决方案，它反映了领域中众多系统所共有的结构和语义特征，并指导如何将各个模块和子系统有效地组成一个完整的系统。通常，将软件架构风格分成主要五类（David Garland和Mary Shaw划分方式）：数据流风格、调用/返回风格、独立组件风格、虚拟机风格和仓库风格。" },
    { "name": "数据流风格", "category": "架构" },
    { "name": "调用/返回风格", "category": "架构" },
    { "name": "独立组件风格", "category": "架构" },
    { "name": "虚拟机风格", "category": "架构" },
    { "name": "仓库风格", "category": "架构" },
    { "name": "Open Group", "category": "组织" },
    { "name": "ADML", "description": "ADML是一种基于XML的架构描述语言。" },
    { "name": "XML" },
    { "name": "软件生命周期" },
    { "name": "架构模型", "category": "架构" },
    { "name": "分层架构", "category": "架构", "description": "分层架构（Layered Architecture）是最常见的软件架构，也是事实上的标准架构。这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口进行通信。分层架构通常明确约定软件一定要分成多少层，但是，最常见的是四层结构：\n一、表现层（Presentation Layer）：用户界面，负责视觉和用户互动；\n二、业务层（Business Layer）：实现业务逻辑；\n三、持久层（Persistence Layer）：提供数据，SQL语句就放在这一层；\n四、数据库（Database Layer）：保存数据。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/layered-architecture.jpg\" />\n有的项目在逻辑层和持久层之间加了一个<b>服务层</b>（Service Layer），提供不同业务逻辑需要的一些通用接口。用户的请求将依次通过这四层的处理，不能跳过其中任何一层。" },
    { "name": "事件驱动架构", "category": "架构", "description": "事件（Event）是状态发生变化时软件发出的通知。事件驱动架构（Event-driven Architecture）是通过事件进行通信的软件架构，它分成四个部分：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/event-driven-architecture.jpg\" />\n一、事件队列（Event Queue）：接收事件的入口；\n二、分发器（Event Mediator）：将不同的事件分发到不同的业务逻辑单元；\n三、事件通道（Event Channel）：分发器与处理器之间的联系渠道；\n四、事件处理器（Event Processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作。\n对于简单的项目，事件队列、分发器和事件通道可以合为一体，整个软件就分成事件代理和事件处理器两部分。\n这是一种流行的分布式异步架构模式，适用于松散耦合系统。" },
    { "name": "微核架构", "category": "架构", "description": "微核架构（Microkernel Architecture）又称为插件架构（Plug-in Architecture），是指软件的内核相对较小，主要功能和业务逻辑都通过插件实现。\n内核（Core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/microkernel-architecture.jpg\" />\n一、核心系统（内核）：负责和具体业务功能无关的通用功能（系统运行的最小功能），例如模块加载、模块间通信等；\n二、插件模块：负责实现具体的业务逻辑，插件是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。" },
    { "name": "微服务架构", "category": "架构", "description": "微服务架构（Microservices Architecture）是服务导向架构（Service-Oriented Architecture，SOA）的升级。每一个服务就是一个独立的部署单元（Separately Deployed Unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/microservices-architecture.jpg\" />\n微服务架构分成三种实现模式：\n一、RESTful API模式：服务通过API提供，云服务就属于这一类；\n二、RESTful应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部；\n三、集中消息模式：采用消息代理（Message Broker）可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群。" },
    { "name": "云架构", "category": "架构", "description": "云架构（Cloud Architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。\n它的高扩展性体现在将数据都复制到内存中，变成可复制的内存数据单元，然后将业务处理能力封装成一个个处理单元（Processing Unit）。若访问量增加，就新建处理单元；若访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，需要进行数据持久化。\n云架构主要分成两部分：处理单元（Processing Unit）和虚拟中间件（Virtualized Middleware）。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/cloud-architecture.jpg\" />\n一、处理单元：实现业务逻辑；\n二、虚拟中间件：负责通信、保持会话控制（sessions）、数据复制、分布式处理和处理单元的部署。\n虚拟中间件又包含四个组件：\n(1) 消息中间件（Messaging Grid）：管理用户请求和会话控制（sessions），当一个请求进来以后，它决定分配给哪一个处理单元。\n(2) 数据处理中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步，保证每个处理单元都得到同样的数据。\n(3) 处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元。\n(4) 部署中间件（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动负载单元，负载减少，就关闭处理单元。" },
    { "name": "架构建模方法", "category": "架构", "description": "系统架构的常用建模方法，根据建模的侧重点的不同，可以分成四种：结构模型、框架模型、动态模型和过程模型。\n这四种模型并不是完全独立的，通过有机的结合才可形成一个完整的模型来刻画系统架构，也将能更加准确、全面地反映软件架构。" },
    { "name": "结构模型", "category": "架构", "description": "结构模型是最直观、最普遍的建模方法。此方法以架构的构件、连接件和其他概念来刻画结构，并力图通过结构来反映系统的重要语义内容，包括系统的配置、约束、隐含的假设条件、风格和性质。研究结构模型的核心是架构描述语言。" },
    { "name": "框架模型", "category": "架构", "description": "框架模型与结构模型类似，但它不太侧重描述结构的细节，而更侧重整体的架构。架构模型主要以一些特殊的问题为目标建立只针对和适应问题的结构。" },
    { "name": "动态模型", "category": "架构", "description": "动态模型是对结构或框架模型的补充，主要研究系统的“大颗粒”行为的性质。例如，描述系统的重新配置或演化。这里的动态可以是指系统总体结构的配置、建立或拆除通信或计算的过程，这类系统模型常是激励型的。" },
    { "name": "过程模型", "category": "架构", "description": "过程模型是研究构造系统的步骤和过程，其结构是遵循某些过程脚本的结果。" },
    { "name": "Philippe Kruchten", "category": "人物" },
    { "name": "“4+1”架构视图模型", "category": "架构", "description": "Philippe Kruchten在1995年提出了一个“4+1”架构视图模型，从5个不同视图包括逻辑（Logical）视图、过程（Process）视图、物理（Physical）视图、开发（Development）视图和场景（Scenarios）视图来描述软件架构。每一个视图只关心系统的一个侧面，5个视图结合在一起才能够反映系统的软件架构的全部内容。" },
    { "name": "架构应用场景", "category": "架构", "description": "对于现代大型软件，很少使用单一的架构风格进行设计与开发，而是混合多种风格，从不同视角描述大型软件系统的能力，并可保证软件系统的可靠性、可扩展性、可维护性等非功能属性的正确描述。" },
    { "name": "管道-过滤器风格", "category": "架构", "description": "用于将系统分成若干独立的步骤" },
    { "name": "主程序/子系统和面向对象的架构风格", "category": "架构", "description": "用于对组件内部进行设计" },
    { "name": "虚拟机风格", "category": "架构", "description": "用于构造解释器或专家系统" },
    { "name": "C/S和B/S风格", "category": "架构", "description": "适合于数据和处理分布在一定范围，通过网络连接构成系统" },
    { "name": "平台/插件风格", "category": "架构", "description": "用于具有插件扩展功能的应用程序" },
    { "name": "MVC风格", "category": "架构", "description": "用于用户交互程序的设计" },
    { "name": "SOA风格", "category": "架构", "description": "用在企业集成等方面" },
    { "name": "C2风格", "category": "架构", "description": "用于GUI软件开发，用以构件灵活和可扩展的应用系统等" },
    { "name": "项目经理" },
    { "name": "计算机系统", "category": "计算机", "description": "计算机系统（Computer System）是指用于数据管理的计算机硬件、软件及网络组成的系统。它是按人的要求接收和存储信息，自动进行数据处理和计算，并输出结构信息的机器系统。\n计算机系统可划分为硬件（子系统）和软件（子系统）两部分。硬件由机械、电子元器件、磁介质和光介质等物理实体构成，例如处理器（含运算单元和控制单元）、存储器、输入设备和输出设备等。软件是一系列按照特定顺序组织的数据和指令，并控制硬件完成指定的功能。可将计算机软件进一步分为系统软件和应用软件，系统软件是指支持应用软件的运行，为用户开发应用软件提供平台支撑的软件，而应用软件是指计算机用户利用计算机的软、硬件资源为某一专门的应用目的而开发的软件。典型的计算机系统如下：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/composition-of-the-computer-system.jpg\" />" },
    { "name": "计算机硬件", "category": "计算机" },
    { "name": "计算机组成结构", "category": "计算机", "description": "计算机组成结构（Computer Architecture）" },
    { "name": "冯·诺依曼结构计算机", "category": "计算机", "description": "冯·诺依曼结构计算机（Von Neumann machine）" },
    { "name": "处理器", "category": "计算机", "description": "处理器（Central Processing Unit，CPU）\n典型的处理器系统结构如下：\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/typical-cpu-architecture.jpg\" />\n指令部件通过MMU-Cache的存储结构，从内存等不存储设备中取得相应的软件代码指令并完成译码和控制操作，控制存取部件从存储设备中取得新的数据，控制寄存器组为运算器准备有关寄存器数据，并准备好结果寄存器，控制整型、浮点、向量等运算部件开展运算。运算部件、寄存器单元、存取部件将执行结果通知完成部件，并在完成部件中完成结果的排队，由完成部件向指令部件反馈执行结果，控制指令的顺序执行、跳转等时序。" },
    { "name": "指令集", "category": "计算机", "description": "处理器的指令集按照复杂程度可分为复杂指令集与精简指令集" },
    { "name": "CISC", "category": "计算机", "description": "复杂指令集（Complex Instruction Set Computers，CISC）" },
    { "name": "x86CPU" },
    { "name": "Intel" },
    { "name": "AMD" },
    { "name": "RISC", "category": "计算机", "description": "精简指令集（Reduced Instruction Set Computers，RISC）" },
    { "name": "ARM" },
    { "name": "Power" },
    { "name": "图形处理器", "category": "计算机", "description": "图形处理器（Graphics Processing Unit，GPU）是一种特殊类型的处理器，具有数百或数千个内核，经过优化可并行运行大量计算，因此近些年在深度学习和机器学习领域得到了广泛应用。" },
    { "name": "深度学习" },
    { "name": "机器学习" },
    { "name": "信号处理器", "category": "计算机", "description": "信号处理器（Digital Signal Processor，DSP）专用于实时的数字信号处理，通过采用饱和算法处理溢出问题，通过乘积累加运算提高矩阵运算的效率，以及为傅里叶变换设计专用指令等方法，在各类高速信号采集的设备中得到广泛应用。" },
    { "name": "现场可编程逻辑门阵列", "category": "计算机", "description": "现场可编程逻辑门阵列（Field Programmable Gate Array，FPGA）" },
    { "name": "存储器", "category": "计算机", "description": "存储器是计算机系统中的记忆设备，用来存放程序和数据。存储器利用半导体、磁、光等介质制成用于存储数据的电子设备。" },
    { "name": "存储器硬件结构", "category": "计算机", "description": "根据存储器的硬件结构可以分为SRAM、DRAM、NVRAM、Flash、EPROM、Disk等。" },
    { "name": "SRAM", "category": "计算机", "description": "静态随机存取存储器（Static Random Access Memory）" },
    { "name": "DRAM", "category": "计算机", "description": "动态随机存取存储器（Dynamic Random Access Memory）" },
    { "name": "NVRAM", "category": "计算机", "description": "非易失性随机访问存储器（Non-Volatile Random Access Memory）" },
    { "name": "Flash", "category": "计算机", "description": "闪存" },
    { "name": "EPROM", "category": "计算机", "description": "可擦编程只读存储器（Erasable Programmable Read Only Memory）" },
    { "name": "Disk", "category": "计算机", "description": "磁盘" },
    { "name": "存储器分层结构", "category": "计算机", "description": "计算机系统中的存储器通常采用分层的体系结构（Merory Hierarchy），按照与处理器的物理距离可分为四个层次：片上缓存、片外缓存、主存（内存）和外存。" },
    { "name": "片上缓存", "category": "计算机", "description": "在处理器核心中直接集成的缓存，一般为SRAM结构，实现数据的快速读取。它容量小，一般为16KB~512KB，按照不同的设计可能划分为一级或二级。" },
    { "name": "片外缓存", "category": "计算机", "description": "在处理器核心外的缓存，需要经过交换互联开关访问，一般由SRAM构成，容量较片上缓存略大，可以为256KB~4MB。按照层级被称为L2Cache或L3Cache，或者称为平台Cache（PlatformCache）。" },
    { "name": "主存", "category": "计算机", "description": "也叫内存，通常采用DRAM结构，以独立的部件/芯片存在，通过总线与处理器连接。DRAM依赖不断充电维持其中的数据，容量在数百MB至数十GB之间。" },
    { "name": "外存", "category": "计算机", "description": "可以是磁带、磁盘、光盘和各类Flash等介质器件，这类设备访问速度慢，但容量大，且在掉电后能够保持其数据。不同的介质类型容量有所不同，如Nor Flash容量一般在MB级别，磁盘容量则在GB和TB级别。外存能够在掉电后保持数居，但并非所有介质都能够永久性保存数据，每种介质都有一定的年限，如Flash外存的维持数据的年限在10年左右，光盘年限在数年至数十年，磁盘年限在10年以上，磁带年限为30年以上。" },
    { "name": "总线", "category": "计算机", "description": "总线（Bus）是指计算机部件间遵循某一特定协议实现数据交换的形式，即以一种特定格式按照规定的控制逻辑实现部件间的数据传输。\n按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。其中内总线用于各类芯片内部互连，也可称为片上总线（On-Chip Bus）或片内总线。系统总线是指计算机中CPU、主存、I/O接口的总线，计算机发展为多总线结构后，系统总线的含义有所变化，狭义的系统总线仍为CPU与主存、通信桥连接的总线；广义上，还应包含计算机系统内，经由系统总线再次级联的总线，常被成为局部总线（Local Bus）。外部总线是计算机板和外部设备之间，或者计算机系统之间互联的总线，又称为通信总线。总线之间通过桥（Bridge）实现连接，它是一种特殊的外设，主要实现总线协议间的转换。总线的性能指标常见的有总线带宽、总线服务质量QoS、总线时延和总线抖动等。\n计算机总线存在许多种类，常见的有并行总线和串行总线。并行总线主要包括PCI、PCIe和ATA（IDE）等。串行总线主要包括USB、SATA、CAN、RS-232、RS-485、RapidIO和以太网等。在一些专业领域中还定义了多种类型的总线，比如航空领域的ARINC429、ARINC659、ARINC664和MIL-STD-1553B等；工业控制领域的CAN、IEEE1394、PCI、PCIe和VME等。" },
    { "name": "内总线", "category": "计算机", "description": "内总线用于各类芯片内部互连，也可称为片上总线（On-Chip Bus）或片内总线。" },
    { "name": "系统总线", "category": "计算机", "description": "系统总线是指计算机中CPU、主存、I/O接口的总线，计算机发展为多总线结构后，系统总线的含义有所变化，狭义的系统总线仍为CPU与主存、通信桥连接的总线；广义上，还应包含计算机系统内，经由系统总线再次级联的总线，常被成为局部总线（Local Bus）。" },
    { "name": "外部总线", "category": "计算机", "description": "外部总线是计算机板和外部设备之间，或者计算机系统之间互联的总线，又称为通信总线。" },
    { "name": "总线桥", "category": "计算机", "description": "总线之间通过桥（Bridge）实现连接，它是一种特殊的外设，主要实现总线协议间的转换。" },
    { "name": "总线性能指标", "category": "计算机", "description": "总线的性能指标常见的有总线带宽、总线服务质量QoS、总线时延和总线抖动等。" },
    { "name": "总线带宽", "category": "计算机" },
    { "name": "总线服务质量QoS", "category": "计算机" },
    { "name": "总线时延", "category": "计算机" },
    { "name": "总线抖动", "category": "计算机" },
    { "name": "并行总线", "category": "计算机" },
    { "name": "PCI", "category": "计算机" },
    { "name": "PCIe", "category": "计算机" },
    { "name": "ATA", "category": "计算机", "description": "ATA（IDE）" },
    { "name": "串行总线", "category": "计算机" },
    { "name": "USB", "category": "计算机" },
    { "name": "SATA", "category": "计算机" },
    { "name": "CAN", "category": "计算机" },
    { "name": "RS-232", "category": "计算机" },
    { "name": "RS-485", "category": "计算机" },
    { "name": "RapidIO", "category": "计算机" },
    { "name": "接口", "category": "计算机", "description": "接口是指同一计算机不同功能层之间的通信规则。计算机接口有多种，常见的包括显示类接口（HDMI、DVI等），音频输入输出类接口（TRS、RCA、XLR等），网络类接口（RJ45、FC等），PS/2接口，USB接口，SATA接口，LPT打印接口和RS-232接口等。此外，像离散量接口与A/D转换接口等这类接口一般属于非标准接口，而是随需求而设计。" },
    { "name": "显示类接口", "category": "计算机" },
    { "name": "HDMI", "category": "计算机" },
    { "name": "DVI", "category": "计算机" },
    { "name": "音频输入输出类接口", "category": "计算机" },
    { "name": "TRS", "category": "计算机" },
    { "name": "RCA", "category": "计算机" },
    { "name": "XLR", "category": "计算机" },
    { "name": "网络类接口", "category": "计算机" },
    { "name": "RJ45", "category": "计算机" },
    { "name": "FC", "category": "计算机" },
    { "name": "PS/2接口", "category": "计算机" },
    { "name": "USB接口", "category": "计算机" },
    { "name": "SATA接口", "category": "计算机" },
    { "name": "LPT打印接口", "category": "计算机" },
    { "name": "RS-232接口", "category": "计算机" },
    { "name": "外部设备", "category": "计算机", "description": "外部设备也称为外围设备，是计算机的非必要设备（但各类计算机必然会有一些）。现代计算机的外部设备种类日益丰富，包括所有的输入输出设备以及部分存储设备（即外存）。常见的外部设备包括键盘、鼠标、显示器、扫描仪、摄像头、麦克风、打印机、光驱、各型网卡和各型存储卡/盘等。在移动和穿戴设备中，常见的包括加速计、GPS、陀螺仪、感光设备和指纹识别设备等。在工业控制、航空航天和医疗等领域，还存在更多种类的外部设备，例如测温仪、测速仪、轨迹球、各型操作面板、红外/NIFC等感应设备、各种场强测量设备、功率驱动装置、各型机械臂、各型液压装置、油门杆和驾驶杆，等等。" },
    { "name": "鼠标" },
    { "name": "键盘" },
    { "name": "显示器" },
    { "name": "扫描仪" },
    { "name": "摄像头" },
    { "name": "麦克风" },
    { "name": "打印机" },
    { "name": "光驱" },
    { "name": "计算机软件", "category": "计算机", "description": "计算机软件是指在计算机系统中的程序及其文档，是计算任务的处理对象和处理规则的描述。任何以计算机为处理工具的任务都是计算任务，处理对象是数据（如数字、文字、图形、图像和声音等，他们只是表示，而无含义）或信息（数据及有关的含义）。处理规则一般指处理的动作和步骤，文档是为了便于了解程序所需的阐述性资料。" },
    { "name": "计算机程序", "category": "计算机", "description": "计算机程序（Computer Program）" },
    { "name": "系统软件", "category": "计算机", "description": "系统软件是为整个计算机系统配置的不依赖特定应用领域的通用软件。这些软件对计算机系统和硬件和软件资源进行控制和管理，并为用户使用和其他应用软件的运行提供服务。也就是说，只有在系统软件的作用下，计算机硬件才能协调工作，应用软件才能运行。根据系统软件功能的不同，可将其划分为：操作系统、程序设计语言翻译系统、数据库系统和网络软件等。" },
    { "name": "应用软件", "category": "计算机", "description": "应用软件是指为某类应用需要或解决某个特定问题而设计的软件，如图像处理软件、财务软件、游戏软件和各种软件包等。在企事业单位或机构中，应用软件发挥着巨大的作用，承担了许多计算任务，如人事管理、财务管理和图书管理等。按照应用软件使用面的不同，可进一步把应用软件分为专用的应用软件和通用的应用软件两类。" },
    { "name": "操作系统", "category": "计算机", "description": "操作系统是计算机系统的资源管理者，它包含对系统软、硬件资源实施管理的一组程序，其首要作用就是通过CPU管理、存储管理、设备管理和文件管理对各种资源进行合理地分配，改善资源的共享和利用程度，最大限度地发挥计算机系统的工作效率，提高计算机系统在单位时间内处理工作的能力。操作系统是配置在计算机硬件上的第1层软件，它向下管理裸机及其中的文件，向上为其他的系统软件（汇编程序、编译程序、数据库管理系统等）和大量应用软件提供支持，以及为用户提供方便使用系统的接口。" },
    { "name": "操作系统组成", "category": "计算机", "description": "操作系统是一种大型、复杂的软件产品，它们通常由操作系统内核（Kernel）和其他许多附加的配套软件所组成，包括图形用户界面程序、常用的应用程序（如日历、计算器、资源管理器和网络浏览器等）、实用程序（任务管理器、磁盘清理程序序、杀毒软件和防火墙等）以及为支持应用软件开发和运行的各种软件构件（如应用框架、编译器和程序库等）。" },
    { "name": "操作系统内核", "category": "计算机", "description": "操作系统内核（Kernel）指的是能提供进程管理（任务管理）、存储管理、文件管理和设备管理等功能的那些软件模块，它们是操作系统中最基本的部分，用于为众多应用程序访问计算机硬件提供服务。由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口（称为系统调用接口或应用程序接口API）。内核通常都驻留在内存中，它以CPU的最高优先级运行，能执行指令系统中的特权指令，具有直接访问各种外设和全部主存空间的特权，负责对系统资源进行管理和分配。" },
    { "name": "系统调用接口", "category": "计算机" },
    { "name": "图形用户界面程序", "category": "计算机" },
    { "name": "操作系统作用", "category": "计算机", "description": "操作系统主要有以下3个方面的重要作用。\n一、管理计算机中运行的程序和分配各种软硬件资源。计算机中一般总有多个程序在运行，这些程序在运行时都可能要求使用系统中的资源（如访问硬盘，在屏幕上显示信息等），此时操作系统就承担着资源的调度和分配任务，以避免冲突，保证程序正常有序地运行。操作系统的资源管理功能主要包括处理器管理、存储管理、文件管理、I/O设备管理等几个方面。\n二、为用户提供友善的人机界面。人机界面的任务是实现用户与计算机之间的通信（对话)。几乎所有操作系统都向用户提供图形用户界面（GUI），它通过多个窗口分别显示正在运行的各个程序的状态，采用图标（Icon）来形象地表示系统中的文文件、程序和设备等对象，用户借助单击“菜单”的方法来选择要求系统执行的命令或输入某个参数，利用鼠标器或触摸屏控制屏幕光标的移动，并通过单击操作以启动某个操作命令的行，甚至还可以采用拖放方式执行所需要的操作。这些措施使用户能够比较直观、灵活、有效地使用计算机。\n三、为应用程序的开发和运行提供一个高效率的平台。安装了操作系统之后，实际上呈现在应用程序和用户面前的是一台“虚拟计算机”。操作系统屏蔽了几乎所有物理设备的技术细节，它以规范、高效的方式（例如系统调用、库函数等）向应用程序提供了有力的支持，从而为开发和运行其他系统软件及各种应用软件提供了一个平台。\n除了上述3个方面的作用之外，操作系统还具有辅导用户操作（帮助功能）、处理软硬件错误、监控系统性能、保护系统安全等许多作用。总之，有了操作系统，计算机才能成为一个高效、可靠、通用的数据处理系统。" },
    { "name": "操作系统特征", "category": "计算机", "description": "一、并发性：在多道程序环境下，并发性是指在一段时间内，宏观上有多个程序同时进行，但实际上在单CPU的运行环境，每一个时刻只有一个程序在执行。因此，从微观上来说，各个程序是交替、轮流执行的，如果计算机系统中有多个CPU，则可将多个程序分配到不同CPU上实现并行运行。\n二、共享性：共享是指操作系统中的资源（包括硬件资源和信息资源）可以皮多个并发执行的进程（线程）共同使用，而不是被一个进程所独占。出于经济上的考虑，一次性向每个用户程序分别提供它所需的全部资源不但是浪费的，有时也是不可能的。现实的方法是让操作系统和多个用户程序共用一套计算机系统的所有资源，因此必然会产生共享资源原的需要。共享资源的方式可以分为同时共享和互斥共享。\n三、虚拟性：虚拟性是指操作系统中的一种管理技术，它是把物理上的一个实体变成逻辑上的多个对应物，或把物理上的多个实体变成逻辑上的一个对应物的技术。前者是实际存在的，而后者是虚构假想的，是用户感觉上的东西。采用虚拟技术的目的是为用户提供易于使用且方便高效的操作环境。\n四、不确定性：在多道程序环境中，允许多个进程并发执行，但由于资源有限，在多数情况下进程的执行不是一贯到底的，而是“走走停停”。例如一个进程，在CPU上运行一段时间后，由于等待资源或某事件发生，它被暂停执行，将CPU转让给另一个进程执行。系统中的进程何时执行，何时暂停，以什么样的速度向前推进，进程总共要花多少时间执行才能完成，这些都是不可预知的。或者说该进程是以不确定的方式运行的，其导致的直接后果是程序执行结果可能不唯一。" },
    { "name": "操作系统分类", "category": "计算机", "description": "通常，操作系统可分为批处理操作系统、分时操作系统、实时操作系统、网络操作系统分布式操作系统、微型计算机操作系统和嵌入式操作系统等类型。" },
    { "name": "批处理操作系统", "category": "计算机", "description": "批处理操作系统分为单道批处理和多道批处理。\n单道批处理操作系统是一种早期的操作系统，用户可以向系统提交多个作业，“单道”的含义是指一次只有一个作业装入内存执行。作业由用户程序、数据和作业说明书（作业控制语言）3个部分组成。当一个作业运行结束后，随即自动调入同批的下一个作业，从而节省了作业之间的人工干预时间，提高了资源的利用率。\n多道批处理操作系统允许多个作业装入内存执行，在任意一个时刻，作业都处于开始点和终止点之间。每当运行中的一个作业由于输入/输出操作需要调用外部设备时，就把CPU交给另一个等待运行的作业，从而将主机与外部设备的工作由串行改变为并行，进一步避免了因主机等待外设完成任务而浪费宝贵的CPU时间。多道批处理系统主要有3个特点：多道、宏观上并行运行和微观上串行运行。" },
    { "name": "分时操作系统", "category": "计算机", "description": "在分时操作系统中，一个计算机系统与多个终端设备连接。分时操作系统是将CPU的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。例如，一个带20个终端的分时系统，若每个用户每次分配一个50ms的时间片，则每隔1s即可为所有的用户服务一遍。因此，尽管各个终端上的作业是断续运行的，但由于操作系统每次对用用户程序都能做出及时响应，因此用户感觉整个系统均归其一人占用。\n分时系统主要有4个特点：多路性、独立性、交互性和及时性。" },
    { "name": "实时操作系统", "category": "计算机", "description": "实时是指计算机对于外来信息能够以足够快的速度进行处理，并在被控对象允许的时间范围内做出快速反应。实时系统对交互能力要求不高，但要求可靠性有保障。\n实时系统分为实时控制系统和实时信息处理系统。实时控制系统主要用于生产过程的自动控制，例如数据自动采集、武器控制、火炮自动控制、飞机自动力驾驶和导弹的制导系统等。实时信息处理系统主要用于实时信息处理，例如飞机订票系统、情报检索系统等。" },
    { "name": "网络操作系统", "category": "计算机", "description": "网络操作系统是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。因此，网络操作系统的功能主要包括高效、可靠的网络通信；对网络中共享资源（在LAN中有硬盘、打印机等）的有效管理；提供电子那件、文件传输、共享硬盘和打印机等服务；网络安全管理；提供互操作能力。\n一个典型的网络操作系统的特征包括硬件独立性和多用户支持等。其中，硬件独立性是指网络操作系统可以运行在不同的网络硬件上，可以通过网桥或路由器与其他网络连接；多用户支持，应能同时支持多个用户对网络的访问，应对信息资源提供完全的安全和保护功能；支持网络实用程序及其管理功能，如系统备份、安全管理、容错和性能控制；多种客户端支持；提供目录服务，以单一逻辑的方式让用户访问位于世界范围内的所有网络服务和资源的技术；支持多种增值服务，如文件服务、打印服务、通信服务和数据库服务等。" },
    { "name": "分布式操作系统", "category": "计算机", "description": "分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主、次之分，任意两台计算机可以通过通信交换信息。通常，为分布式计算机系统配置的操作系统称为分布式操作系统。\n分布式操作系统能直接对系统中的各类资源进行动态分配和调度、任务划分、信息传输协调工作，并为用户提供一个统一的界面与标准的接口，用户通过这一界面实现所需要的操作和使用系统资源，使系统中若干台计算机相互协作完成共同的任务，有效地控制和协调诸任务的并行执行。\n分布式操作系统是网络操作系统的更高级形式，它保持网络系统所拥有的全部功能，同时又有透明性、可靠性和高性能等特性。" },
    { "name": "微型计算机操作系统", "category": "计算机", "description": "微型计算机操作系统简称微机操作系统，常用的有Windows、Mac OS、Linux。" },
    { "name": "Windows", "category": "产品" },
    { "name": "MAC OS", "category": "产品" },
    { "name": "Linux", "category": "产品" },
    { "name": "嵌入式操作系统", "category": "计算机", "description": "嵌入式操作系统运行在嵌入式智能设备环境中，对整个智能硬件以及它所操作、控制的各种部件装置等资源进行统一协调、处理、指挥和控制，其主要特点如下。\n一、微型化：从性能和成本角度考虑，希望占用的资源和系统代码量少，如内存少、字长短、运行速度有限、能源少（用微小型电池）。\n二、可定制：从减少成本和缩短研发周期考虑，要求嵌入式操作系统能运行在不同的微处理器平台上，能针对硬件变化进行结构与功能上的配置，以满足不同应用需要。\n三、实时性：嵌入式操作系统主要应用于过程控制、数据采集、传输通信、多媒体信息及关键要害领域需要迅速响应的场合，所以对实时性要求较高。\n四、可靠性：系统构件、模块和体系结构必须达到应有的可靠性，对关键要害应用还要提供容错和防故障措施。\n五、易移植性：为了提高系统的易移植性，通常采用硬件抽象层（Hardware Abstraction Level，HAL）和板级支撑包（Board SupportPackage，BSP）的底层设计技术。\n常见的嵌入式实时操作系统有VxWorks、μClinux、PalmOS、WindowsCE、μC/OS-II和eCos等。" },
    { "name": "数据库", "category": "数据库", "description": "数据库（DataBase，DB）是指长期存储在计算机内、有组织的、统一管理的相关数据的集合。它不仅描述事物的数据本身，而且还包括相关事物之间的联系。数据库可以直观地理解为存放数据的仓库，只不过这个仓库是在计算机的存储设备上，而且数据是按一定格式存放的，具有较小的冗余度、较高的数据独立性和易扩展性，可为多个用户共享。" },
    { "name": "数据库分类", "category": "数据库", "description": "早期数据库种类有3种，分别是层次式数据库、网络式数据库和关系型数据库。目前最常见的数据库种类是关系型数据库和非关系型数据库。根据数据库存储体系分类，还可分为关系型数据库、键值(Kev-Value)数据库、列存储数据库、文档数据库和搜索引擎数据库等类型。" },
    { "name": "关系数据库", "category": "数据库", "description": "这种类型的数据库是最传统的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的二元关系，在数据库中，对数据的操作几乎全部建立在一个或多个关系表格上。在大型系统中通常有多个表，且表之间有各种关系。实际使用就是通过对这些关联的表格进行分类、合并、连接或选取等运算来实现数据库的管理。" },
    { "name": "数据模型", "category": "数据库", "description": "数据模型是数据特征的抽象，它是对数据库组织方式的一种模型化表示，是数据库系统的核心与基础。它具有数据结构、数据操作和完整性约束条件三要素。" },
    { "name": "关系模型", "category": "数据库", "description": "关系可以理解为二维表。一个关系模型就是指用若干关系表示实体及其联系，用二维表的形式存储数据。例如，对某高校学生的选课（不同年级甚至同一年级学生所选课程可以不同）进行管理，可以用二维表表示。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relational-model-example.jpg\" />\n用关系表示如下，其中带下画线的属性为主码，主码能唯一确定某个实体，如学号能唯一确定某个学生。\n学生（学号，姓名，年龄，系别）\n课程（课程号，课程名，学分）\n选课（学号，课程号，分数）" },
    { "name": "关系数据库设计", "category": "数据库", "description": "数据库设计是指对于一个给定的应用环境构造最优的数据库，建立数据库及其应用系统，使之能有效地存储数据，满足各种用户的需求。数据库设计包括结构特性和行为特性的设计两方面的内容。" },
    { "name": "关系数据库设计特点", "category": "数据库", "description": "数据库设计的很多阶段都可以和软件工程的各阶段对应起来，数据车设计的特点有：从数据结构即数据模型开始，并以数据模型为核心展开，这是数据库设计的一个主要特点；静态结构设计与动态行为设计分离；试探性；反复性和多步性。" },
    { "name": "关系数据库设计方法", "category": "数据库", "description": "目前已有的数据库设计方法可分为4类，即直观设计法、规范设计法、计算机辅助设计法和自动化设计法。常用的有基于3NF的设计方法、基于实体联系(E-R)模型的数据库设计方法、基于视图概念的数据库设计方法、面向对象的关系数据库设计方法、计算机辅助数据库设计方法、敏捷数据库设计方法等。" },
    { "name": "关系数据库设计基本步骤", "category": "数据库", "description": "数据库设计分为需求分析、概念结构设计、逻辑结构设计、物理结构设计、应用程序设计和运行维护6个阶段。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relational-databse-design-steps.jpg\" />" },
    { "name": "数据库需求分析", "category": "数据库", "description": "需求分析阶段的任务是对现实世界要处理的对象（组织、部门和企业等）进行详细调查，在了解现行系统的概况和确定新系统功能的过程中，收集支持系统目标的基础数据及其处理方法。需求分析是在用户调查的基础上，通过分析逐步明确用户对系统的需求，包括数据需求和围绕这些数据的业务处理需求。" },
    { "name": "数据库概念结构设计", "category": "数据库", "description": "数据库概念结构设计是在需求分析的基础上，依照需求分析中的信息需求，对用户信息加以分类、聚集和概括，建立信息模型，并依照选定的数据库管理系统软件，把它们转换为数据的逻辑结构，再依照软硬件环境，最终实现数据的合理存储。这一过程也称为数据建模。" },
    { "name": "E-R方法", "category": "数据库", "description": "设计数据库概念模型的最著名、最常用的方法是E-R方法。采用E-R方法的数据库概念结构设计可分为三步：设计局部E-R模型、设计全局E-R模型以及全局E-R模型的优化。" },
    { "name": "数据库逻辑结构设计", "category": "数据库", "description": "逻辑结构设计是在概念结构设计基础上进行的数据模型设计，可以是层次、网状模型和关系模型。逻辑结构设计阶段的主要任务是确定数据模型，将E-R图转换为指定的数据模型，确定完整性约束，确定用户视图。" },
    { "name": "数据库物理结构设计", "category": "数据库", "description": "数据库在物理设备上的存储结构与存取方法称为数据库的物理结构。数据库的物理结构设计是对已确定的数据库逻辑结构，利用DBMS所提供的方法、技术，以较优的存储结构和数据存取路径、合理的数据存放位置以及存储分配，设计出一个高效的、可实现的数据库物理结构。" },
    { "name": "数据库应用程序设计", "category": "数据库", "description": "数据库应用系统开发是DBMS的二次开发，一方面是对用户信息的存储；另一方面就是对用户处理要求的实现。\n数据库应用程序设计要做的工作有选择设计方法、制订开发计划、选择系统架构和设计安全性策略。在应用程序设计阶段，设计方法有结构化设计方法和面向对象设计方法两种。安全性策略主要是指硬件平台、操作系统、数据库系统、网络及应用系统的安全。" },
    { "name": "数据库运行维护", "category": "数据库", "description": "数据库的正常运行和优化也是数据库设计的内容之一。在数据库运行维护阶段要做的工作主要有数据库的转储和恢复，数据库的安全性和完整性控制，数据库性能的监督、分析和改造，数据库的重组和重构等。" },
    { "name": "键值数据库", "category": "数据库", "description": "键值数据库是一种非关系型数据库，它使用简单的键值方法来存储数据。键值数据库将数据存储为键值对集合，其中键作为唯一标识符。" },
    { "name": "列存储数据库", "category": "数据库", "description": "列式存储（Column-Based）是相对于传统关系型数据库的行式存储（Row-Basedstorage）来说的。简单来说两者的区别就是对表中数据的存储形式的差异。" },
    { "name": "文档数据库", "category": "数据库", "description": "此类数据库可存放并获取文档，可以是XML、JSON、BSON等格式，这些文档具备可述性（Self-Describing），呈现分层的树状结构（Hierarchical Tree Data Structure），可以包含映射表、集合和纯量值。数据库中的文档彼此相似，但不必完全相同。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。文档数据库可视为其值可查的键值数据库。" },
    { "name": "搜索引擎数据库", "category": "数据库", "description": "搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。" },
    { "name": "分布式数据库", "category": "数据库", "description": "分布式数据库系统（Distributed DataBase System，DDBS）是针对地理上分散，而管理上又需要不同程度集中管理的需求而提出的一种数据管理信息系统。满足分布性、逻辑相关性、场地透明性和场地自治性的数据库系统被称为完全分布式数据库系统。\n分布式数据库系统的特点是数据的集中控制性、数据独立性、数据冗余可控性、场地自治性和存取的有效性。" },
    { "name": "分布式数据库体系结构", "category": "数据库", "description": "我国在多年研究与开发分布式数据库及制定《分布式数据库系统标准》中，提出了把分布式数据库抽象为4层的结构模式。这种结构模式到了国内外一定程度的支持和认同。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/distributed-database-system-architecture.jpg\" />\n4层模式划分为全局外层、全局概念层、局部概念层和局部内层，在各层间还有相应的层间映射。这种4层模式适用于同构型分布式数据库系统，也适用于异构型分布式数据库系统。" },
    { "name": "分布式数据库应用", "category": "数据库", "description": "分布式数据库的应用领域有分布式计算、Intemet应用、数据仓库、数据复制以及全球联网查询等，Sybase公司的Replication Server即是一种典型的分布式数据库系统。" },
    { "name": "数据库管理系统", "category": "数据库" },
    { "name": "Oracle关系数据库", "category": "产品", "description": "Oracle是一种适用于大型、中型和微型计算机的关系数据库管理系统。Oracle的结构包括数据库的内部结构、外存储结构、内存储结构和进程结构。在Oracle中，数据库不仅指物理上的数据，还包括处理这些数据的程序，即DBMS本身。Oracle使用PL/SQL（Procedural Language/SQL）语言执行各种操作。Oracle除了以关系格式存储数据外，Oracle8以上的版本还支持面向对象的结构（如抽象数据类型）。\nOracle产品主要包括数据库服务器、开发工具和连接产品三类。Oracle还提供了一系列的工具产品，如逻辑备份工具Export、Import等。" },
    { "name": "Oracle", "category": "组织" },
    { "name": "DB2", "category": "产品", "description": "DB2是IBM的一种分布式数据库解决方案。简单地说，DB2就是IBM开发的一种大型关系型数据库平台，它支持多用户或应用程序在同一条SQL语句中查询不同Database甚至不同DBMS中的数据。\nDB2核心数据库的特色有支持面向对象编程，支持多媒体应用用程序，支持备份和恢复功能，支持存储过程和触发器，支持SQL查询，支持异构分布式数据库访问，支持数据复制。\nDB2采用多进程多线索体系结构，可运行于多种操作系统之上。IBM还提供了Visualizer、Visualage、Visualgen等开发工具。" },
    { "name": "IBM", "category": "组织" },
    { "name": "Sybase数据库", "category": "产品", "description": "Sybase是美国SYBASE公司在20世纪80年代中期推出的客户机/服务器（Client/Server，C/S）结构的关系数据库系统，也是世界上第一个真正的基于客户机/服务器结构的RDBMS产品。\nSybase数据库主要由三部分组成：进行数据库管理和维护的联机关系数据库管理系统Sybase SQLServer，支持数据库应用系统建立与开发的一组前端工具Sybase SQLToolset，可把异构环境下其他厂商的应用软件和任何类型的数据连接在一起的接口Sybase OpenClient/OpenServer。\nSybase提供了Sybase Adaptive Server Enterprise高性能企业智能型关系数据库管理系统、EAServer电子商务解决方案应用服务器、系统分析设计工具PowerDesigner和应用开发工具PowerBuilder。" },
    { "name": "Sybase", "category": "组织" },
    { "name": "SQL Server", "category": "产品", "description": "Microsoft SQL Server是一种典型的关系型数据库管理系统，可运行于多个操作系统上，它使用Transact-SQL语言完成数据操作。\nSQL Server的基本服务器组件包括Open Data Services、MS SQL Server、SQL Server Agent和MSDTC（Microsoft Distributed Transaction Coordinator）。\nSQL Server数据平台包括以下工具：关系型数据库、复制服务、通知服务、集成服务、分析服务、报表服务、管理工具和开发工具。" },
    { "name": "Microsoft", "category": "组织" },
    { "name": "大型数据库管理系统特点", "category": "数据库", "description": "大型数据库管理系统主要有如下7个特点。\n一、基于网络环境的数据库管理系统。可以用于C/S结构的数据库应用系统，也可以用于B/S结构的数据库应用系统。\n二、支持大规模的应用。可支持数千个并发用户、多达上百万的事务处理和超过数百GB的数据容量。\n三、提供的自动锁功能使得并发用户可以安全而高效地访问数据。\n四、可以保证系统的高度安全性。\n五、提供方便而灵活的数据备份和恢复方法及设备镜像功能，还可以利用操作系统提供容错功能，确保设计良好的应用中的数据在发生意外的情况下可以最大限度地被恢复。\n六、提供多种维护数据完整性的手段。\n七、提供了方便易用的分布式处理功能。" },
    { "name": "文件", "category": "计算机", "description": "文件（File）是具有符号名的、在逻辑上具有完整意义的一组相关信息项的集合，例如，一个源程序、一个目标程序、编译程序、一批待加工的数据和各种文档等都可以各自组成一个文件。文件是一种抽象机制，它隐藏了硬件和实现细节，提供了将信息保存在外存上而且便于以后读取的手段，使用户不必了解信息存储的方法、位置以及存储记设备实际操作方式便可存取信息。一个文件包括文件体和文件说明。文件体是文件真实的内容；文件说明是操作系统为了管理文件所用到的信息，包括文件名、文件内部标识、文件类型、文文件存储地址、文件长度、访问权限、建立时间和访问时间等。" },
    { "name": "文件系统", "category": "计算机", "description": "文件系统是操作系统中实现文件统一管理的一组软件和相关数据的集合，是专门负责管理和存取文件信息的软件机构。文件系统的功能包括按名存取，即用户可以“按名存取”，而不是“按地址存取”；统一的用户接口，在不同设备上提供同样的接口，方便用户操作和编程；并发访问和控制，在多道程序系统中支持对文件的并发访问和控制；安全性控制，在多用户系统中的不同用户对同一文件可有不同的访问权限；优化性能，采用相关技术提高系统对文件的存储效率、检索和读/写性能；差错恢复，能够验证文件的正确性，并具有一定的差错恢复能力。" },
    { "name": "文件类型", "category": "计算机", "description": "一、按文件的性质和用途分类可将文件分为系统文件、库文件和用户文件。\n二、按信息保存期限分类可将文件分为临时文件、档案文件和永久文件。\n三、按文件的保护方式分类可将文件分为只读文件、读/写文件、可执行文件和不保护文件。\n四、UNIX系统将文件分为普通文件、目录文件和设备文件（特待殊文件）。\n目前常用的文件系统类型有FAT、VFAT、NTFS、Ext2和HPFS等。\n文件分类的目的是对不同文件进行管理，提高系统效率，提高用户界面友好性。当然，根据文件的存取方法和物理结构的不同，还可以将文件分为不同的类型。" },
    { "name": "文件结构", "category": "计算机", "description": "文件的结构是指文件的组织形式。从用户角度看到的文件组织形式称为文件的逻辑结构，文件系统的用户只要知道所需文件的文件名就可以存取文件中的的信息，而无须知道这些文件究竟存放在什么地方。从实现的角度看，文件在文件存储器上的存放方式称为文件的物理结构。" },
    { "name": "文件逻辑结构", "category": "计算机", "description": "文件的逻辑结构可分为两大类：一是有结构的记录式文件，它是由一个以上的记录构成的文件；二是无结构的流式文件，它是由一串顺序字符流构成的文件。" },
    { "name": "记录式文件", "category": "计算机", "description": "在记录式文件中，所有的记录通常都是描述一个实体集的，有着相同或不同数目的数据项，记录的长度可分为定长（指文件中所有记录的长度相同）和不定长（指文件中各记录的长度不相同）两类。" },
    { "name": "流式文件", "category": "计算机", "description": "无结构的流式文件的文件体为字节流，不划分记录。无结构的流式文件通常采用顺序访问方式，并且每次读/写访问可以指定任意数据长度，其长度以字节为单位。对于流式文件的访问，是利用读/写指针指出下一个要访问的字符。可以把流式文牛看作是记录式文件的一个特例。" },
    { "name": "文件物理结构", "category": "计算机", "description": "文件的物理结构是指文件的内部组织形式，即文件在物理存储设备上的存放方法。由于文件的物理结构决定了文件在存储设备上的存放位置，所以文件的逻辑块号到物理块号的转换也是由文件的物理结构决定的。根据用户和系统管理上的需要，可采用多种方法来组织文件。" },
    { "name": "连续结构", "category": "计算机", "description": "连续结构也称顺序结构，它将逻辑上连续的文件信息（如记录）依次存放在连续编号的物理块上。只要知道文件的起始物理块号和文件的长度，就可以很方便地进行文件的的存取。" },
    { "name": "链接结构", "category": "计算机", "description": "链接结构也称串联结构，它是将逻辑上连续的文件信息（如记录）存放在不连续的物理块上，每个物理块有一个指针指向下一个物理块。因此，只要知道文件的第1个物理块号，就可以按链指针查找整个文件。" },
    { "name": "索引结构", "category": "计算机", "description": "在采用索引结构时，将逻辑上连续的文件信息（如记录）存放在不连续的物理块中，系统为每个文件建立一张索引表。索引表记录了文件信息所在的逻辑块号对应的物理块号，并将索引表的起始地址放在与文件对应的文件目录项中。" },
    { "name": "多个物理块的索引表", "category": "计算机", "description": "索引表是在文件创建时由系统自动建立的，并与文件一起存放在同一文件卷上。根据一个文件大小的不同，其索引表占用物理块的个数不等，一般占一个或几个物理块。多个物理块的索引表可以有两种组织方式：链接文件和多重索引方式。" },
    { "name": "文件存取方法", "category": "计算机", "description": "文件的存取方法是指读/写文件存储器上的一个物理块的方法。通常有顺序存取和随机存取两种方法。" },
    { "name": "顺序存取方法", "category": "计算机", "description": "顺序存取方法是指对文件中的信息按顺序依次进行读/写。" },
    { "name": "随机存取方法", "category": "计算机", "description": "随机存取方法是指对文件中的信息可以按任意的次序随机地读/写。" },
    { "name": "文件存储空间管理", "category": "计算机", "description": "要将文件保存到外部存储器（简称外存或辅存）上，首先必须知道存储空间的使用情况，即哪些物理块是被“占用”的，哪些是“空闲”的。特别是对大容量的磁盘存储空间被多用户共享时，用户执行程序经常要在磁盘上存储文件和删除文件，因此，文件系统必须对磁盘空间进行管理。外存空闲空间管理的数据结构通常称为磁盘分配表（Disk Allocation Table）。常用的空闲空间管理方法有空闲区表、位示图和空闲块链3种。" },
    { "name": "外存空闲空间管理", "category": "计算机" },
    { "name": "磁盘分配表", "category": "计算机", "description": "磁盘分配表（Disk Allocation Table）" },
    { "name": "空闲区表", "category": "计算机", "description": "将外存空间上的一个连续的未分配区域称为“空闲区”。操作系统为磁盘外存上的所有空闲区建立一张空闲表，每个表项对应一个空闲区区，空闲表中包含序号、空闲区的第1块号、空闲块的块数和状态等信息。它适用于连续文件结构。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/available-space-table.jpg\" />" },
    { "name": "位示图", "category": "计算机", "description": "这种方法是在外存上建立一张位示图（Bitmap）,记录文件存储器的使用情况。每一位对应文件存储器上的一个物理块，取值0和1分别表示空闲和占用。例如，某文件存储器上位示图的大小为n，物理块依次编号为0，1，2，…。假如计算机系统中字长为32位，那么在位示图中的第0个字（逻辑编号）对应文件存储器上的0，1，2，…，31号物理块；第1个字对应文件存储器上的32，33，34，…，63号物理块，依此类推。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/bitmap.jpg\" />\n这种方法的主要特点是位示图的大小由磁盘空间的大小（物理块总数）决定，位示图的描述能力强，适合各种物理结构。" },
    { "name": "空闲块链", "category": "计算机", "description": "每个空闲物理块中有指向下一个空闲物理块的指针，所有空闲物理块构成一个链表，链表的头指针放在文件存储器的特定位置上（如管理块中），不需要磁盘分配表，节省空间。每次申请空闲物理块只需根据链表的头指针取出第1个空闲物理块，根据第一个空闲物理块的指针可找到第2个空闲物理块，依此类推。" },
    { "name": "成组链接法", "category": "计算机", "description": "UNIX系统采用该方法。例如，在实现时系统将空闲块分成若干组，每100个空闲块为一组，每组的第1个空闲块登记了下一组空困块的物理盘块号和空闲块总数。假如某个组的第1个空闲块号等于0，意味着该组是最后一组，无下一组空闲块。" },
    { "name": "UNIX", "category": "产品" },
    { "name": "文件共享", "category": "计算机", "description": "文件共享是指不同用户进程使用同一文件，它不仅是不同用户完成同一任务所必须的功能，还可以节省大量的主存空间，减少由于文件复制而增加的访问外存次数。文件共享有多种形式，采用文件名和文件说明分离的目录结构有利于实现文件共享。常见的文件链接有硬链接和符号链接两种。" },
    { "name": "硬链接", "category": "计算机", "description": "文件的硬链接是指两个文件目录表目指向同一个索引结点的链接，该链接也称基于索引结点的链接。换句话说，硬链接是指不同文件名与同一个文件实体的链接。文件硬链接不利于文件主删除它拥有的文件，因为文件主要删除它拥有的共享文件，必须首先删除（关闭）所有的硬链接，否则就会造成共享该文件的用户的目录表目指针悬空。" },
    { "name": "符号链接", "category": "计算机", "description": "符号链接建立新的文件或目录，并与原来文件或目录的的路径名进行映射，当访问一个符号链接时，系统通过该映射找到原文件的路径，并对其进行访问。采用符号链接可以跨越文件系统，甚至可以通过计算机网络连接到世界上任何地方的机器中的文件，此时只须提供该文件所在的地址以及在该机器中的文件路径。" },
    { "name": "文件保护", "category": "计算机", "description": "文件系统对文件的保护常采用存取控制的方式进行。所谓存取控制，就是规定不同的用户对文件的访问有不同的权限，以防止文件被未经文件主同意的用户访问。" },
    { "name": "存取控制矩阵", "category": "计算机", "description": "理论上，存取控制的方法可用存取控制矩阵实现，它是一个二维矩阵，一维列出计算机的全部用户，另一维列出系统中的全部文件，矩阵中的每个元素A(i,j)表示第i个用户对第j个文件的存取权限。通常，存取权限有可读R、可写W、可执行X以及它们的组合。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/access-control-matrix.jpg\" />" },
    { "name": "存取控制表", "category": "计算机", "description": "存取控制矩阵由于太大往往无法实现。一个改进的办法是按用户对文件的访问权力的差别对用户进行分类，由于某一文件往往只与少数几个用户有关，所以这种分类方法可使存取控制表简化。UNIX系统就是使用了这种存取控制表方法，它把用户分成三类：文件主、同组用户和其他用户，每类用户的存取权限为可读、可写、可执行以及它们的组合。" },
    { "name": "用户权限表", "category": "计算机", "description": "改进存取控制矩阵的另一种方法是以用户或用户组为单位将用户可存取的文件集中起来存入表中，这称为用户权限表。表中的每个表目表示该用户对应文件的存取权限，这相当于存取控制矩阵一行的简化。" },
    { "name": "密码", "category": "计算机", "description": "在创建文件时，由用户提供一个密码，在文件存入磁盘时用该密码对文件的内容加密。在进行读取操作时，要对文件进行解密，只有知道密码的用户才能读取文件。" },
    { "name": "局域网协议", "category": "网络", "description": "局域网协议（LAN）" },
    { "name": "广域网协议", "category": "网络", "description": "广域网协议（WAN）" },
    { "name": "无线网协议", "category": "网络" },
    { "name": "移动网协议", "category": "网络" },
    { "name": "中间件", "category": "计算机", "description": "由于应用软件是在系统软件基础上开发和运行的，而系统软件又有多种，如果每种应用软件都要提供能在不同系统上运行的版本，开发成本将大大增加。因而出现了一类称为“中间件”（Middleware）的软件，它们作为应用软件与各种操作系统之间使用的标准化编程接口和协议，可以起承上启下的作用，使应用软件的开发相对独立于计算机硬件和操作系统，并能在不同的系统上运行，实现相同的应用功能。中间件是基础软件的一大类,属于可复用软件的范畴。顾名思义，中间件处在操作系统、网络和数据库之上，应用软件的下层。也有人认为中间件应该属于操作系统中的一部分。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/middleware.jpg\" />" },
    { "name": "通信处理（消息）中间件", "category": "计算机", "description": "在分布式系统中，人们要建网和制定出通信协议，以保证系统能在不同平台之间通信，实现分布式系统中可靠的、高效的、实时的跨平台数据传输，这类中间件称为消息中间件，也是市面上销售额最大的中间件产品，目前主要产品有BEA的eLink、IBM的MQSeries、TongLINK等。实际上，一般的网络操作系统如Windows已包含了其部分功能。" },
    { "name": "BEA", "category": "组织" },
    { "name": "eLink", "category": "产品" },
    { "name": "MQSeries", "category": "产品", "description": "IBM公司的MQSeries是IBM的消息处理中间件。MQSeries提供一个具有工业标准、安全、可靠的消息传输系统，它用于控制和管理一个集成的系统，使得组成这个系统的多个分支应用（模块）之间通过传递消息完成整个工作流程。MQSeries基本由一个信息传输系统和一个应用程序接口组成，其资源是消息和队列。\nMQSeries的关键功能之一是确保信息的可靠传输，即使在网络通信不可靠或出现异常时也能保证信息的传输。MQSeries的异步消息处理技术能够保证当网络或者通信应用程序本身处于“忙”状态或发生故障时，系统之间的信息不会丢失，也不会阻塞。这样的可靠性是非常关键的，否则大量的金钱和客户信誉就会面临极大的损害。\n同时，MQSeries是灵活的应用程序通信方案。MQSeries支持所有的主要计算平台和通信模式，也能够支持先进的技术（如Internet和Java），拥有连接至主要产品（如LotusNotes和SAP/R3等）的接口。" },
    { "name": "TongLINK", "category": "产品" },
    { "name": "事务处理（交易）中间件", "category": "计算机", "description": "在分布式事务处理系统中，经常要处理大量事务，特别是OLTP中，每项事务常常要多台服务器上的程序按顺序协调完成，一旦中间发生某种故障，不但要完成恢复工作，而且要自动切换系统保证系统永不停机，实现高可靠性运行。要使大量事务在多台应用服务器上能实时并发运行，并进行负载平衡的调度，实现与昂贵的可靠性机和大型计算机系统的同等功能，为了实现这个目标，要求中间件系统具有监视和调度整个系统的功能。BEA的Tuxedo由此而闻名，它成为增长率最高的厂商。" },
    { "name": "OLTP" },
    { "name": "Tuxedo", "category": "产品", "description": "BEA公司的Tuxedo作为电子商务交易平台，属于交易中间件。它允许客户机和服务器参与一个涉及多个数据库协调更新的交易，并能够确保数据的完整性。BEA Tuxedo一个特色功能是能够保证对电子商务应用系统的不间断访问。它可以对系统构件进行持续的监视，查看是否有应用系统、交易、网络及硬件的故障。一旦出现故障，BEA Tuxedo会从逻辑上把故障构件排除，然后进行必要的恢复性步骤。\nBEA Tuxedo根据系统的负载指示，自动开启和关闭应用服务，可以均衡所有可用系统的负载，以满足对应用系统的高强度使用需求。借助DDR（数据依赖路由），BEA Tuxedo可按照消息的上下文来选择消息路由。其交易队列功能，可使分布式应用系统以异步“少连接”方式协同工作。\nBEA Tuxedo的LLE安全机制可确保用户数据的保密性，应用/交易管理接口为50多种硬件平台和操作系统提供了一致的应用编程接口。BEA Tuxedo基于网络的图形界面管理可以简化对电子商务的管理，为建立和部署电子商务应用系统提供了端到端的电子商务交易平台。" },
    { "name": "数据存取管理中间件", "category": "计算机", "description": "在分布式系统中，重要的数据都集中存放在数据服务器中，它们可以是关系型的、复合文档型、具有各种存放格式的多媒体型，或者是经过加密或压缩存放的，该中间件将为在网络上虚拟缓冲存取、格式转换、解压等带来方便。" },
    { "name": "Web服务器中间件", "category": "计算机", "description": "浏览器图形用户界面已成为公认规范，然而它的会话能力差，不擅长做数据的写入任务，受HTTP协议的限制多等，就必须对其进行修改和扩充，因此出现了Web服务器中间件，如SilverStream公司的产品。" },
    { "name": "HTTP协议", "category": "网络" },
    { "name": "SilverStream", "category": "组织" },
    { "name": "安全中间件", "category": "计算机", "description": "些军事、政府和商务部门上网的最大障碍是安全保密问题，而且不能使用国外提供的安全措施（如防火墙、加密和认证等），必须用国产产品。产生不安全因素是由操作系统引起的，但必须要用中间件去解决，以适应灵活多变的要求。" },
    { "name": "跨平台和架构的中间件", "category": "计算机", "description": "当前开发大型应用软件通常采用基于架构和构件技术，在分布式系统中，还需要集成各结点上的不同系统平台上的构件或新老版本的构件，由此产生了架构中间件。功能最强的是CORBA，可以跨任意平台，但是其过于庞大；JavaBeans较灵活简单，很适合用于浏览器，但运行效率有待改善；COM+模型主要适合Windows平台，已在桌面系统广泛使用。由于国内新建系统多基于UNIX（包括Linux）和Windows，因此，针对这两个平台建立相应的中间件市场相对要大得多。" },
    { "name": "JavaBeans", "category": "产品" },
    { "name": "浏览器", "category": "计算机" },
    { "name": "COM+", "category": "计算机" },
    { "name": "专用平台中间件", "category": "计算机", "description": "专用平台中间件为特定应用领域设计领域参考模式，建立相应架构，配置相应的构件库和中间件，为应用服务器开发和运行特定领域的关键任务（如电子商务、网站等)。" },
    { "name": "网络中间件", "category": "计算机", "description": "它包括网管、接入、网络测试、虚拟社区和虚拟缓冲等，也是当前最热门的研发项目。" },
    { "name": "软件构件", "category": "计算机", "description": "构件又称为组件，是一个自包容、可复用的程序集。构件是一个程序集，或者说是一组程序的集合。这个集合可能会以各种方式体现出来，如源程序或二进制的代码。这个集合整体向外提供统一的访问接口，构件外部只能通过接口来访问构件，而不能直接操作构件的内部。构件的两个最重要的特性是自包容与可重用。" },
    { "name": "软件构件组装模型", "category": "计算机", "description": "随着软件构件技术的发展，人们开始尝试利用软件构件进行搭积木式的开发，即构件组装模型。在构件组装模型中，当经过需求分析定义出软件功能后，将对构件的组装结构进行设计，将系统划分成一组构件的集合，明确构件之间的关系。在确定了系统构件后，则将独立完成每一个构件，这时既可以开发软件构件，也可以重用已有的构件，当然也可以购买或选用第三方的构件。构件是独立的、自包容的，因此架构的开发也是独立的，构件之间通过接口相互协作。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/component-asembly-model.jpg\" />\n构件组装模型的优点如下：构件的自包容性让系统的扩展变得更加容易；设计良好的构件更容易被重用，降低软件开发成本；构件的粒度较整个系统更小，因此安排开发任务更加灵活，可以将开发团队分成若干组，并行地独立开发构件。\n构件组装模型也有明显的缺点：对构件的设计需要经验丰富的架构设计师，设计不良的构件难以实现构件的优点，降低构件组装模型的重用度；在考虑软件的重用度时，往往会对其他方面做出让步，如性能等；使用构件组装应用程序时，要求程序员能熟练地掌握构件，增加了研发人员的学习成本；第三方构件库的质量会最终影响到软件的质量，而第三方构件库的质量往往是开发团队难以控制的。" },
    { "name": "商用构件标准规范", "category": "计算机" },
    { "name": "CORBA", "category": "标准", "description": "公共对象请求代理架构（Common Object Request Broker Architecture，CORBA）主要分为3个层次：对象请求代理、公共对象服务和公共设施。最底层的对象请求代理（Object Request Broker，ORB）规定了分布对象的定义（接口）和语言映射，实现对象间的通信和互操作，是分布对象系统中的“软总线”；在ORB之上定义了很多公共服务，可以提供诸如并发服务、名字服务、事务（交易）服务、安全服务等各种各样的服务；最上层的的公共设施则定义了构件框架，提供可直接为业务对象使用的服务，规定业务对象有效协作所需的协定规则。\nCORBA CCM（CORBA Component Model）构件模型是OMG组织制定的一个用于开发和配置分布式应用的服务器端构件模型规范，它主要包括如下3项内容。\n一、抽象构件模型：用以描述服务器端构件结构及构件间互操作的结构。\n二、构件容器结构：用以提供通用的构件运行和管理环境，并支持对安全、事务、持久状态等系统服务的集成。\n三、构件的配置和打包规范：CCM使用打包技术来管理构件的二进制、多语言版本的可执行代码和配置信息，并制定了构件包的具体内容和文档内容标准。" },
    { "name": "OMG", "category": "组织", "description": "对象管理组织（Object Management Group）" },
    { "name": "J2EE", "category": "标准", "description": "在J2EE中，SUN给出了完整的基于Java语言开发面向企业分布的应用规范。其中，在分布式互操作协议上，J2EE同时支持远程方法调用（Remote Method Invocation，RMI）和互联网内部对象请求代理协议（Internet Inter-ORB Protocol，IIOP），而在服务器端分布式应用的构造形式，则包括了Java Servlet、JSP、EJB等多种形式，以支持不同的业务需求。而且Java应用程序具有跨平台的特性，使得J2EE技术在发布计算领域得到了快速发展。其中，EJB给出了系统的服务器端分布构件规范，这包括了构件、构件容器的接口规范以及构件打包、构件配置等的标准规范内容。EJB技术的推出，使得用Java基于构件方法开发服务器端分布式应用成为可能。从企业应用多层结构的角度，EJB是业务逻辑层的中间件技术。与JavaBeans不同，它提供了事务处理的能力，自从三层结构提出以后，中间层（也就是业务逻辑层）是处理事务的核心，从数据存储层分离，取代了存储层的大部分地位。从Internet技术应用的角度，EJB、Servlet和JSP一起成为新一代应用服务器的技术标准。EJB中的Bean可以分为会话Bean和实体Bean，前者维护会话，后者处理事务，通常由Servlet负责与客户端端通信，访问EJB，并把结果通过JSP产生页面传回客户端。" },
    { "name": "Sun", "category": "组织" },
    { "name": "Java", "category": "计算机" },
    { "name": "DNA 2000", "category": "标准", "description": "Microsoft DNA 2000是Microsoft在推出Windows 2000系列换操作系统平台的基础上，在扩展了分布计算模型以及改造BackOffice系列服务器端分布计算产品后发布的新的分布计算架构和规范。在服务器端，DNA 2000提供了ASP、COM、Cluster等的应用支持。DNA 2000融合了当今最先进的分布计算理论和思想，如事务处理、可伸缩性、异步消息队列和集群等内容。DNA可以开发基于Microsoft平台的服务器构件应用，其中，如数据库事务服务、异步通信服务和安全服务等，都由底层的分布对象系统提供。\nMicrosoft的DCOM/COM/COM+技术在DNA 2000分布计算结构基础上，展现了一个全新的分布构件应用模型。首先，DCOM/COM/COM+的构件仍然采用普通的构件对象模型（Component Object Model，COM）。COM最初作为Microsoft桌面系统的构件技术，主要为本地的对象连接与嵌入（Object Linking and Embedding，OLE）应用服务，但是随着Microsoft服务器操作系统Windows NT和分布式构件对象模型（Distributed Component Object Model，DCOM）的发布，COM通过底层的远程支持使得构件技术延伸到了分布应用领域。DCOM/COM/COM+更将其扩充为面向服务器端分布应用的业务逻辑中间件。通过COM+的相关服务设施，如负载均衡、内存数据库、对象池、构件管理与配置等，DCOM/COM/COM+将COM、DCOM、MTS（Microsoft Transaction Server，微软事物处理服务器）的功能有机地统一在一起，形成了一个功能强大的构件应用架构。\n通过购买商用构件（平台）并遵循其开发标准来进行应用开发，是提高应用软件开发效率的常见选择。" },
    { "name": "通用软件", "category": "计算机", "description": "常见的通用软件分文字处理软件、电子表格软件、媒体播放软件、网络通信软件、个人信息管理软件、演示软件、绘图软件、信息检索软件和游戏软件等。这些软件设计得很精巧，易学易用，在用户几乎不经培训就能普及到计算机应用的进程中，它们起到了很大的作用。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/general-software.jpg\" />" },
    { "name": "专用软件", "category": "计算机", "description": "专用软件是按照不同领域用户的特定应用要求而专门设计开发的，如超市的销售管理和市场预测系统、汽车制造厂的集成制造系统、大学教务管理系统、医院信息管理系统、酒店客房管理系统等。这类软件专用性强，设计和开发成本相对较高，主要是机构用户购买，因此价格比通用应用软件贵得多。" },
    { "name": "嵌入式系统", "category": "嵌入式", "description": "嵌入式系统（Embedded System）是为了特定应用而专门构建且将信息处理过程和物理过程紧密结合为一体的专用计算机系统。嵌入式系统随着20世纪70年代单片微型计算机（SCM）发明而兴起，目前已涵盖军事、自动化、医疗、通信、工业控制、消费电子、交通运输等各个应用领域。\n嵌入式系统是以应用为中心、以计算机技术为基础，并将可配置与可裁减的软、硬件集成于一体的专用计算机系统，需要满足应用对功能、可靠性、成本、体积和功耗等方面的严格要求。嵌入式系统通常通过外部接口采集相关输入信息或人机接口输入的命令，对输入数据进行加工和计算，并将计算结果通过外部接口输出，以控制受控对象。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/embedded-system.jpg\" />\n从计算机角度看，嵌入式系统是指嵌入各种设备及应用产品内部的计算机系统。它主要完成信号控制的功能，体积小、结构紧凑，可作为一个部件埋藏于所控制的装置中。它提供用户接口，管理有关信息的输入输出和设备监控工作，使设备及应用系统有较高智能和性价比。从技术角度看，嵌入式系统是计算机技术、通信技术、半导体技术、微电子技术、语音图像、数据传输技术，以及传感器等先进技术和具体应用对象相结合后的换代产品，是技术密集、投资规模大、高度分散、不断创新的知识密集型系统，反映了当代最新技术的先进水平。从综合角度看，嵌入式系统定义为现代科学多学科相互融合的以应用技术产品为核心,以计算机技术为基础，以通信技术为载体，以消费类产品为对象，引入各类传感器，引入Internet网络技术的连接，从而适应应用环境的产品。" },
    { "name": "嵌入式软件", "category": "嵌入式", "description": "嵌入式软件是指可运行在嵌入式系统中的程序代码和帮助这些软件开发所用的工具或环境软件的总称。" },
    { "name": "嵌入式系统组成", "category": "嵌入式", "description": "一般嵌入式系统由嵌入式处理器、相关支撑硬件、嵌入式操作系统、支撑软件以及应用软件组成。\n一、嵌入式处理器。由于嵌入式系统一般是在恶劣的环境条件下工作，与一般处理器相比，嵌入式处理器应可抵抗恶劣环境的影响，比如高温、寒冷、电磁、加速度等环境因素。为适应恶劣环境，嵌入式处理器芯片除满足低功耗、体积小等需求外，根据不同环境需求，其工艺可分为民用、工业和军用等三个档次。\n二、相关支撑硬件。相关支撑硬件是指除嵌入式处理器以外的构成系统的其他硬件，包括存储器、定时器、总线、IO接口以及相关专用硬件。基于ARM处理器的嵌入式计算机硬件组成如图所示，其中嵌入式ARM处理器是嵌入式计算机的核心部件，也是整个系统的运算中心。相关支撑硬件主要包括4类：存储器、输出设备、输入设备、接口和网络总线。本嵌入式存储器配备了非易失存储器（Flash）、内存（SDRAM）、硬盘（非线性Flash盘），显示设备配备了LCD显示，输入设备配备了键盘设备，提供了RS-232串行接口、USB接口和JTAG等三路I/O接口，配备了TCP/IP网络和CAN总线。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/embedded-system-architecture-based-on-arm.jpg\" />\n三、嵌入式操作系统。嵌入式操作系统是指运行在嵌入式系统统中的基础软件，主要用于管理计算机资源和应用软件。与通用操作系统不同，嵌入式操作系统应具备实时性、可剪裁性和安全性等特征。\n四、支撑软件。支撑软件是指为应用软件开发与运行提供公共共服务、软件开发、调试能力的软件，支撑软件的公共服务通常运行在操作系统之上，以库的方式被应用软件所引用。\n五、应用软件。应用软件是指为完成嵌入式系统的某一特定目标所开发的软件。" },
    { "name": "嵌入式系统特点", "category": "嵌入式", "description": "根据嵌入式系统的应用背景及其在应用中所起作用，嵌入式系统应应具备以下特性。\n一、专用性强。嵌入式系统面向特定应用需求，能够把通用CPU中许多由板卡完成的任务集成在芯片内部，从而有利于嵌入式系统的小型化。\n二、技术融合。嵌入式系统将先进的计算机技术、通信技术、半导体技术和电子技术与各个行业的具体应用相结合，是一个技术密集、资金密集、高度分散不断创新的知识集成系统。\n三、软硬一体软件为主。软件是嵌入式系统的主体，有IP核。嵌入式系统的硬件和软件都可以高效地设计，量体裁衣，去除冗余，可以在同样的硅片面和积上实现更高的性能。\n四、比通用计算机资源少。由于嵌入式系统通常只完成少数几个任务。设计时考虑到其经济性，不能使用通用CPU，这就意味着管理的资源少，成本低，结构更简单。\n五、程序代码固化在非易失存储器中。为了提高执行速度和系统可靠性，嵌入式系统中的软件一般都固化在存储器芯片或单片机本身中，而不是存在磁盘中。\n六、需专门开发工具和环境。嵌入式系统本身不具备开发能力，即使设计完成以后，用户通常也不能对其中的程序功能进行修改，必须有一套开发工具和和环境才能进行开发。\n七、体积小、价格低、工艺先进、性能价格比高、系统配置要求低、实时性强。\n八、对安全性和可靠性的要求高。" },
    { "name": "嵌入式系统分类", "category": "嵌入式", "description": "由于嵌入式系统是一个“深埋”于设备中，对设备的各种传感器进行管理与控制的系统，可从不同角度去划分嵌入式系统。通常，根据不同用途可将嵌入式系统划分为嵌入式实时系统和嵌入式非实时系统两种，而实时系统又可分为强实时（Hard Real-Time）系统和弱实时（Weak Real-Time）系统。如果从安全性要求看，嵌入式系统还可分为安全攸关（Safety-Critical或Life-Critical）系统和非安全做关系统。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/embedded-system-category.jpg\" />\n一、实时系统（Real-Time System，RTS）。实时系统是指能够在指定或者确定的时间内完成系统功能和外部或内部、同步或异步时间做出响应的系统。也就是说，系统计算的正确性不仅取决于程序的逻辑正确性，也取决于结果产生的时间，如果系统的时间约束条件得不到满足，将会发生系统错误。\n二、安全攸关系统（Safety-CriticalSystem）。安全攸关系统也称为安全关键系统或者安全生命关键系统（Life-CriticalSystem），是指其不正确的功能或者失效会导致人员伤亡、财产损失等严重后果的计算机系统。" },
    { "name": "嵌入式软件开发环境", "category": "嵌入式", "description": "嵌入式系统的最大特点就是系统的运行和开发是在不同环境中进行的，通常将运行环境称为“目标机”环境，称开发环境为“宿主机”环境。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/embedded-software-development-environment.jpg\" />\n在目标机环境运行时，系统与被控对象直接相关联，其系统架构的优劣也影响着被控对象功能的好坏。" },
    { "name": "嵌入式软件组成", "category": "嵌入式", "description": "嵌入式系统的能力与应用需求密不可分，同时也与硬件配置存在着紧密的耦合性。通常，嵌入式系统软件组成架构采用层次化结构，并且具备可配置、可剪裁能力。从现代嵌入式系统观看，人们把嵌入式系统分为硬件层、抽象层、操作系统层、中间件层和应用层等5层。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/embedded-software-architecture.jpg\" />\n一、硬件层。硬件层主要是为嵌入式系统提供运行支撑的硬件环境，其核心是微处理器、存储器（ROM、SDRAM、Flash等）、I/O接口（A/D、D/A、I/O等）和通用设备以及总线、电源、时钟等。\n二、抽象层。在硬件层和软件层之间为抽象层，主要实现双对硬件层的硬件进行抽象（Hardware Abstract Layer，HAL），为上层应用（操作系统）提供虚拟的硬件资源；板级支持包（Board Support Package，BSP）是一种硬件，它是面向硬件层的硬件芯片或电路进行驱动，为上层操作系统提供对硬件进行管理的支持。\n三、操作系统层。操作系统层主要由嵌入式操作系统、文件系统、图形用户接口、网络系统和通用组件等可配置模块组成。嵌入式操作系统的功能主要包括任务管理、内部存储器管理、任务间通信管理和时钟/中断管理等，主要完成系统的硬件资源、软件资源进行调度和管理；可配置组件是对操作系统的基本功能的扩展，为用户提供更加丰富的公共能力，这些组件具备可配置和可剪裁特性，用户可根据自己设计的应用系统需求，做适当组合。通常可配置组件包括了文件系统、设备管理、运行时库（RTL）、图形用户接口（GUI）、网络管理（如TCP/IP）和支持系统软件调试用的目标机代理（Agent）等组件。\n四、中间件（Middleware）层。中间件是指一种独立的系统软件或服务程序，分布式应用系统借助这种软件可在不同的技术之间共享资源。中间件层一般设位于操作系统之上，管理计算机资源和网络通信，中间件层是连接两个独立应用的桥梁。通常，中间件可分为服务中间件、集成中间件、数据中间件、消息中间件和安全中间件等5类。在嵌入式系统中，比较常用的中间件产品有嵌入式数据库、OpenGL图形图像处理软件、JAVA中间件、虚拟机(VM)、DDS/CORBA和Hadoop等。\n五、应用层。应用层是指嵌入式系统的具体应用，主要包括不同的应用软件。\n外部环境的变化会对系统的硬件性能产生影响，硬件的变化必然会引发软件的异常现象，比如，航天领域的辐射会引起存储器的负离子反转，那么存储器中存储的程序或数据就会发生变化，因此，嵌入式软件也要适应恶劣环境的影响。" },
    { "name": "硬件抽象", "category": "嵌入式", "description": "硬件抽象（Hardware Abstract Layer，HAL）" },
    { "name": "板级支持包", "category": "嵌入式", "description": "板级支持包（Board Support Package，BSP）" },
    { "name": "嵌入式软件特点", "category": "嵌入式", "description": "嵌入式软件的主要特点如下。\n一、可剪裁性。嵌入式软件能够根据系统功能需求，通过工具进行适应性功能的加或减，删除掉系统不需要的软件模块，使得系统更加紧凑。可剪裁性通常采用的设计方法包括静态编译、动态库和控制函数流程实现功能控制等。\n二、可配置性。嵌入式软件需要具备根据系统运行功能或性能需要而被配置的能力，使得嵌入式软件能够根据系统的不同状态、不同容量和不同流程，对软件工作状况进行能力的扩展、变更和增量服务。可配置通常采用的设计方法包括数据驱动、静态编译和配置表等。\n三、强实时性。嵌入式系统中的大多数都属于强实时性系统，要求任务必须在规定的时限（Deadline）内处理完成，因此，嵌入式软件采用的算法优劣是影响实时性的主要原因。强实时性通常采用的设计方法包括表驱动、配置、静/动态结合、汇编语言等。\n四、安全性（Safety）。安全性是指系统在规定的条件下和规定的时间内不发生事故的能力。安全性是判断、评价系统性能的一个重要指标，可直接反映系统失效后所带来损失大小。通常，在嵌入式系统中根据软件危害程度可将软件分成不同安全等级，例如，机载领域DO-178适航标准将软件分为A~E5个安全等级。提高安全性通常采用的设计方法包括编码标准、安全保障机制、FMECA（故障模式、影响及危害性分析）。\n五、可靠性。可靠性是指系统在规定的条件下和规定的时间周期内程序执行所要求的功能的能力。可靠性也是判断、评价系统性能的一个重要指标。软件可靠性与硬件可靠性的衡量指标是完全不同的，软件是不可能随着时间发生变化。在安全攸关系统中，其系统的可靠性指标通常要达到10^(-6)~10^(-9)。提高安全性通常采用的设计方法包括容错技术、余度技术和鲁棒性设计等。\n六、高确定性。嵌入式系统运行的时间、状态和行为是预先设计规划好的，其行为不能随时间、状态的变迁而变化。也就是说，在嵌入式系统中，任务、资涉原、状态、错误和时限等都是预先由设计师规划好的，在系统运行期间，不能发生资源站喝和未预计的状态出现等情况，尤其是在系统失效后不能由于未预计到的错误而引发灾难。确保软件确定性通常采用的设计方法包括静态分配资源、越界检查、状态机、静态任务调度等。" },
    { "name": "嵌入式软件开发", "category": "嵌入式", "description": "嵌入式软件的开发与传统的软件开发方法存在比较大的差异，主要表现在以下方面。\n一、嵌入式软件开发是在宿主机（PC机或工作站）上使用专门的嵌入式工具开发，生成二进制代码后，需要使用工具卸载到目标机或固化在目标机储存器上运行。\n二、嵌入式软件开发时更强调软/硬件协同工作的效率和稳定性。\n三、嵌入式软件开发的结果通常需要固化在目标系统的储存器或处理器内部储存器资源中。\n四、嵌入式软件的开发一般需要专门的开发工具、目标系统和测试设备。\n五、嵌入式软件对实时性的要求更高。\n六、嵌入式软件对安全性和可靠性的要求较高。\n七、嵌入式软件开发是要充分考虑代码规模。\n八、在安全攸关系统中的嵌入式软件，其开发还应满足某些领域对设计和代码审定。\n九、模块化设计即将一个较大的程序按功能划分成若干程序模块，每个模块实现特定的功能。" },
    { "name": "安全攸关软件", "description": "美国电气和电子工程协会（IEEE）将安全收关软件定义为：“用于一个系统中，可能导致不可接受的风险的软件”。在航空航天、轨道交通和核工业等领域中，其系统的安全性保障是至关重要的。因为一旦飞行器出现安全问题，将会带来机毁人亡的重大灾难。如今，嵌入式计算机及软件在这些领域中起着主导作用。如何设计一款高安全、高可靠的嵌入式软件，已成为软件业亟待解决的问题。" },
    { "name": "IEEE", "category": "组织", "description": "美国电气和电子工程协会（IEEE）" },
    { "name": "NASA 8719.13A", "category": "标准" },
    { "name": "软件安全", "description": "NASA 8719.13A给出了软件安全（Safety）的定义，即“在软件生命周期内，应用安全性工程技术，确保软件采取积极的措施提高系统安全性，确保降低系统安全性的错误，使其减少或控制在一个风险可接受的水平内”。严格来说，安全性属于一种系统特性，软件自身从本质上无从谈起是安全还是不安全。然而，当软件是一个安全攸关系统的一部分时，它可能引起或助长不安全的因素，从而影响系统的安全性。也正因如此，对于是不否存在软件安全性说法一直存在较大争议，认为安全性只用系统才有。安全性分析应自上而下，安全性分析离不开所适用的场景。" },
    { "name": "软件开发保证级别", "description": "不同软件开发保证级别，软件开发成本不同，甚至相差极大，因此开发保证级别的分配对于一个组织来说也不是越高越好，因为越高的开发保证级别代表了越大的成本。合理的功能分配、体系结构设计会帮助改善软件开发保证级别分配，从而降低软件研发成本和风险。" },
    { "name": "FAA", "vategory": "组织" },
    { "name": "DO-178", "category": "标准" },
    { "name": "RTCA", "vategory": "组织" },
    { "name": "EUROCAE", "vategory": "组织" },
    { "name": "DO-178B", "category": "标准" },
    { "name": "DO-178B目的", "description": "DO-178B的目的是为制造机载系统和设备的机载软件提供指导，使其能够提供在满足符合适航要求的安全性水平下完成预期功能。为了满足该目标，DO-178B给予了以下3方面的指导。\n一、软件生命周期过程的目标。\n二、为满足上述目标要进行的活动。\n三、证明上述目标已经达到的证据，也即软件生命周期数据。" },
    { "name": "DO-178B内容", "description": "在DO-178B中，目标、过程、数据是软件适航的基本要求。这三方面适航要求是辩证统一的关系，即一旦选择了DO-178B标准作为符合性方法，就必须满足该标准所定义的所有适航目标，而满足这些适航目标的途径则是执行该标准所建议的过程和活动，为证明这些适航目标被满足，应按照该标准所定义的软件生命周期数据来组织相关关证据。DO-178B的主要内容就是介绍目标、过程、数据这三个方面的适航要求。目标、过程和数据三个因素是DO-178B的精髓，它贯穿在整个软件生命周期各个过程之中。\n一、目标。DO-178B标准规定了软件整个生命周期需要达到到的66个目标。在DO-178B中，根据软件在系统中的重要程度将软件的安全等级分为A~E五级，不同安全等级的软件，需要达到目标要求不同。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relationship-between-software-safety-level-and-target.jpg\" />\n二、过程。DO-178B标准把软件生命周期分为“软件计划过程”“软件开发过程”和“软件综合过程”，其中软件开发过程和软件综合过程又分别被细分成4个子过程。\n三、数据。DO-178B把软件生命周期中产生的文档、代码、报表、记录等所有产品统称为软件生命周期数据。\nDO-178B仅仅定义的是软件生命周期过程，在嵌入式系统中，软件的需求是来自系统分解给它的需求，二者是密不可分的。下图展示了软件生存周期与系统生存周期的关系。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/relationship-between-software-life-circle-and-system-life-circle.jpg\" />" },
    { "name": "DO-178B软件生命周期", "description": "DO-178B标准将软件生命周期分为“软件计划过程”“软件开发过程”和“软件综合过程”，其中软件开发过程和软件综合过程又分别被细分成4个子过程。\n一、软件计划过程\n软件计划过程策划和协调软件生命周期的所有活动，预测软件生命周期的过程和数据是否符合适航要求，制订一系列软件计划和软件标准，用以指导软伙伴开发过程和软件综合过程活动。\n二、软件开发过程\n软件开发过程包含了生产软件产品的所有活动。整个过程所有活动的共同目标就是实现软件产品的自顶向下、由粗及细、从无到有的生产。软件开发过程又包括了软件需求过程、软件设计过程、软件编码过程和集成过程4个子过程。\n2.1 软件需求过程。它包含了根据系统生命周期的输出来开发发软件高层需求的所有活动。\n2.2 软件设计过程。它包含了对高层需求进行细化，开发软件体系结构和低层需求的所有活动。\n2.3 软件编码过程。它包含了根据软件体系结构和低层需求编写源代码的所有活动。\n2.4 集成过程。它包含了对源代码和目标码进行编译、链接并加载到目标机，形成机载系统或设备的所有活动。\n三、软件综合过程\n软件综合过程包含了验证软件产品、管理软件产品、控制软件产品，以保证软件产品和软件过程的正确、受控和可信的所有活动。软件综合过程又包含了软件验证过程、软件配置管理过程、软件质量保证过程、审定联络过程4个子过程。\n3.1 软件验证过程。它包含了对软件产品和软件验证结果进行技术评估以保证其正确性、合理性、完好性、一致性、无歧义性等特性的所有活动。软件验证依然是一项十分复杂的活动，DO-178B中根据验证活动的分类，列出了这些验证活动应该实现的目标。\n3.2 软件配置管理过程。它包含对数据进行配置标识、基线建立、更改控制、软件产品归档等一系列活动。这个过程中所有活动的目标就是实现软件生命周期数据的配置管理。\n3.3 软件质量保证过程。它包含对数据和过程进行审计的所有活动动。整个过程所有活动的共同目标就是评价软件生命周期过程及其输出，保证过程的目标得以实现，缺陷得以检测，软件产品和软件生命周期数据与合格审查要求一致。\n3.4 审定联络过程。它包含了软件研制单位与合格审查机构之间建立交流和沟通的所有活动。\n<b>从工作流关系分析DO-178B定义的软件生命周期全过程的流程关系如图所示。这里把计划过程、开发过程和综合过程纵向并排，并在过程的滋流向之间标明了软件生存周期的数据项，可以清晰地展示出过程与过程、过程与数据的关系。在图的顶部指明了来自系统生命周期过程的输入。</b>\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/software-life-circle-process-activity-and-relation.jpg\" />" },
    { "name": "DO-178C", "category": "标准" },
    { "name": "CMM", "description": "能力成熟度模型（CMM）是1994年由美国国防部与卡内基-梅隆大学的软件工程研究中心以及美国国防工业协会共同开发和研制的，其目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时、不超预算地开发出高质量的软件，同时也用于采办方评估和选择软件供应商。" },
    { "name": "CMMI", "description": "2002年推出了能力成熟度模型集成（CMMI），把开发模型CMMI-Dev、服务模型CMMI-SVC、采购模型CMMI-ACQ、人力模型P-CMM等多个领域能力成熟度模型集成到一个框架中去。" },
    { "name": "计算机网络", "category": "网络", "description": "计算机网络是利用通信线路将地理上分散的、具有独立功能的计算机系统和通信设备按不同的形式连接起来，并依靠网络软件及通信协议实现资源共享和和信息传递的系统。\n计算机网络技术主要涵盖通信技术、网络技术、组网技术和网路工程等四个方面。" },
    { "name": "计算机网络发展", "category": "网络", "description": "纵观计算机网络发展，其大致经历了诞生、形成、互联互通和高速发展等4个阶段。\n一、诞生阶段\n20世纪60年代中期之前的第一代计算机网络是以单个计算机为中心的远程联机系统，典型应用是由一台计算机和全美范围内2000多个终端组成的飞机订票系统，终端是一台计算机的外围设备，包括显示器和键盘，无CPU和内存。随着远程终端的增多，在主机之前增加了前端机（FEP）。当时，人们把计算机网络定义为“以传输信息为目的而连接起来，实现远程信息处理或资源共享的系统”，这样的通信系统已具备网络的雏形。\n二、形成阶段\n20世纪60年代中期至70年代的第二代计算机网络，是以多个主机通过通信线路互联起来为用户提供服务。它兴起于20世纪60年代后期，典型代表是美国国防部高级研究计划局协助开发的ARPANET。主机之间不是直接用线路相连，而是由接口报文处理机（IMP）转接后互联的。IMP和它们之间互联的通信线路一起负责主机间的通信任务，构成了通信子网。通信子网互联的主机负责运行程序，提供资源共享，组成资源子网。这个时期，网络概念为“以能够相互共享资源为目的互联起来的具有独立功能的计算机之集合体”，形成了计算机网络的基本概念。\n三、互联互通阶段\n20世纪70年代末至90年代的第三代计算机网络是具有统一的网络体系结构并遵守国际标准的开放式和标准化网络。ARPANET兴起后，计算机网络发展迅猛，各大计算机公司相继推出自己的网络体系结构及实现这些结构的软硬件产品。由于没有统一的标准，不同厂商的产品之间互联很困难，人们迫切需要一种开放性的标准化实用网络环境，因此产生了两种国际通用的最重要的体系结构，即TCP/IP体系结构和国际标准化组织的OSI体系结构。\n四、高速发展阶段\n20世纪90年代至今的第四代计算机网络，由于局域网技术发展成熟，出现光纤及高速网络技术，整个网络就像一个对用户透明的庞大的计算机系统，发展为以因特网（Internet）为代表的互联网。" },
    { "name": "计算机网络功能", "category": "网络", "description": "一、数据通信\n数据通信是计算机网络最主要的功能之一。数据通信是依照一定的通信协议，利用数据传输技术在两个通信结点之间传递信息的一种通信方式。它可实现计算机和计算机、计算机和终端以及终端与终端之间的数据信息传递，是继电报、电话业务各之后的第3种最大的通信业务。数据通信中传递的信息均以二进制数据形式表示。数据通信的另一个特点是，它通常与远程信息处理相联系，是包括科学计算、过程控制、信息检索等内容的的广义的信息处理。\n二、资源共享\n资源共享是人们建立计算机网络的主要目的之一。计算机资源包括硬件资源、软件资源和数据资源。硬件资源的共享可以提高设备的利用率，避免设备的重复投资，如利用计算机网络建立网络打印机、计算资源池等，供网络上的用户或应用来共享；软件资源和数据资源的共享可以充分利用已有的信息资源，比如可减少软件开发过程中的重复劳动，也可避免大型数据库的重复建设等。\n三、管理集中化\n计算机网络技术的发展和应用，已使得现代的办公手段、经营管理等发生了深刻变化。迄今已经有了许多管理信息系统、办公自动化系统等，通过这些系统可以实现日常工作的集中管理，提高工作效率，增加经济效益。\n四、实现分布式处理\n网络技术的发展，使得分布式计算成为可能。对于大型的课题，可以分为许许多多小题目，由不同的计算机分别完成，然后再集中来解决问题。\n五、负荷均衡\n负荷均衡是指工作负荷（Workload）被均匀地分配给网络上各台计算机系统。网络控制中心负责分配和检测，当某台计算机负荷过重时，系统会自动转移负荷到较轻的计算机系统来处理。\n综上所述，计算机网络可以极大扩展计算机系统的功能及其应用范围，提高可靠性，在为用户提供方便的同时，减少了整体系统费用，提高了系统性价比。" },
    { "name": "计算机网络指标", "category": "网络", "description": "计算机网络性能是衡量网络服务质量的重要体现，除了性能指标外，还有一些非性能特征，它们对计算机网络的性能也有很大影响。" },
    { "name": "网络性能指标", "category": "网络", "description": "可以从速率、带宽、吞吐量和时延等不同方面来度量计算机网络的性能。" },
    { "name": "速率", "category": "网络", "description": "网络速率指的是连接在计算机网络上的主机或通信设备在数字信道上传送数据的速率，它也称为数据率（Data Rate）或比特率（Bit Rate）。速率是计算机网络中最重要的性能指标之一。速率的单位是b/s（比特每秒）。" },
    { "name": "带宽", "category": "网络", "description": "“带宽”有以下两种不同的意义。\n其一，带宽是指一个信号具有的频带宽度。信号的带宽表示一个信号所包含的各种不同频率成分所占据的频率范围。例如，在传统的通信线路上传送的电话信号的标准带宽是3.1kHz（300Hz~3.4kHz为话音的主要成分的频率范围）。带宽的单位是赫兹（或千赫、兆赫、吉赫等）。\n其二，在计算机网络中，带宽用来表示网络的通信线路传送数据的能力。网络带宽表示在单位时间内从网络中一个结点到另一个结点所能通过的“最高数据率”。此处带宽单位是“比特每秒”，记为b/s。" },
    { "name": "吞吐量", "category": "网络", "description": "吞吐量表示在单位时间内通过某个网络（或信道、接口）的数据量。吞吐量受网络的带宽或网络额定速率所限制。例如，对于一个带宽为100Mb/s的以太网，其额定速率是100Mb/s，那么这个数值也是该以太网的吞吐量的绝对上限值。因此，对100Mb/s的以太网，其典型的吞吐量可能也只有70Mb/s。有时吞吐量还可用每秒传送的字节数或帧数来表示。" },
    { "name": "时延", "category": "网络", "description": "时延是指数据（一个报文、分组甚至比特）从网络（或链路）的一端传送到另一端所需的时间。时延是个很重要的性能指标，它有时也称为延迟或迟延。网络中的时延由以下几个不同部分组成，如发送时延、传播时延、处理时延、排队时延等组成。" },
    { "name": "往返时间", "category": "网络", "description": "往返时间（RTT）也是一个重要的网络性能指标，它表示从发送方发送数据开始，到发送方收到来自接收方的确认（接受方收到数据后便立即发送确认）总共经历的时间。" },
    { "name": "利用率", "category": "网络", "description": "利用率有信道利用率和网络利用率两种。信道利用率指信道被利用的概率（即有数据通过），通常以百分数表示。完全空闲的信道利用率是零。网络利用率是全网络的信道利用率的加权平均值。" },
    { "name": "网络非性能指标", "category": "网络", "description": "费用、质量、标准化、可靠性、可扩展性、可升级性、易管理性和可维护性等非性能指标与前面介绍的性能指标有很大相关性。" },
    { "name": "费用", "category": "网络", "description": "构建网络的费用（网络价格）包括设计和实现的费用。网络的性能与其价格密切相关。一般说来，网络的速率越高，其价格也越高。" },
    { "name": "质量", "category": "网络", "description": "网络的质量取决于网络中所有构件的质量以及由它们构建网络的方式。网络的质量体现在诸多方面，如网络可靠性、网络管理简易性以及网络性能等。高质量的网络往往价格不菲。" },
    { "name": "标准化", "category": "网络", "description": "网络硬件和软件的设计既可以按照通用的国际标准，也可以道循特定的专用网络标准。采用国际标准设计的网络，具有更好的互操作性，更易于升级换代和维护，也更容易得到技术上的支持。" },
    { "name": "可靠性", "category": "网络", "description": "可靠性与网络的质量和性能都有密切关系。速率更高的网络，其可靠性不一定会更差。但速率更高的网络要可靠地运行，则往往更加困难，同时所需费用也会更高。" },
    { "name": "可扩展性和可升级性", "category": "网络", "description": "网络在构造时就应当考虑到日后可能需要的扩展（即规模扩大）和升级（即性能和版本的提高）。网络性能越好，其扩展和升级的难度与费用往往也越高。" },
    { "name": "易管理和维护性", "category": "网络", "description": "如果对网络不进行良好的管理和维护，就很难达到和保持所设计的性能。" },
    { "name": "计算机网络应用", "category": "网络", "description": "21世纪人类将全面进入信息时代。信息时代的重要特征就是数字化、网络化和信息化。网络可以非常迅速地传递信息，要实现信息化就需要完善的网络。网络现在已经成为信息社会的命脉和发展知识经济的重要基础。网络对社会生活、社会经济的发展已经产生了不可估量的影响。\n从20世纪90年代以后，以因特网（Internet）为代表的计算机网络得到了飞速的发展，已从最初的教育科研网络逐步发展成为商业网络，并已成为仅次于全球电话网的世界第二大网络。因特网正在改变着人们工作和生活的方方面面，它已经给人类社会带来了巨大益处，并加速了全球信息革命的进程。因特网是人类自印刷术发明以来在通信方面最大的变革。现在，人们的生活、工作、学习和交往都已离不开因特网了。" },
    { "name": "通信技术", "category": "网络", "description": "计算机网络是利用通信技术将数据从一个结点传送到另一结点的过程。通信技术是计算机网络的基础。这里所说的数据，指的是模拟信号和数字信号，它们通过信道来传输。" },
    { "name": "信道", "category": "网络", "description": "信息传输就是信源和信宿通过信道收发信息的过程。信源发出信息，发信机负责将信息转换成适合在信道上传输的信号，收信机将信号转化成信息发送给信宿。\n一、信道是信息的传输通道。\n二、发信机接收信源发送的信息，进行编码和调制，将信息转化比成适合在信道上传输的信号，发送到信道上。\n三、收信机负责从信道上接收信号，进行解调和译码，将信息恢复出来发送给信宿。不是所有频率的信号都可以通过信道传输，频率响应决定了哪些可以以通过，可以通过的频率范围大小是信道的带宽。\n四、香农公式。信道容量就是信道的最大传输速率，可通过香农公式计算得到。" },
    { "name": "物理信道", "category": "网络", "description": "物理信道由传输介质和设备组成，根据传输介质的不同分为无线信道和有线信道。" },
    { "name": "逻辑信道", "category": "网络", "description": "逻辑信道是指在数据发送端和接收端之间存在的一条虚拟线路，可以是有连接的或无连接的。逻辑信道以物理信道为载体。" },
    { "name": "香农公式", "description": "<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/shannon-formula.jpg\" />\nC代表信道容量，单位是b/s\nB代表信号带宽，单位是Hz\nS代表信号平均功率，单位是W\nN代表噪声平均功率，单位是W\nS/N代表信噪比，单位是dB（分贝）\n提升信道容量可以使用比较大的带宽，降低信噪比；也可以使用比较小的带宽，升高信噪比。" },
    { "name": "信号变换", "category": "网络", "description": "发信机进行的信号处理包括信源编码、信道编码、交织、脉冲成形和调制。相反地，收信机进行的信号处理包括解调、采样判决、去交织、信道译码和信源译码\n一、信源编码\n将模拟信号进行模数转换，再进行压缩编码（去除冗余信息），最后形成数字信号。例如GSM（全球移动通信系统）先通过PCM（脉冲编码调制）编码模拟语音信号转化成二进制数字码流，再利用RPE-LPT（规则脉冲激励-长期预测编码）算法对其进行压缩。\n二、信道编码\n信道编码通过增加冗余信息以便在接收端进行检错和纠错，解决信道、噪声和干扰导致的误码问题，一般只能纠正零星的错误，对于连续的误码无能为力\n三、交织\n为了解决连续误码导致的信道译码出错问题，通过交织将信道编码之后的数据顺序按照一定规律打乱，到了接收端在信道译码之前再通过交织将数据顺序复原，这样连续的误码到了接收端就变成了零星误码，信道译码就可以正确纠错了。\n四、脉冲成形\n为了减小带宽需求，需要将发送数据转换成合适的波形，这就是脉冲成形。\n矩形脉冲要求的信道会很宽，主要原因是矩形脉冲的竖边是垂直的，想要达到这一点要很高的频率，脉冲成形并不要求是垂直的，所以频率要求降低了\n五、调制\n调制是将信息承载到满足信号要求的高频载波信号的过程。" },
    { "name": "复用技术", "category": "网络", "description": "复用技术是指在一条信道上同时传输多路数据的技术，如TDM时分复用、FDM频分复用和CDM码分复用等。ADSL使用了FDM的技术，语音的上行和下行占用了不同的带宽。" },
    { "name": "多址技术", "category": "网络", "description": "多址技术是指在一条线上同时传输多个用户数据的技术，在接收端把多个用户的数据分离（TDMA时分多址、FDMA频分多址和CDMA码分多址）。\n多路复用技术是多址技术的基础，多址技术还涉及信道资源分配算法，Walsh码分配算法等。" },
    { "name": "5G通信网络", "category": "网络", "description": "作为新一代的移动通信技术，5G的网络结构、网络能力和应用场场景等都与过去有很大不同，其特征体现在以下方面。\n一、基于OFDM优化的波形和多址接入\n5G采用基于OFDM优化的波形和多址接入技术，因为OFDNM技术被当今的4G LTE和WiFi系统广泛采用，因其可扩展至大带宽应用，具有高频谱效率和较低的数据复杂性，能够很好地满足5G要求。OFDM技术可实现多种增强功能，例如，通过加窗或滤波增强频率本地化，在不同用户与服务间提高多路传输效率，以及创建单载波OFDN4波形，实现高能效上行链路传输。\n二、实现可扩展的OFDM间隔参数配置\n通过OFDM子载波之间的15kHz间隔（固定的OFDM 参数百配置），LTE最高可支持20MHz的载波带宽。为了支持更丰富的频谱类型/带（为了连接尽可能丰富的设备，5G将利用所有可利用的频谱，如毫米微波、非授权频段）和部署方式。5G NR（New Radio）将引入可扩展的OFDM间隔参数配置。这一点至关重要，因为当快速傅里叶变换（Fast Fourier Transform，FFT）为更大带宽扩展尺寸时，必须保证不会增加处理的复杂性。而为了支持多种部署模式的不同信道宽度，5G NR必须适应同一部署下不同的参数配置，在统一的框架下提高多路传输效率。另外，5G NR也能跨波形实现载波聚合，比如聚合毫米波和6GHz以下频段的载波。\n三、OFDM加窗提高多路传输效率\n5G将被应用于大规模物联网，这意味着会有数十亿设备相互连接，5G势必要提高多路传输的效率，以应对大规模物联网的挑战。为了相邻频带不相互干扰，频带内和频带外信号辐射必须尽可能小。OFDM能实现波形后处理（Post-Processing），如时域加窗或频域滤波，来提升频率局域化。\n四、灵活框架设计\n5G NR采用灵活的5G网络架构，进一步提高5G服务多路传输的效率。这种灵活性既体现在频域，更体现在时域上，5G NR的框架能充分满足5G的不同服务和应用场景。这包括可扩展的传输时间间隔（Scalable Transmission Time Interval，STTI）和自包含集成子帧（Self-Contained Integrated Subframe）。\n五、大规模MIMO（Multiple-Input Multiple-Output）\n5G将2×2 MIMO提高到了4X4 MIMO。更多的天线也意味着占用更多的空间，要在空间有限的设备中容纳更多天线显然不现实，只能在基站端叠加更多MIMO。从目前的理论来看，5G NR可以在基站端使用最多256根天线，而通过天线的二维挂布，可以实现3D波束成型，从而提高信道容量和覆盖。\n六、毫米波\n全新5G技术首次将频率大于24GHz以上的频段（通常称为毫米波）应用于移动宽带通信。大量可用的高频段频谱可提供极致的数据传输速度和容量，这将重塑移动体验。但毫米波的利用并非易事，使用毫米波频段传输更容易造成路径受阻与损耗（信号衍射能力有限）。通常情况下，毫米波频段传输的信号甚至无法穿透墙体，此外，它还面临着波形和能量消耗等问题。\n七、频谱共享\n用共享频谱和非授权频谱，可将5G扩展到多个维度，实现更大容量，使用更多频谱，支持新的部署场景。这不仅将使拥有授权频谱的移动运营商受益，而面且会为没有授权频谱的厂商创造机会，如有线运营商、企业和物联网垂直行业，使他们能够充分利用5G NR技术。5G NR原生地支持所有频谱类型，并通过前向兼容灵活地利用全新的频谱共享模式。\n八、先进的信道编码设计\n现有移动通信网络编码（如LTE Turbo码）不足以应对未来无线数据传输需求。在5G通信信道编码中拟采用更符合5G网络应用场景的编码方式，如ILDPC码和Polar码等。\n低密度奇偶校验（Low-Density Parity-Check，LDPC）码是一种具有和疏校验矩阵的分组纠错码，性能逼近香农容量极限，实现简单，译码简单且可实行并行操作，适合硬件实现。LDPC码传输效率远超LTE Turbo，且易于平行化的解码设计，能以低复杂度和低时延途径进行扩展，获得更高传输速率。\nPolar码是一种前向错误更正编码方式。在编码侧采用此方式使各个子信道呈现出不同的可靠性，当码长持续增加时，部分信道将趋向于容量近于1的完美信道（无误码），另一部分信道趋向于容量接近于0的纯噪声信道，选择在容量接近于1的的信道上直接传输信息以逼近信道容量；在解码侧，极化后的信道可用简单的逐次干扰抵消解码的方法，以较低的复杂度获得与最大自然解码相近的性能。由于没有误码率，极化编码可以支持99.999%的可靠性，这正迎合了5G应用的超高可靠性诉求。Polar码是用作5G控制信道的主要编码方式。" },
    { "name": "网络技术", "category": "网络", "description": "网络通常按照网络的覆盖区域和通信介质等特征来分类，可分为局域网（LAN）、无线局域网（WLAN）、城域网（MAN）、广域网（WAN）和移动通信网等。" },
    { "name": "局域网", "category": "网络", "description": "局域网（Local Area Network，LAN）是指在有限地理范围内将若干计算机通过传输介质互联成的计算机组（即通信网络），通过网络软件实现计算机之间的文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，比如可以由办公室内的两台及以上计算机组成，也可以由一个公司内的若干台计算机组成。" },
    { "name": "网络拓扑", "category": "网络", "description": "局域网专用性非常强，具有比较稳定和规范的拓扑结构。常见的局域网拓扑结构有星状结构、树状结构、总线结构和环形结构。" },
    { "name": "星状结构", "category": "网络", "description": "网络中的每个结点设备都以中心结点为中心，通过连接线与中心结点相连，如果一个结点设备需要传输数据，它首先必须通过中心结点。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/star-topology.jpg\" />\n这种结构的网络系统中，中心结点是控制中心，任意两个结点间的通信最多只需两步，所以：传输速度快、网络构简单、建网容易、便于控制和管理。这种结构的缺点是可靠性低，网络共享能力差，并且一旦中心结点出现故障则导致全网瘫痪。" },
    { "name": "树状结构", "category": "网络", "description": "树状结构网络也被称为分级的集中式网络，其特点是网络成本低，结构简单。在网络中，任意两个结点之间不产生回路，每个链路都支持双向传输，结点扩充方便、灵活，方便寻查链路路径。但在这种结构的网络系统中，除叶结点及其相连的链路外，任何一个工作站或链路产生故障都会影响整个网络系统的正常运行。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/tree-topology.jpg\" />" },
    { "name": "总线结构", "category": "网络", "description": "总线结构网络是将各个结点设备和一根总线相连。网络中所有的结点设备都是通过总线进行信息传输的。在总线结构中，作为数据通信必经的总线的负载能力是有限度的，这是由通信媒体本身的物理性能决定的。\n总线作为连接各结点设备通信的枢纽，它的故障将影响总线上每个结点的通信。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/bus-topology.jpg\" />" },
    { "name": "环形结构", "category": "网络", "description": "网络中各结点通过一条首尾相连的通信链路连接起来，形成一个闭合环形结构网。环形结构的网络中各结点设备的地位相同，信息按照固定方向单向流动，两个节点之间仅有一条通路，系统中无信道选择问题，任一结点的故障将导致物理瘫痪。由于环路是封闭的，所以环形结构的网络不便于扩充，系统响应延时长，且信息传输效率相对较低。<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/ring-topology.jpg\" />" },
    { "name": "网状结构", "category": "网络", "description": "网状网络中的任何结点彼此之间均存在一条通信链路，任何结点故障不会影响其他结点之间的通信。但这种拓扑结构的网络布线较为烦琐，且建设成本高，控制方法复杂。" },
    { "name": "以太网", "category": "网络", "description": "以太网（Ethemet）是一种计算机局域网组网组网技术。IEEE制定的IEEE 802.3标准给出了以太网的技术标准。它规定了包括物理层的连线、电信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术。" },
    { "name": "IEEE 802.3", "category": "标准" },
    { "name": "以太网帧结构", "category": "网络", "description": "在以太网链路上的数据包被称作以太帧。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/ethernet-frame.jpg\" />\nDMAC代表目的终端的MAC地址，SMAC代表源MAC地址，而Length/Type字段长度是2字节，若该字段的值大于1500，则代表该数据帧的类型（比如该帧是属于哪个上层协议的数据单元)；若该字段的值小于1500，则代表该数据帧的长度。DATA/PAD代表具体数据，以太网数据顿的最小长度必须不小于64字节（根据半双工模式下最大距离计算获得的），如果数据长度加上帧头不足64字节，需要在数据部分增加填充内容。当Length/Type取值大于1500的时候，MAC子层可以根据Length/Type的值直接把数据帧提交给上层协议，由上层协议进行分帧处理。这种结构为当前较为流行的ETHERNET_II协议，大部分计算机都支持这种结构。FCS则是帧校验字段，用于判断该数据帧是否出错。" },
    { "name": "最小帧长", "category": "网络", "description": "由于CSMA/CD算法限制，以太网顿的最小长度为64字节。高层协议要保证此长度。如果实际数据不足64个字节，则高层协议必须进行填充。数据域的长度上限可以灵活设置，但通常被设置为1500字节。\n规定最小帧长的原因是为了避免发生某结点已经将一个数据包的最后一个BIT发送完毕，但这个报文的第一个BIT还未传送到距离较远的结点。这可能使得这些结点认为线路空闲而发送数据，导致链路上数据发送冲突。" },
    { "name": "最大传输距离", "category": "网络", "description": "以太网的最大传输距离没有严格限制，由线路质量、信号衰减程度等因素决定。" },
    { "name": "流量控制", "category": "网络", "description": "当通过交换机端口流量过大，超过了它的处理理能力时，就会发生端口阻塞。网络拥塞一般是由于线速不匹配（如100M向10M端口发送数据）和突发的集中传输而产生的，它可能导致延时增加、丢包和重传增加这几种情况，使网络资源不能有效利用。流量控制的作用是防止在设备出现阻塞情况下丢帧。\n在半双工方式下，流量控制通过反压（Back-Pressure）技术实现，模拟产生碰撞，使得信息源降低发送速度。\n在全双工方式下，流量控制一般遵循IEEE 802.3标准。IEEE 802.3x规定了一种64字节的“PAUSE”MAC控制顿格式。当端口发生阻塞时，交换机向信息源发送“PAUSE”帧，告诉信息源暂停一段时间再发送信息。\n在实际网络中，尤其是一般局域网产生网络拥塞情况极少，所以有的厂家交换机并不支持流量控制。高性能的交换机通常都支持半双工方式下的反向压力和全双工的IEEE 802.3x流控。有的交换机的流量控制将阻塞整个LAN的输入，降低整个LAN的性能；高性能的交换机采用的策略是仅仅阻塞向交换机拥塞端口输入帧的端口，保证其他也端口用户的正常工作。" },
    { "name": "无线局域网", "category": "网络", "description": "无线局域网WLAN（Wireless Local Area Networks）利用无线技术在空中传输数据、话音和视频信号。无线局域网所使用的关键技术，除了红外传输技术、扩频技术、窄带微波技术外还有一些其他技术，如调制技术、加解扰技术、无线分集接收技术、功率控制技术和节能技术。无线局域网在室外主要有以下几种结构：点对点型、点对多点型、多点对点型和混合型。与有线网络相比，无线局域网具有安装便捷、使用灵活、经济节约、易于扩展等优点。" },
    { "name": "WLAN标准", "category": "网络", "description": "IEEE 802.11是最早的无线局域网技术标准，当时传输速率只有1~2Mb/s，采用无连接的协议。\nIEEE 802.11b标准的速率可达11Mb/s，IEEE 802.11a标准的传输速率可达到54Mb/s。同时还出现了IEEE 802.11g标准，该标准具有与IEEE 802.11a标准一样的接入速率，同时兼容IEEE 802.11b标准，工作于免费的2.4GHz频段，价格比IEEE 802.11a更便宜。之后出现了IEEE 802.11n新标准，其传输速率可达200Mb/s以上。" },
    { "name": "IEEE 802.11", "category": "标准", "description": "IEEE 802.11，1997年，原始标准（2Mb/s，播在2.4GHz）。" },
    { "name": "IEEE 802.11a", "category": "标准", "description": "IEEE 802.11a，1999年，物理层补充（54Mb/s，播在5GHz）。" },
    { "name": "IEEE 802.11b", "category": "标准", "description": "IEEE 802.11b，1999年，物理层补充（11Mb/s，播在2.4GHz）。" },
    { "name": "IEEE 802.11g", "category": "标准", "description": "IEEE 802.11g，2003年，物理层补充（54Mb/s，播在2.4GHz）。" },
    { "name": "IEEE 802.11n", "category": "标准", "description": "IEEE 802.11n，更高传输速率的改善，基础速率提升到72.2Mb/s，可以使用双倍带宽40MHz，此时速率提升到150Mbps。支持多输入多输出技术（Multi-Input Multi-Output，MIMO）。" },
    { "name": "WLAN拓扑结构", "category": "网络", "description": "在WLAN中，通常使用的拓扑结构主要有3种形式：点对点型、HUB型和全分布型。这3种结构解决问题的方法各有优缺点，目的都是让用户在无线信道中，获得与有线LAN兼容或相近的传输速率。" },
    { "name": "点对点型", "category": "网络", "description": "典型的点对点结构是通过单频或扩频微波电台、红外发光二极管、红外激光等方法，连接两个固定的有线LAN网段，实际上是作为一种网络互联方案。无线链路与有线LAN是通过桥路器或中继器完成连接的。点对点拓扑结构简单，采用这种方案可获得中远距离的高速率链路。由于不存在移动性问题，收发信机的波束宽度可以很窄，虽然这会增加设备调试难度，但可减小由波束发散引起的功率衰耗。" },
    { "name": "HUB型", "category": "网络", "description": "由一个中心结点（HUB）和若干外围节点组成，外围结点既可以是独立的结点，也可与多个用户相连。中心HUB作为网络管理设备，为访问有线LAN或服务器提供逻辑接入点，并监控所有节点对网路的访问，管理外围设备对广播带宽的竞争，其管理功能由软件具体实现。在此拓扑中，任何两外围结点间的数据通信都须经过HUB，是典型的集中控制式通信。\n采用这种结构的网络具有用户设备简单，维护费用低，网络管理单一等优点，并可与微蜂窝技术结合，实现空间和频率复用。但是，用户之间的通信延迟增加，网络抗毁性能较差，中心结点的故障容易导致整个网络的瘫痪。" },
    { "name": "完全分布型", "category": "网络", "description": "完全分布结构目前还无具体应用，仅处于理论探讨阶段，它要求相关结点在数据传输过程中发挥作用，类似于分组无线网的概念。对每一结点而言，一般仅只有网络的部分拓扑信息，但它可与邻近结点以某种方式分享各自拓扑结构信息，基于此完成一种分布路由算法，使得传输路径上的每一结点都要协助源结点数据传送至目的结点。\n分布式结构抗毁性能好，移动能力强，可形成多跳网，适合较低速率的中小型网络，但对于用户结点而言，复杂性和成本较其他结构大幅度提高，网络管理困难，并存在多径干扰问题，同时随着网络规模的扩大，其性能指标快速下降。但在军事领域中，分布式WLAN具有很好的应用前景。" },
    { "name": "广域网", "category": "网络", "description": "广域网WAN是一种将分布于更广区域（比如一个城市、一个国家甚至国家之间）的计算机设备联接起来的网络。它通常是电信部门负责组建、经营和管理，并向社会公众提供通信服务。\n广域网由通信子网与资源子网组成。通信子网主要是由一些通信结点设备和连接这些设备的链路组成。通信结点设备负责网络中数据的转发，其链路用于承载用户的数据，一般分为传输主干链路和末端用户线路。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网来构建，将分布在不同地区的局域网或计算机系统工互连起来，达到资源共享的目的。资源子网是指网络中实现资源共享功能的设备及其软件的集合。资源子网主要指网络资源设备，如信息服务或业务服务器、用户计算机、网络存储系统、独立运行的网络数据设备、网络上运行的各种软件资源、数据资源等。" },
    { "name": "广域网技术", "category": "网络" },
    { "name": "同步光网络", "category": "网络", "description": "同步光网络（Synchronous Optical Networking，SONET）是使用光纤进行数字化信息通信的一个标准。同步数字体系（Synchronous Digital Hierarchy，SDH）标准从SONET发展而来。SONET是由美国标准化组织颁布的标准，SDH是国际电信联盟颁布的标准，两者均为传输网络物理层技术。SONET和SDH两种技术都被广泛应用，SONET应用在美国和加拿大，SDH应用于其他国家。SONET和SDH体制都能够用来封装较早的数字传输标准，比如PDH（Plesiochronous Digital Hierarchy）标准，或者直接用来支持ATM以及SONET上的分组业务（Packet Over SONET）。" },
    { "name": "数字数据网", "category": "网络", "description": "数字数据网DDN（Digital Data Network）利用数字信道提供半永久性连接电路以传输数据。它可以满足各类租用数据专线业务的需要。它具有传输速率高、传输质量高、协议简单、连接方式灵活、电路可靠性高和网络运行管理理简便等优点。" },
    { "name": "帧中继", "category": "网络", "description": "帧中继FR（Frame Relay）是一种高性能广域网技术，运行于OSI/RM的物理层和数据链路层，是一种数据包交换技术，是X.25网络的简化反本，但具有更高性能和传输效率。\n帧中继采用虚电路技术，充分利用网络资源，具有吞吐量高，时延低，适合突发性业务等特点。" },
    { "name": "异步传输技术", "category": "网络", "description": "异步传输模式（Asynchronous Transfer Mode，ATM）是以信元为基础的面向连接的一种分组交换和复用技术。它具有高速数据传输率，可满足多种业务（如语音、数据、传真、实时视频等）传输的需要。在ATM中信元不仅是传输的基本单位，也是交换的信息单位。由于信元长度固定（53个字节），可高速地进行处理和交换，去除不必要的数据校验，交换速率大大高于其他传统数据网，其典型速率为150Mb/s。" },
    { "name": "广域网特点", "category": "网络", "description": "广域网具有下述特点：\n一、主要提供面向数据通信的服务，支持用户使用计算机进行远距离的信息交换。\n二、覆盖范围广，通信的距离远，广域网没有固定拓扑结构。\n三、由电信部门或公司负责组建、管理和维护，并向全社会提供面向通信的有偿服务等。" },
    { "name": "广域网分类", "category": "网络", "description": "广域网可以分为公共传输网络、专用传输网络和无线传输网络。" },
    { "name": "公共传输网络", "category": "网络", "description": "公共传输网络一般是由政府电信部门组建、管理和控制，网络内的传输和交换装置可以提供（或租用）给任何部门和单位使用。公共传输网络大体可以分为电路交换网络和分组交换网络两类。" },
    { "name": "专用传输网络", "category": "网络", "description": "专用传输网络是由单个组织或团体自己建立、使用、控制和维护的私有通信网络。一个专用网络起码要拥有自己的通信和交换设备，它可以建立自己的线路服务，也可以向公用网络或其他专用网络进行租用。专用传输网络主要是数字数据网（DDN）。DDN可以在两个端点之间建立一条永久的、专用的数字通道。它的特点是在租用该专用线路期间，用户独占该线路的带宽。" },
    { "name": "无线传输网络", "category": "网络", "description": "无线传输网络主要是移动无线网，典型的有GSM、TD-SCDMA/WCDMA/CDMA2000、LTE和5G等。" },
    { "name": "城域网", "category": "网络", "description": "城域网是在单个城市范围内所建立的计算机通信网，简称MAN（Metropolitan Area Network）。由于采用有源交换元件的局域网技术，网络中传输时延较小，它的传输媒介主要采用光缆，传输速率在100Mb/s以上。MAN基于一种大型的LAN，通常使用与LAN相似的技术，但MAN的标准称为分布式队列双总线DQDB（Distributeed Queue Dual Bus）,即IEEE 802.6。DQDB是由双总线构成，将加入MAN的所有计算机都连接起来。\n如果说局域网或广域网通常是为了一个单位或系统服务的，那么城域网则是为整个城市而非某个特定部门服务。它向上与骨干网相连，向下将本地所有的联网用户与城市骨干网相连。城域网络通常分为3个层次：核心层、汇聚层和接入层。核心层主要提供高带宽的业务承载和传输，完成和已有网络（如ATM、FR、DDN、IP网络）的互联互通，其特征为宽带传输和高速调度。汇聚层的主要功能是给业务接入结点提供用户业务数据的汇聚和分发处理，同时要实现业务的服务等级分类。接入层利用多种接入技术，进行带宽和业务分配，实现用户的接入。" },
    { "name": "移动通信网", "category": "网络" },
    { "name": "移动通信网发展", "category": "网络", "description": "移动通信网络自从20世纪80年代出现以来，经历近40年的发展历程。最初采用模拟信号传输，即将电磁波进行频率调制后，将语音信号转换到载波电磁波上，载有信息的电磁波发布到空间后由接收设备接收，并从载波电磁波上还原语音信息，完成人与人之间的通话，即1G通信时代。由于1G采用模拟信号传输，所以其容量非常有限，一般只能传输语音信号，且存在语音品质低、信号不稳定、涵盖范围不够全面、安全性差和易受干扰等问题。之后出现的2G移动通信采用数字调制技术。移动通信系统的容量有了增加，此时手机可以上网了，虽然数据传输速度很慢，速率为9.6~14.4kb/s，但可传输文字信息。这也是移动互联网发展的起点。随后，移动通信网络发展到3G时代。3G延续2G数字数据传输技术，但通过开辟新电磁波频谱及研发新标准，使得3G传输速率可达384kb/s，在室内稳定环境下甚至可达2Mb/s的速率，比2G提升了百倍之多。由于采用更宽频带，传输稳定性大大提高。正是由于速度大幅提升和通信稳定性的提高，使大数据的传送成为可能，催生了移动通信多样化的应用。随着移动通信自身演进以及移动互联网发展的需要，诞生了4G移动通信技术。4G采用更先进的通信协议和技术，理论上网速度为3G的几十倍，实际用户上网体验与固网20Mb/s家庭宽带相当。4G可满足人们使用手机流畅观看高清电影，进行大数据传输等需要。4G已经像“水电”一样成为人们生活中不可或缺的基本资源，像微信、微博、视频、移动支付等手机几应用成为生活中的必需，人们无法想象离开手机的生活。因此，4G将人类带进了移动互联网快速发展的时代。随着社会信息化发展步伐的加快，以及社会各个领域对移动通信需求的日益多样化的驱动，诞生了5G通信网络，5G不再由某项业务能力或者某个典型技术特征加以定义。它不仅是更高速率、更大带宽、更强能力的技术，而且是一个多业务、多技术融合的网络，更是面向业务应用和用户体验的智能网络，最终打造以用户为中心的信息生态系统。5G网络的基本特征是高速率（峰值速率可大于20Gb/s，相当于4G的20倍）、低时延（网络时延从4G的50ms缩减到1ms）、海量设备连接（满足1000亿量级的连接）、低功耗（基站更节能，终端更省电）。" },
    { "name": "5G网络主要特征", "category": "网络" },
    { "name": "服务化架构", "category": "网络", "description": "为满足5G时代行业应用的差异化需求，网络需要具备软件快速迭代和升级的能力，以加快业务创新，低成本试错，实现商业敏捷，3GPP（3rd Generation Partnership Project）在5G核心网中引入了SBA（Service-based Architecture）用服务化架构，实现网络功能的灵活定制和按需组合。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/5g-network-architecture.jpg\" />\n在5G通信系统中涉及的主要网元NF（Network Function），其中控制面NF包括：认证服务功能（Authentication Server Function，AUSF），接入和移动性管理功能（Access and Mobility Management Function，AMF），网络能力开放功能（Netvwork Exposure Function，NEF），网络存储功能（Network Repository Function，NRF），网络切片选择功能（Network Slice Selection Function，NSSF），策略控制功能（Policy Contro1 Function，PCF），会话管理功能（Session Management Function，SMF），统一数据管理功能（Unified Data Management，UDM），应用功能（Application Function，AF）等。用户面NF包括用户面功能（User Plane Function，UPF），另外包括用户设（User Equipment，UE），接入网或无线接入网（（Radio）Access Network，（R）AN）等。数据网（Data Network，DN）指运营商服务网络、Internet互联网或者是第三方服务网络等。它是5G通信系统要接入的业务网络。\n5G系统控制面网元（如AMF、SMF、NRF、NSSF等）之间采用服务化接口（Service Based Interface，SBI）互通，使HTTP协议作为承载协议。其中AMF和接入网（AN）采用点到点方式通信，使用SCTP协议作为承载协议，SMF和用户面网元（UPF）之间采用点到点通信，使用UDP协议作为承载协议。UPF和（R）AN之间采用点到点方式通信，使用UDP作为承载协议。UDP和DN之间基于/IP协议通信。" },
    { "name": "网络切片", "category": "网络", "description": "5G时代网络服务的对象不再是单纯的移动手机，而是各种类型的设备，如移动手机、平板、固定传感器和车辆等；应用场景也更加多样华化，如移动宽带、大规模物联网、任务关键型互联网等；要满足的要求也愈加多样化，如移动性、安全性、时延性和可靠性等。这便催生了网络切片的诞生。通过网络切片技术在单个独立的物理里网络上切分出多个逻辑网络，从而避免了为每一个服务建设一个专用的物理网络，极大地降低了建网和运维成本。\n移动宽带（eMBB）的应用场景如面向4K/8K超高清视频、全息技术、增强现实/虚拟现实等应用，对网络带宽和速率要求较高；海量大规模物联网（mMTC）的应用场景如海量的物联网传感器部署于测量、建筑、农业、物流、智慧城市、家庭等领域，这些传感器设备是非常密集的，规模庞大，且大部分是静止的，对时延和和移动性要求不高；关键任务物联网（uRLLC）的应用场景如无人驾驶、车联网、自动工厂、运程医疗等领域，要求超低时延和超高可靠性。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/5g-slicing-architecture.jpg\" />" },
    { "name": "组网技术", "category": "网络" },
    { "name": "国际标准化组织", "category": "组织", "description": "国际标准化组织（International Standard Organization，ISO）" },
    { "name": "OSI参考模型", "category": "网络", "description": "开放系统是指遵从国际标准的、能够通过互连而相互作用的系统。系统之间的相互作用只涉及系统的外部行为，而与系统内部的结构和功能无关。国际标准化组织（International Standard Organization，ISO）公布了开放系统互连参考模型（OSI/RM）。OSI/RM为开放系统互连提供了一种功能结构的框架。OSI/RM是一种分层的体系结构，参考模型共有7层，分层的基本想法是每一层都在它的下层提供的服务基础上提供更高级的增值服务，而最高层提供能运行分布式应用程序的服务。这样，通过分层的方法将复杂的问题分解，并保持层次之间的独立性。OSI/RM的网络体系结构如图所示，由低层至高层分别为物理层（Physical Layer）、数据链路层（Datalink Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）和应用层（Application Layer）。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/osi-rm.jpg\" />" },
    { "name": "物理层", "category": "网络" },
    { "name": "数据链路层", "category": "网络" },
    { "name": "网络层", "category": "网络" },
    { "name": "传输层", "category": "网络" },
    { "name": "会话层", "category": "网络" },
    { "name": "表示层", "category": "网络" },
    { "name": "应用层", "category": "网络" },
    { "name": "网络设备", "category": "网络", "description": "网络设备是连接到网络中的物理实体。网络设备的种类繁多，且与日俱增。基本的网络设备有集线器、中继器、网桥、交换机、路由器和防火墙等。" },
    { "name": "集线器", "category": "网络", "description": "集线器是最简单的网络设备。在集线器中，从一个端口收到的数据被转送到所有其他端口，无论与端口相连的系统是否准备好。集线器还有一个端口被指定为上联端口，用来将该集线器连接到其他集线器或路由设备等以便形成更大的网络。" },
    { "name": "中继器", "category": "网络", "description": "中继器是局域网互连设备，工作于OSI体系结构的物理层，它接收并识别网络信号，然后再生信号，将其发送到网络的其他分支上。为了保证中继器正常工作，需要保证每一个分支中的数据包和逻辑链路协议相同。此外，中继器可以用来连接不同物理介质，并在各种物理介质中传输数据包。" },
    { "name": "网桥", "category": "网络", "description": "网桥工作于OSI体系的数据链路层。OSI模型数据链路层以上各层的信息对网桥来说是透明的。网桥包含了中继器的功能和特性，不仅可以连接多利中介质，还能连接不同的物理分支，如以太网、令牌网，能将数据包在更大的范围内进行传送。" },
    { "name": "交换机", "category": "网络", "description": "交换机是一种工作在OSI七层协议中的数据链路层，为接入交换机的任意两个网络结点提供独享的转发通路，将从一个端口接收的数据通过内部处理转发到指定端口。交换机具备自动寻址和交换的功能，同时具有避免端口冲突、提高网络吞吐（Throughput）的能力。" },
    { "name": "路由器", "category": "网络", "description": "路由器工作在OSI体系结构中的网络层，它可以在多个网络上交换和路由数据包。路由器可通过在相互独立网络中交换路由信息以生成路由表来达到数包的路径选择。路由表包含网络地址、连接信息、路径信息和发送代价等属性。路由器通常用于广域网或广域网与局域网的互连。" },
    { "name": "防火墙", "category": "网络", "description": "防火墙（Firewall）是网络中一种重要设备，它通常作为网络的门户，为网络的安全运行提供保障。通过在防火墙设置若干安全规则实现对进出网络的数据进行监视和过滤。在网络中通常采用硬件防火墙。硬件防火墙是指把防火墙程序做到芯片里面，由硬件执行这些功能，能减少CPU的负担，使路由更稳定。它的安全和稳定，直接关系到整个网络的的安全。" },
    { "name": "网络协议", "category": "网络", "description": "在计算机网络中要实现资源共享以及信息交换，必须实现不同系统中实体的通信。两个实体要想成功通信，它们必须具有相同的语言，在计算机网络中称为协议（或规程）。所谓协议，指的是网络中的计算机与计算机进行通信时，为了能够实现数据的正常发送与接收必须要遵循的一些事先约定好的规则（标准或约定），在这些规程中明确规定了通信时的数据格式、数据传送时序以及相应的控制信息和应答信号等内容。" },
    { "name": "OSI协议集", "category": "网络", "description": "国际标准化组织除了定义开放系统互连参考模型，还开发了实现7个功能层次的各种协议和服务标准，通称为OSI协议。与其他协议一样，OSI协议是实现某些功能的过程描述和说明。每一个OSI协议都详细地规定了特定层次的功能特性。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/osi-protocol-set.jpg\" />" },
    { "name": "TCP/IP协议集", "category": "网络", "description": "TCP/IP（Transmission Control Protocol/Internet Protocol）作为Internet的核心协议，已被广泛应用于局域网和广域网中，TCP/IP的主要特性为逻辑编址、路由选择、域名解析、错误检测和流量控制以及对应用程序的支持等。TCP/IP是个协议族，主要包括因特网协议（IP）、传输控制协议（TCP）、用户数据报协议（UDP）、虚拟终端协议（TELNET）、文件传输协议（FTP）、电子邮件传输协议（SMTP）、网上新闻传输协议（NNTP）和超文本传送协议（HTTP）等8个。\nTCP/IP网络协议模型共分为网络接口层、网际层、传输层和应用层4层。对于网络访问层，在TCP/IP参考模型中并没有详细描述，只是指出主机必项使用某种协议与网络相连。网际层是整个TCP/IP体系结构的关键部分，其功能是使主机可以巴分组发往任何网络，并使分组独立地传向目标。传输层使源端和目的端机器上的对等实体可以进行会话。这一层定义了两个端到端的协议：传输控制协议（TCP）和用户数据报协议（UDP）。" },
    { "name": "IP协议", "category": "网络" },
    { "name": "TCP协议", "category": "网络" },
    { "name": "UDP协议", "category": "网络" },
    { "name": "FTP协议", "category": "网络" },
    { "name": "SMTP协议", "category": "网络", "description": "发邮件，端口25" },
    { "name": "POP3协议", "category": "网络", "description": "收邮件，端口110" },
    { "name": "HTTP协议", "category": "网络" },
    
    { "name": "层次化存储结构", "category": "计算机", "description": "计算机中全部信息包括输入的原始数据、计算机程序、中间运行结果和最终运行结果都保存在存储器中。存储器包括：主存、辅存、通用寄存器、Cache四类。" },
    { "name": "Cache", "category": "计算机", "description": "Cache是为了解决高速运行的CPU与主存储器之间速度不匹配的问题。Cache中存放的是主存的部分拷贝（副本）。它是按照程序的局部性原理选取出来的最常使用或不久将来仍将使用的内容。" },
    { "name": "局部性原理", "category": "计算机", "description": "时间局部性：程序中的某条指令一旦执行，不久以后该指令可能再次执行。\n空间局部性：一旦程序访问了某个存储单元，不久以后，其附近的存储单元也被访问，即程序在一段时间内所访问的地址可能集中在一定的范围内。" },
    { "name": "Cache命中率", "category": "计算机", "description": "CPU在访问内存时，首先判断所要访问的内容是否在Cache中，如果在，就称为“命中”，此时CPU直接从Cache中调用该内容；否则，就称为“不命中”，CPU只好去内存中调用所需的子程序或指令了。CPU不但可以直接从Cache中读出内容，也可以直接往其中写入内容。由于Cache的存取速率相当快，使得CPU的利用率大大提高，进而使整个系统的性能得以提升。" },
    { "name": "Cache平均访问时间", "category": "计算机", "description": "如果以h为代表对Cache的访问命中率，t1为Cache的存取时间，t2为主存的访问时间，则Cache的平均访问时间ta为：\nta=h*t1+(1-h)*t2" },
    { "name": "HTTP方法", "category": "网络" },
    { "name": "ROS", "category": "嵌入式", "description": "ROS（Robot Operating System，机器人操作系统）" },
    { "name": "ROS1", "category": "嵌入式" },
    { "name": "ROS2", "category": "嵌入式" },
    { "name": "Elasticsearch分词器", "category": "数据库", "description": "Elasticsearch 分词器" },
    { "name": "Standard分词器", "category": "数据库" },
    { "name": "Simple分词器", "category": "数据库" },
    { "name": "Whitespace分词器", "category": "数据库" },
    { "name": "Keyword分词器", "category": "数据库" },
    { "name": "RESTful" },
    { "name": "质量属性效用树" },
    { "name": "MTTR" },
    { "name": "流水线" },
    { "name": "流水线周期" },
    { "name": "流水线吞吐率" },
    { "name": "流水线最大吞吐率" },
    { "name": "流水线加速比" },
    { "name": "DMA", "description": "直接存储器访问" },
    { "name": "最短移臂调度算法" },
    { "name": "CRC校验码" },
    { "name": "PV操作" },
    { "name": "死锁" },
    { "name": "银行家算法" },
    { "name": "页式存储" },
    { "name": "段式存储" },
    { "name": "段页式存储" }
  ],
  "edges": [
    { "source": "IEEE 1741-2000", "predicate": "定义", "target": "系统架构", "description": "IEEE 1741-2000标准对架构定义如下：\n<b>架构</b>是体现在<b>组件</b>中的一个系统的基本组织、它们彼此的<b>关系</b>与<b>环境</b>的关系及指导它的设计和发展的<b>原则</b>。\n<b>系统</b>是组织起来完成某一特定功能或一组功能的组件集。系统这个术语包括了单独的应用程序、传统意义上的系统、子系统、系统之系统、产品线、整个企业及感兴趣的其他集合。系统用于完成其环境中的一个或多个任务。\n<b>环境</b>或者上下文决定了对这个系统的开发、运作、政策以及会对系统造成其他影响的环境和设置。\n<b>任务</b>是由一个或者多个利益相关者通过系统达到一些目标的系统的一个用途或操作。" },
    { "source": "IEEE 1741-2000", "predicate": "定义", "target": "系统架构设计师" },
    { "source": "系统架构设计师", "predicate": "创建", "target": "系统架构", "description": "系统架构设计师是担任系统架构设计的核心角色。\n<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "模块化", "target": "系统架构", "description": "模块化的思想推动软件架构的快速发展。" },
    { "source": "模块化", "target": "服务导向架构", "description": "服务导向架构是基于模块化思想。" },
    { "source": "IEEE 1741-2000", "target": "组件化", "description": "组件化技术是IEEE 1741-2000标准提出阶段最重要的成果之一。" },
    { "source": "组件化", "predicate": "相比于", "target": "模块化", "description": "组件化开发并不等同于模块化开发。模块化开发只是在逻辑上做了切分，物理上（代码）通常没有真正意义上的隔离。组件化比模块化更独立。" },
    { "source": "组件化", "predicate": "相比于", "target": "应用集成", "description": "组件化不等同于应用集成。组件化比应用集成更紧密。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构描述与表示" },
    { "source": "架构描述与表示", "target": "架构描述语言" },
    { "source": "架构描述语言", "predicate": "包括", "target": "C2SADL" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Wright" },
    { "source": "架构描述语言", "predicate": "包括", "target": "ACME" },
    { "source": "架构描述语言", "predicate": "包括", "target": "UniCon" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Rapide" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Darwin" },
    { "source": "架构描述语言", "predicate": "包括", "target": "MetaH" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Aesop" },
    { "source": "架构描述语言", "predicate": "包括", "target": "Weaves" },
    { "source": "架构描述语言", "predicate": "包括", "target": "SADL" },
    { "source": "架构描述语言", "predicate": "包括", "target": "xADL" },
    { "source": "系统架构", "predicate": "包括", "target": "架构分析" },
    { "source": "架构分析", "predicate": "包括", "target": "架构分析方法" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SAAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "ATAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "CBAM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SBAR" },
    { "source": "架构分析方法", "predicate": "包括", "target": "ALPSM" },
    { "source": "架构分析方法", "predicate": "包括", "target": "SAEM" },
    { "source": "系统架构设计师", "predicate": "执行", "target": "架构设计", "description": "<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "架构设计", "predicate": "生成", "target": "系统架构", "description": "<img src=\"https://regular-files.oss-cn-hangzhou.aliyuncs.com/architecture-designer-relationship.jpg\" />" },
    { "source": "架构设计", "predicate": "包括", "target": "架构设计方法" },
    { "source": "架构设计方法", "predicate": "包括", "target": "工作驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "用例驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "模式驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "域驱动" },
    { "source": "架构设计方法", "predicate": "包括", "target": "属性驱动设计" },
    { "source": "系统架构", "predicate": "包括", "target": "架构测试" },
    { "source": "架构测试", "predicate": "包括", "target": "架构测试策略" },
    { "source": "架构测试策略", "predicate": "包括", "target": "单元测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "子系统测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "集成测试" },
    { "source": "架构测试策略", "predicate": "包括", "target": "验收测试" },
    { "source": "架构测试", "predicate": "包括", "target": "架构测试方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "架构测试覆盖方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "组件设计正确性验证方法" },
    { "source": "架构测试方法", "predicate": "包括", "target": "基于CHAM的架构动态语义验证方法" },
    { "source": "系统架构", "predicate": "包括", "target": "架构发现" },
    { "source": "架构发现", "predicate": "包括", "target": "迭代架构发现过程" },
    { "source": "系统架构", "predicate": "包括", "target": "架构演化" },
    { "source": "架构演化", "predicate": "包括", "target": "架构适应性" },
    { "source": "架构演化", "predicate": "包括", "target": "架构扩展" },
    { "source": "系统架构", "predicate": "包括", "target": "架构复用" },
    { "source": "架构复用", "target": "架构模式", "description": "架构模式是架构复用的一种成果。" },
    { "source": "系统架构", "predicate": "包括", "target": "开发模型" },
    { "source": "开发模型", "predicate": "包括", "target": "瀑布模型" },
    { "source": "开发模型", "predicate": "包括", "target": "渐进式开发模型" },
    { "source": "开发模型", "predicate": "包括", "target": "变换模型" },
    { "source": "系统架构", "predicate": "包括", "target": "架构风格" },
    { "source": "架构风格", "predicate": "包括", "target": "数据流风格" },
    { "source": "架构风格", "predicate": "包括", "target": "调用/返回风格" },
    { "source": "架构风格", "predicate": "包括", "target": "独立组件风格" },
    { "source": "架构风格", "predicate": "包括", "target": "虚拟机风格" },
    { "source": "架构风格", "predicate": "包括", "target": "仓库风格" },
    { "source": "Open Group", "predicate": "提出", "target": "ADML" },
    { "source": "XML", "target": "ADML", "description": "ADML是基于XML。" },
    { "source": "系统架构", "target": "软件生命周期", "description": "软件架构是软件生命周期中的重要产物，它影响软件开发的各个阶段。\n一、需求阶段：把软件架构有的概念引入需求分析阶段，有助于保证需求规约和系统设计之间的可追踪性和一致性。\n二、设计阶段：设计阶段是软件架构研究关注最早、最多的阶段，这一阶段的软件架构主要包括软件架构的描述、软件架构模型的设计与分析以及对软件架构设计经验的总结与复用等。\n三、实现阶段：将设计阶段设计的算法及数据类型用程序设计语言进行表示，满足设计、架构和需求分析的要求，从而得到满足设计需求的目标系统。\n四、维护阶段：为了保证软件具有良好的维护性，在软件架构中针对维护性目标进行分析时，需要对一些有关维护性的属性（如可扩展性、可替换性）进行规定，当架构经过一定的开发过程实现和形成软件系统时，这些属性也相应地反映了软件的维护性。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构模型" },
    { "source": "架构模型", "predicate": "包括", "target": "分层架构" },
    { "source": "架构模型", "predicate": "包括", "target": "事件驱动架构" },
    { "source": "架构模型", "predicate": "包括", "target": "微核架构" },
    { "source": "架构模型", "predicate": "包括", "target": "微服务架构" },
    { "source": "服务导向架构", "target": "微服务架构", "description": "微服务架构是服务导向架构（Service-Oriented Architecture，SOA）的升级" },
    { "source": "架构模型", "predicate": "包括", "target": "云架构" },
    { "source": "系统架构", "predicate": "包括", "target": "架构建模方法" },
    { "source": "架构建模方法", "predicate": "包括", "target": "结构模型" },
    { "source": "结构模型", "predicate": "核心是", "target": "架构描述语言" },
    { "source": "架构建模方法", "predicate": "包括", "target": "框架模型" },
    { "source": "架构建模方法", "predicate": "包括", "target": "动态模型" },
    { "source": "架构建模方法", "predicate": "包括", "target": "过程模型" },
    { "source": "Philippe Kruchten", "predicate": "提出", "target": "“4+1”架构视图模型" },
    { "source": "“4+1”架构视图模型", "target": "架构建模方法", "description": "四种模型并不是完全独立的，通过有机的结合才可形成一个完整的模型来刻画系统架构，也将能更加准确、全面地反映软件架构。" },
    { "source": "系统架构", "predicate": "包括", "target": "架构应用场景" },
    { "source": "架构风格", "predicate": "包括", "target": "管道-过滤器风格" },
    { "source": "架构应用场景", "target": "管道-过滤器风格", "description": "用于将系统分成若干独立的步骤" },
    { "source": "架构风格", "predicate": "包括", "target": "主程序/子系统和面向对象的架构风格" },
    { "source": "架构应用场景", "target": "主程序/子系统和面向对象的架构风格", "description": "用于对组件内部进行设计" },
    { "source": "架构风格", "predicate": "包括", "target": "虚拟机风格" },
    { "source": "架构应用场景", "target": "虚拟机风格", "description": "用于构造解释器或专家系统" },
    { "source": "架构风格", "predicate": "包括", "target": "C/S和B/S风格" },
    { "source": "架构应用场景", "target": "C/S和B/S风格", "description": "适合于数据和处理分布在一定范围，通过网络连接构成系统" },
    { "source": "架构风格", "predicate": "包括", "target": "平台/插件风格" },
    { "source": "架构应用场景", "target": "平台/插件风格", "description": "用于具有插件扩展功能的应用程序" },
    { "source": "架构风格", "predicate": "包括", "target": "MVC风格" },
    { "source": "架构应用场景", "target": "MVC风格", "description": "用于用户交互程序的设计" },
    { "source": "架构风格", "predicate": "包括", "target": "SOA风格" },
    { "source": "架构应用场景", "target": "SOA风格", "Description": "用在企业集成等方面" },
    { "source": "架构风格", "predicate": "包括", "target": "C2风格" },
    { "source": "架构应用场景", "target": "C2风格", "description": "用于GUI软件开发，用以构件灵活和可扩展的应用系统等" },
    { "source": "系统架构设计师", "predicate": "相比于", "target": "项目经理", "description": "在组织中的职位方面，架构设计师是项目中的技术领导，应该拥有进行技术决策的权威。项目经理更关注管理资源、进度和成本方面的项目计划，架构设计师和项目经理代表了这个项目的公共角色。" },
    { "source": "计算机系统", "predicate": "包括", "target": "计算机硬件" },
    { "source": "计算机系统", "predicate": "包括", "target": "计算机软件" },
    { "source": "计算机硬件", "predicate": "相比于", "target": "计算机软件", "description": "从存在形式上看，计算机硬件是有形的，而软件是无形的；从计算机功能来看，硬件与软件的界限正在逐渐模糊。在不同的应用场合，基于设计考虑，某些功能可能由硬件实现，也可能由软件实现。比如，较典型的可编程逻辑，它在设计阶段可作为软件对待，但运行中则是以逻辑门的物理形态而存在。随着科技的发展，计算机系统的组成越来越复杂，多功能设备越来越多。" },
    { "source": "计算机硬件", "target": "计算机组成结构" },
    { "source": "冯·诺依曼结构计算机", "target": "计算机组成结构", "Description": "计算机组成结构是源于冯·诺依曼结构计算机。" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "处理器" },
    { "source": "处理器", "target": "指令集" },
    { "source": "指令集", "predicate": "包括", "target": "CISC" },
    { "source": "CISC", "predicate": "包括", "target": "x86CPU" },
    { "source": "Intel", "target": "x86CPU" },
    { "source": "AMD", "target": "x86CPU" },
    { "source": "指令集", "predicate": "包括", "target": "RISC" },
    { "source": "RISC", "predicate": "包括", "target": "ARM" },
    { "source": "RISC", "predicate": "包括", "target": "Power" },
    { "source": "CISC", "predicate": "相比于", "target": "RISC", "description": "随着研究的深入，除了由于历史原因而仍然存在的CISC结构外，RISC已经成为计算机指令集发展的趋势，几乎所有后期出现的指令集均为RISC架构。", "link": "/posts/system-architecture-designer/cisc-vs-risc" },
    { "source": "处理器", "predicate": "包括", "target": "图形处理器" },
    { "source": "图形处理器", "target": "深度学习" },
    { "source": "图形处理器", "target": "机器学习" },
    { "source": "处理器", "predicate": "包括", "target": "信号处理器" },
    { "source": "处理器", "predicate": "包括", "target": "现场可编程逻辑门阵列" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "存储器" },
    { "source": "处理器", "target": "存储器" },
    { "source": "存储器", "target": "存储器硬件结构" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "SRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "DRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "NVRAM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "Flash" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "EPROM" },
    { "source": "存储器硬件结构", "predicate": "包括", "target": "Disk" },
    { "source": "存储器", "target": "存储器分层结构" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "片上缓存" },
    { "source": "SRAM", "target": "片上缓存" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "片外缓存" },
    { "source": "SRAM", "target": "片外缓存" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "主存" },
    { "source": "DRAM", "target": "主存" },
    { "source": "主存", "target": "处理器", "description": "通过总线与处理器连接。" },
    { "source": "存储器分层结构", "predicate": "包括", "target": "外存" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "总线" },
    { "source": "总线", "predicate": "包括", "target": "内总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "predicate": "包括", "target": "系统总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "predicate": "包括", "target": "外部总线", "description": "按照总线在计算机中所处的位置划分为内总线、系统总线和外部总线。" },
    { "source": "总线", "target": "总线桥", "description": "总线之间通过桥（Bridge）实现连接。" },
    { "source": "总线", "target": "总线性能指标" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线带宽" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线服务质量QoS" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线时延" },
    { "source": "总线性能指标", "predicate": "包括", "target": "总线抖动" },
    { "source": "总线", "predicate": "包括", "target": "并行总线", "description": "计算机总线存在许多种类，常见的有并行总线和串行总线。" },
    { "source": "并行总线", "predicate": "包括", "target": "PCI" },
    { "source": "并行总线", "predicate": "包括", "target": "PCIe" },
    { "source": "并行总线", "predicate": "包括", "target": "ATA" },
    { "source": "总线", "predicate": "包括", "target": "串行总线", "description": "计算机总线存在许多种类，常见的有并行总线和串行总线。" },
    { "source": "并行总线", "predicate": "相对于", "target": "串行总线" },
    { "source": "串行总线", "predicate": "包括", "target": "USB" },
    { "source": "串行总线", "predicate": "包括", "target": "SATA" },
    { "source": "串行总线", "predicate": "包括", "target": "CAN" },
    { "source": "串行总线", "predicate": "包括", "target": "RS-232" },
    { "source": "串行总线", "predicate": "包括", "target": "RS-485" },
    { "source": "串行总线", "predicate": "包括", "target": "RapidIO" },
    { "source": "串行总线", "predicate": "包括", "target": "以太网" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "接口" },
    { "source": "接口", "predicate": "包括", "target": "显示类接口" },
    { "source": "显示类接口", "predicate": "包括", "target": "HDMI" },
    { "source": "显示类接口", "predicate": "包括", "target": "DVI" },
    { "source": "接口", "predicate": "包括", "target": "音频输入输出类接口" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "TRS" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "RCA" },
    { "source": "音频输入输出类接口", "predicate": "包括", "target": "XLR" },
    { "source": "接口", "predicate": "包括", "target": "网络类接口" },
    { "source": "网络类接口", "predicate": "包括", "target": "RJ45" },
    { "source": "网络类接口", "predicate": "包括", "target": "FC" },
    { "source": "接口", "predicate": "包括", "target": "PS/2接口" },
    { "source": "接口", "predicate": "包括", "target": "USB接口" },
    { "source": "接口", "predicate": "包括", "target": "SATA接口" },
    { "source": "接口", "predicate": "包括", "target": "LPT打印接口" },
    { "source": "接口", "predicate": "包括", "target": "RS-232接口" },
    { "source": "总线", "target": "接口", "description": "一种总线可能存在多种接口" },
    { "source": "计算机组成结构", "predicate": "包括", "target": "外部设备" },
    { "source": "外部设备", "predicate": "包括", "target": "外存" },
    { "source": "外部设备", "predicate": "包括", "target": "鼠标" },
    { "source": "外部设备", "predicate": "包括", "target": "键盘" },
    { "source": "外部设备", "predicate": "包括", "target": "显示器" },
    { "source": "外部设备", "predicate": "包括", "target": "扫描仪" },
    { "source": "外部设备", "predicate": "包括", "target": "摄像头" },
    { "source": "外部设备", "predicate": "包括", "target": "麦克风" },
    { "source": "外部设备", "predicate": "包括", "target": "打印机" },
    { "source": "外部设备", "predicate": "包括", "target": "光驱" },
    { "source": "计算机程序", "predicate": "相比于", "target": "计算机软件", "description": "早期的计算机软件和计算机程序的概念几乎不加区别，后来计算机软件的概念在计算机程序的基础上得到了延伸。计算机软件是指计算机系统中的程序及其文档，是计算任务的处理对象和处理规则的描述。" },
    { "source": "计算机软件", "predicate": "包括", "target": "系统软件", "description": "按照软件所起的作用和需要的运行环境的不同，通常将计算机软件分为系统软件和应用软件两大类。" },
    { "source": "计算机软件", "predicate": "包括", "target": "应用软件", "description": "按照软件所起的作用和需要的运行环境的不同，通常将计算机软件分为系统软件和应用软件两大类。" },
    { "source": "系统软件", "predicate": "包括", "target": "操作系统" },
    { "source": "操作系统", "target": "计算机硬件", "description": "操作系统是配置在计算机硬件上的第1层软件。" },
    { "source": "应用软件", "target": "操作系统", "description": "操作系统向上为引用软件提供支持。" },
    { "source": "操作系统", "target": "操作系统组成" },
    { "source": "操作系统组成", "predicate": "包括", "target": "操作系统内核" },
    { "source": "操作系统内核", "predicate": "包括", "target": "系统调用接口" },
    { "source": "应用软件", "target": "系统调用接口", "description": "由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口（称为系统调用接口或或应用程序接口API）。" },
    { "source": "系统调用接口", "target": "计算机硬件", "description": "系统调用接口是对硬件设备的抽象和调用。" },
    { "source": "操作系统内核", "target": "主存", "description": "内核通常都驻留在内存中。" },
    { "source": "操作系统组成", "predicate": "包括", "target": "图形用户界面程序" },
    { "source": "操作系统", "target": "操作系统作用" },
    { "source": "操作系统", "target": "操作系统特征" },
    { "source": "操作系统", "target": "操作系统分类" },
    { "source": "操作系统分类", "predicate": "包括", "target": "批处理操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "分时操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "实时操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "网络操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "分布式操作系统" },
    { "source": "操作系统分类", "predicate": "包括", "target": "微型计算机操作系统" },
    { "source": "微型计算机操作系统", "predicate": "包括", "target": "Windows" },
    { "source": "微型计算机操作系统", "predicate": "包括", "target": "MAC OS" },
    { "source": "微型计算机操作系统", "predicate": "包括", "target": "Linux" },
    { "source": "操作系统分类", "predicate": "包括", "target": "嵌入式操作系统" },
    { "source": "数据库", "target": "数据库分类" },
    { "source": "数据库分类", "predicate": "包括", "target": "关系数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "键值数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "列存储数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "文档数据库" },
    { "source": "数据库分类", "predicate": "包括", "target": "搜索引擎数据库" },
    { "source": "数据模型", "target": "关系数据库", "description": "数据模型是对数据库组织方式的一种模型化表示，是数据库系统的核心与基础。" },
    { "source": "关系模型", "target": "数据模型" },
    { "source": "关系数据库", "target": "关系数据库设计" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计特点" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计方法" },
    { "source": "关系数据库设计", "predicate": "包括", "target": "关系数据库设计基本步骤" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库需求分析" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库概念结构设计" },
    { "source": "数据库需求分析", "target": "数据库概念结构设计" },
    { "source": "数据库概念结构设计", "target": "E-R方法" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库逻辑结构设计" },
    { "source": "数据库概念结构设计", "target": "数据库逻辑结构设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库物理结构设计" },
    { "source": "数据库逻辑结构设计", "target": "数据库物理结构设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库应用程序设计" },
    { "source": "数据库物理结构设计", "target": "数据库应用程序设计" },
    { "source": "关系数据库设计基本步骤", "predicate": "包括", "target": "数据库运行维护" },
    { "source": "数据库应用程序设计", "target": "数据库运行维护" },
    { "source": "数据库分类", "predicate": "包括", "target": "分布式数据库" },
    { "source": "分布式数据库", "predicate": "包括", "target": "分布式数据库体系结构" },
    { "source": "分布式数据库", "predicate": "包括", "target": "分布式数据库应用" },
    { "source": "数据库", "target": "数据库管理系统" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "Oracle关系数据库" },
    { "source": "Oracle", "target": "Oracle关系数据库" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "DB2" },
    { "source": "IBM", "target": "DB2" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "Sybase数据库" },
    { "source": "Sybase", "target": "Sybase数据库" },
    { "source": "数据库管理系统", "predicate": "包括", "target": "SQL Server" },
    { "source": "Microsoft", "target": "SQL Server" },
    { "source": "数据库管理系统", "target": "大型数据库管理系统特点" },
    { "source": "外存", "target": "文件" },
    { "source": "文件系统", "target": "文件" },
    { "source": "文件", "target": "文件类型" },
    { "source": "文件", "target": "文件结构" },
    { "source": "文件结构", "predicate": "包括", "target": "文件逻辑结构" },
    { "source": "文件逻辑结构", "predicate": "包括", "target": "记录式文件" },
    { "source": "文件逻辑结构", "predicate": "包括", "target": "流式文件" },
    { "source": "文件结构", "predicate": "包括", "target": "文件物理结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "连续结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "链接结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "索引结构" },
    { "source": "文件物理结构", "predicate": "包括", "target": "多个物理块的索引表" },
    { "source": "文件系统", "target": "文件存取方法" },
    { "source": "文件存取方法", "predicate": "包括", "target": "顺序存取方法" },
    { "source": "文件存取方法", "predicate": "包括", "target": "随机存取方法" },
    { "source": "文件系统", "target": "文件存储空间管理" },
    { "source": "文件存储空间管理", "target": "外存空闲空间管理" },
    { "source": "外存", "target": "外存空闲空间管理" },
    { "source": "外存空闲空间管理", "target": "磁盘分配表", "description": "外存空闲空间管理的数据结构通常称为磁盘分配表。" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "空闲区表" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "位示图" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "空闲块链" },
    { "source": "外存空闲空间管理", "predicate": "包括", "target": "成组链接法" },
    { "source": "成组链接法", "target": "UNIX" },
    { "source": "文件系统", "target": "文件共享" },
    { "source": "文件共享", "predicate": "包括", "target": "硬链接" },
    { "source": "文件共享", "predicate": "包括", "target": "符号链接" },
    { "source": "文件系统", "target": "文件保护" },
    { "source": "文件保护", "predicate": "包括", "target": "存取控制矩阵" },
    { "source": "文件保护", "predicate": "包括", "target": "存取控制表" },
    { "source": "存取控制表", "target": "UNIX" },
    { "source": "文件保护", "predicate": "包括", "target": "用户权限表" },
    { "source": "文件保护", "predicate": "包括", "target": "密码" },
    { "source": "网络协议", "predicate": "包括", "target": "局域网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "广域网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "无线网协议" },
    { "source": "网络协议", "predicate": "包括", "target": "移动网协议" },
    { "source": "计算机软件", "predicate": "包括", "target": "中间件" },
    { "source": "应用软件", "target": "中间件" },
    { "source": "中间件", "target": "操作系统" },
    { "source": "中间件", "predicate": "包括", "target": "通信处理（消息）中间件" },
    { "source": "通信处理（消息）中间件", "predicate": "包括", "target": "eLink" },
    { "source": "BEA", "target": "eLink" },
    { "source": "通信处理（消息）中间件", "predicate": "包括", "target": "MQSeries" },
    { "source": "IBM", "target": "MQSeries" },
    { "source": "通信处理（消息）中间件", "predicate": "包括", "target": "TongLINK" },
    { "source": "Windows", "target": "通信处理（消息）中间件", "description": "Windows系统包含了消息中间件的部分功能。" },
    { "source": "中间件", "predicate": "包括", "target": "事务处理（交易）中间件" },
    { "source": "OLTP", "target": "事务处理（交易）中间件" },
    { "source": "事务处理（交易）中间件", "predicate": "包括", "target": "Tuxedo" },
    { "source": "BEA", "target": "Tuxedo" },
    { "source": "中间件", "predicate": "包括", "target": "数据存取管理中间件" },
    { "source": "中间件", "predicate": "包括", "target": "Web服务器中间件" },
    { "source": "Web服务器中间件", "target": "HTTP协议" },
    { "source": "Web服务器中间件", "target": "SilverStream" },
    { "source": "中间件", "predicate": "包括", "target": "安全中间件" },
    { "source": "中间件", "predicate": "包括", "target": "跨平台和架构的中间件" },
    { "source": "跨平台和架构的中间件", "predicate": "包括", "target": "CORBA" },
    { "source": "跨平台和架构的中间件", "predicate": "包括", "target": "JavaBeans" },
    { "source": "浏览器", "target": "JavaBeans" },
    { "source": "跨平台和架构的中间件", "predicate": "包括", "target": "COM+" },
    { "source": "Windows", "target": "COM+" },
    { "source": "跨平台和架构的中间件", "target": "UNIX" },
    { "source": "UNIX", "target": "Linux", "description": "Linux是基于UNIX。" },
    { "source": "跨平台和架构的中间件", "target": "Windows" },
    { "source": "中间件", "predicate": "包括", "target": "专用平台中间件" },
    { "source": "中间件", "predicate": "包括", "target": "网络中间件" },
    { "source": "计算机软件", "predicate": "包括", "target": "软件构件" },
    { "source": "软件构件", "predicate": "包括", "target": "软件构件组装模型" },
    { "source": "软件构件", "predicate": "包括", "target": "商用构件标准规范" },
    { "source": "商用构件标准规范", "predicate": "包括", "target": "CORBA" },
    { "source": "OMG", "target": "CORBA" },
    { "source": "商用构件标准规范", "predicate": "包括", "target": "J2EE" },
    { "source": "Sun", "target": "J2EE" },
    { "source": "Java", "target": "J2EE" },
    { "source": "商用构件标准规范", "predicate": "包括", "target": "DNA 2000" },
    { "source": "Microsoft", "target": "DNA 2000" },
    { "source": "应用软件", "predicate": "包括", "target": "通用软件" },
    { "source": "应用软件", "predicate": "包括", "target": "专用软件" },
    { "source": "嵌入式系统", "target": "嵌入式系统组成" },
    { "source": "嵌入式系统", "target": "嵌入式系统特点" },
    { "source": "嵌入式系统", "target": "嵌入式系统分类" },
    { "source": "嵌入式系统", "target": "嵌入式软件" },
    { "source": "嵌入式软件", "target": "嵌入式软件开发环境" },
    { "source": "嵌入式软件", "target": "嵌入式软件组成" },
    { "source": "嵌入式软件组成", "target": "硬件抽象" },
    { "source": "嵌入式软件组成", "target": "板级支持包" },
    { "source": "嵌入式软件", "target": "嵌入式软件特点" },
    { "source": "嵌入式软件", "target": "嵌入式软件开发" },
    { "source": "嵌入式软件", "target": "安全攸关软件" },
    { "source": "IEEE", "predicate": "定义", "target": "安全攸关软件", "description": "美国电气和电子工程协会（IEEE）将安全攸关软件定义为：“用于一个系统中，可能导致不可接受的风险的软件”。" },
    { "source": "NASA 8719.13A", "predicate": "定义", "target": "软件安全", "description": "NASA 8719.13A给出了软件安全（Safety）的定义，即“在软件生命周期内，应用安全性工程技术，确保软件采取积极的措施提高系统安全性，确保降低系统安全性的错误，使其减少或控制在一个风险可接受的水平内”。" },
    { "source": "安全攸关软件", "target": "软件安全" },
    { "source": "软件开发保证级别", "target": "安全攸关软件", "description": "根据软件对安全性的不同影响程度，利用软件开发保证级别的概念来对软件进行分类和区别对待，即对安全攸关软件分配不同的开发保证级别，对级别越高的功能要求执行越多的开发和验证活动，要求越多的依赖性证据，要求越多的错误要被识别和排除。" },
    { "source": "安全攸关软件", "target": "DO-178" },
    { "source": "FAA", "target": "DO-178", "description": "Do-178标准中的Scftware Considerations in Airborne System and Equipment Certification是美国FAA制定的一套民用飞机适航标准中针对机载软件而制定的“机载系统/设备合格审定中的软件考虑”唯一标准，此标准被航空、航天等安全攸关领域普遍采用。" },
    { "source": "RTCA", "target": "DO-178", "description": "1982年由RTCA和EUROCAE正式发布了DO-178版，这是民用航空机载软件开发中安全保证的一个里程碑。" },
    { "source": "EUROCAE", "target": "DO-178", "description": "1982年由RTCA和EUROCAE正式发布了DO-178版，这是民用航空机载软件开发中安全保证的一个里程碑。" },
    { "source": "DO-178", "target": "DO-178B", "description": "1992年发布的Do-178第三版（B版）称为Do-178B。现在，DO-178B早就成了国际公认的民用航空机载软件的开发标准。一架民用飞机（相对军用飞机而言）不经过“民航标准体系”的适航认证，是不可以飞行的。而这个“民航标准体系”中，针对机载软件适航认证的，就是DO-178B标准。" },
    { "source": "DO-178B", "predicate": "包括", "target": "DO-178B目的" },
    { "source": "DO-178B", "predicate": "包括", "target": "DO-178B内容" },
    { "source": "DO-178B", "predicate": "包括", "target": "DO-178B软件生命周期" },
    { "source": "DO-178B", "target": "DO-178C", "description": "经过再次完善和补充，2011年形成了DO-178C标准，它将工具鉴定、基于模型的开发验证技术、面向对象的技术和形式化验证技术纳入适航验证中。" },
    { "source": "CMM", "target": "CMMI" },
    { "source": "DO-178", "predicate": "相比于", "target": "CMMI", "description": "DO-178与CMMI是目前承担安全攸关软件开发企业最为关注的两个标准，二者的主要区别如下。\n一、CMMI是从过程改进的视角，对软件开发的技术与管理提出要求，覆盖了从个人、项目及组织三个层次的要求，更关注组织整体软件能力提升。DC-178是从适航审定视角，对软件开发的技术与管理过程提出要求，更关注项目软件质量对于安全性的影响。所以DO-178覆盖的过程范围比CMMI少，比如DO-178C对于项目监控过程、风险管理过程、培训过程等并没有提出明确要求。\n二、CMMI主要由实践组成，实践是各行业最佳实践的抽象（去环境、方法）提炼，而DO-178C过程主要由目标、活动与数据组成，活动虽不代表具体工作步骤，但活动要求比较具体，并且对过程输出（数据）提出了明确要求，结合DO-178的配置管理过程，对数据管理与控制的要求也较为具体。\n三、CMMI是集成了系统、软件和硬件等视角，所以在内容和措辞上必须兼顾多个场景，容易产生歧义。而DO-178聚焦软件，更容易为软件工程师所理解（不代表容易做到）。\n总之，DO-178比CMMI的目标更清晰，要求更具体，而且是针对安全攸关软件的。这两个标准都侧重于要求，而不是具体方法和步骤。对一个企业而言，不仅要关注一个项目的成功，还要在多个项目中持续获得成功，而且是商业成功（包括质量、进度、成本等），这就需要建立更为系统的软件过程体系，在这一点上CMMI更有指导性。过程改进思想的本质是过程不断丰富和优化的过程，在这个过程中需要融合不同标准与方法的的要求以及实践中的经验与教训的总结。" },
    { "source": "计算机网络", "target": "计算机系统", "description": "将连接多个计算机以实现计算机间数据交换能力的网络设备，则称之为计算机网络，简称网络。" },
    { "source": "计算机网络", "target": "计算机网络发展" },
    { "source": "计算机网络", "target": "计算机网络功能" },
    { "source": "计算机网络", "target": "计算机网络指标" },
    { "source": "计算机网络指标", "predicate": "包括", "target": "网络性能指标" },
    { "source": "网络性能指标", "predicate": "包括", "target": "速率" },
    { "source": "网络性能指标", "predicate": "包括", "target": "带宽" },
    { "source": "网络性能指标", "predicate": "包括", "target": "吞吐量" },
    { "source": "网络性能指标", "predicate": "包括", "target": "时延" },
    { "source": "网络性能指标", "predicate": "包括", "target": "往返时间" },
    { "source": "网络性能指标", "predicate": "包括", "target": "利用率" },
    { "source": "网络性能指标", "predicate": "相对于", "target": "网络非性能指标" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "易管理和维护性" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "费用" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "质量" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "标准化" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "可靠性" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "可扩展性和可升级性" },
    { "source": "网络非性能指标", "predicate": "包括", "target": "易管理和维护性" },
    { "source": "计算机网络", "target": "计算机网络应用" },
    { "source": "计算机网络", "target": "通信技术", "description": "计算机网络是利用通信技术将数据从一个结点传送到另一结点的过程。通信技术是计算机网络的基础。" },
    { "source": "通信技术", "target": "信道" },
    { "source": "信道", "predicate": "包括", "target": "物理信道" },
    { "source": "信道", "predicate": "包括", "target": "逻辑信道" },
    { "source": "物理信道", "predicate": "相对于", "target": "逻辑信道" },
    { "source": "香农公式", "target": "信道", "description": "香农公式指出，提升信道容量可以使用比较大的带宽，降低信噪比；也可以使用比较小的带宽，升高信噪比。" },
    { "source": "通信技术", "target": "复用技术", "description": "在一条信道上只传输一路数据的情况下，只需要经过信源编码、信道编码、交织、脉冲成形、调制之后就可以发送到信道上进行传输了；但如果同时传递多路数据就需要复用技术和多址技术。" },
    { "source": "通信技术", "target": "多址技术", "description": "在一条信道上只传输一路数据的情况下，只需要经过信源编码、信道编码、交织、脉冲成形、调制之后就可以发送到信道上进行传输了；但如果同时传递多路数据就需要复用技术和多址技术。" },
    { "source": "多址技术", "target": "复用技术", "description": "多路复用技术是多址技术的基础。" },
    { "source": "通信技术", "target": "5G通信网络" },
    { "source": "计算机网络", "target": "网络技术" },
    { "source": "网络技术", "target": "局域网" },
    { "source": "局域网", "target": "网络拓扑" },
    { "source": "网络拓扑", "predicate": "包括", "target": "星状结构" },
    { "source": "网络拓扑", "predicate": "包括", "target": "树状结构" },
    { "source": "网络拓扑", "predicate": "包括", "target": "总线结构" },
    { "source": "网络拓扑", "predicate": "包括", "target": "环形结构" },
    { "source": "网络拓扑", "predicate": "包括", "target": "网状结构" },
    { "source": "局域网", "target": "以太网" },
    { "source": "IEEE 802.3", "target": "以太网", "description": "IEEE制定的IEEE 802.3标准给出了以太网的技术标准。它规定了包括物理层的连线、电信号和介质访问层协议的内容。" },
    { "source": "IEEE", "predicate": "制定", "target": "IEEE 802.3" },
    { "source": "以太网", "predicate": "包括", "target": "以太网帧结构" },
    { "source": "以太网", "predicate": "包括", "target": "最小帧长" },
    { "source": "以太网", "predicate": "包括", "target": "最大传输距离" },
    { "source": "以太网", "predicate": "包括", "target": "流量控制" },
    { "source": "局域网", "target": "无线局域网" },
    { "source": "无线局域网", "target": "WLAN标准" },
    { "source": "WLAN标准", "predicate": "包括", "target": "IEEE 802.11" },
    { "source": "IEEE", "predicate": "提出", "target": "IEEE 802.11" },
    { "source": "WLAN标准", "predicate": "包括", "target": "IEEE 802.11a" },
    { "source": "IEEE 802.11", "target": "IEEE 802.11a" },
    { "source": "WLAN标准", "predicate": "包括", "target": "IEEE 802.11b" },
    { "source": "IEEE 802.11a", "target": "IEEE 802.11b" },
    { "source": "WLAN标准", "predicate": "包括", "target": "IEEE 802.11g" },
    { "source": "IEEE 802.11b", "target": "IEEE 802.11g" },
    { "source": "WLAN标准", "predicate": "包括", "target": "IEEE 802.11n" },
    { "source": "IEEE 802.11g", "target": "IEEE 802.11n" },
    { "source": "无线局域网", "target": "WLAN拓扑结构" },
    { "source": "WLAN拓扑结构", "predicate": "包括", "target": "点对点型" },
    { "source": "WLAN拓扑结构", "predicate": "包括", "target": "HUB型" },
    { "source": "WLAN拓扑结构", "predicate": "包括", "target": "完全分布型" },
    { "source": "网络技术", "target": "广域网" },
    { "source": "广域网", "target": "广域网技术" },
    { "source": "广域网技术", "predicate": "包括", "target": "同步光网络" },
    { "source": "广域网技术", "predicate": "包括", "target": "数字数据网" },
    { "source": "广域网技术", "predicate": "包括", "target": "帧中继" },
    { "source": "广域网技术", "predicate": "包括", "target": "异步传输技术" },
    { "source": "广域网", "target": "广域网特点" },
    { "source": "广域网", "target": "广域网分类" },
    { "source": "广域网分类", "predicate": "包括", "target": "公共传输网络" },
    { "source": "广域网分类", "predicate": "包括", "target": "专用传输网络" },
    { "source": "专用传输网络", "target": "数字数据网", "description": "专用传输网络主要是数字数据网。" },
    { "source": "广域网分类", "predicate": "包括", "target": "无线传输网络" },
    { "source": "无线传输网络", "target": "5G通信网络" },
    { "source": "网络技术", "target": "城域网" },
    { "source": "网络技术", "target": "移动通信网" },
    { "source": "移动通信网", "target": "移动通信网发展" },
    { "source": "移动通信网", "target": "5G网络主要特征" },
    { "source": "5G通信网络", "target": "5G网络主要特征" },
    { "source": "5G网络主要特征", "target": "服务化架构" },
    { "source": "5G网络主要特征", "target": "网络切片" },
    { "source": "计算机网络", "target": "组网技术" },
    { "source": "国际标准化组织", "target": "OSI参考模型" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "物理层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "数据链路层" },
    { "source": "数据链路层", "target": "物理层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "网络层" },
    { "source": "网络层", "target": "数据链路层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "" },
    { "source": "传输层", "target": "网络层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "会话层" },
    { "source": "会话层", "target": "传输层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "表示层" },
    { "source": "表示层", "target": "会话层" },
    { "source": "OSI参考模型", "predicate": "包括", "target": "应用层" },
    { "source": "应用层", "target": "表示层" },
    { "source": "组网技术", "target": "网络设备" },
    { "source": "网络设备", "predicate": "包括", "target": "集线器" },
    { "source": "网络设备", "predicate": "包括", "target": "中继器" },
    { "source": "网络设备", "predicate": "包括", "target": "网桥" },
    { "source": "网络设备", "predicate": "包括", "target": "交换机" },
    { "source": "网络设备", "predicate": "包括", "target": "路由器" },
    { "source": "网络设备", "predicate": "包括", "target": "防火墙" },
    { "source": "物理层", "target": "中继器" },
    { "source": "数据链路层", "target": "网桥" },
    { "source": "数据链路层", "target": "交换机" },
    { "source": "网络层", "target": "路由器" },
    { "source": "国际标准化组织", "target": "OSI协议集" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "IP协议" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "TCP协议" },
    { "source": "传输层", "target": "TCP协议" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "UDP协议" },
    { "source": "传输层", "target": "UDP协议" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "FTP协议" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "SMTP协议" },
    { "source": "SMTP协议", "predicate": "相对于", "target": "POP3协议" },
    { "source": "TCP/IP协议集", "predicate": "包括", "target": "HTTP协议" },
    
    { "source": "层次化存储结构", "target": "存储器" },
    { "source": "Cache", "target": "层次化存储结构" },
    { "source": "Cache", "target": "SRAM" },
    { "source": "局部性原理", "target": "Cache" },
    { "source": "ROS1", "target": "ROS" },
    { "source": "ROS2", "target": "ROS" },
    { "source": "Standard分词器", "target": "Elasticsearch分词器" },
    { "source": "Simple分词器", "target": "Elasticsearch分词器" },
    { "source": "Whitespace分词器", "target": "Elasticsearch分词器" },
    { "source": "Keyword分词器", "target": "Elasticsearch分词器" },
    { "source": "RESTful", "target": "HTTP方法" },
    { "source": "HTTP方法", "target": "HTTP协议" }
  ]
}
